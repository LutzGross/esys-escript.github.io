<!-- $Id: devel_body.part,v 1.12 2005/02/08 08:02:36 paultcochrane Exp $ -->
  <h1>Development</h1>
  
  <hr class="top" />

  <p>
  PyVisi is a very new project (launched in November of 2004) and is under
  constant development.  However, any help would be greatly appreciated.
  </p>

  <h2>Renderers</h2>

  <p>
  Currently only <a href="http://www.vtk.org">vtk</a> and <a
      href="http://www.gnuplot.info">gnuplot</a> renderer modules are being
  used in development, however, the structure already exists for the
  <a href="http://www.povray.org">povray</a>, 
  <a href="http://plplot.sourceforge.net">plplot</a> and 
  <a href="http://www.opendx.org">opendx</a> renderers, one merely needs to
  write the relevant code (although there is some change going on, so expect
  there to be more objects and methods to come).  One can use the
  <code>skel_module.py</code> script in the <code>admin/</code> directory to
  generate the required structure if one wants to add another renderer
  module to pyvisi.
  </p>
  <p>
  Other renderers are envisaged being added to the interface, such as 
  <!-- <a href="http://www.rsinc.com/idl/">IDL</a>,  -->
  <a href="http://plplot.sourceforge.net">PLplot</a>, 
  <a href="http://www.mps.mpg.de/dislin/">DISLIN</a>, 
  <a href="http://ngwww.ucar.edu/ncl/pyngl/">PyNGL</a>, 
  <a href="http://www.opengl.org/">OpenGL</a>,
  <a href="http://www.renderman.org/">RenderMan</a>,
  <a href="http://www.opendx.org/">OpenDX</a>,
  and more.  Once the structure is in place
  to add a renderer module, it is just a matter of writing the code to
  the interface.
  </p>
  <p>
  If you are interested in
  contributing code, grab a copy of the cvs:
  </p>
  <pre>
  cvs -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/pyvisi login
  cvs -z3 -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/pyvisi co pyvisi
  </pre>
  <p>
  and send patches to:
  <a href="mailto:paultcochrane@users.sourceforge.net">paultcochrane at users dot sourceforge dot net</a>.
  </p>

  <h2>Code development guidelines</h2>

  <ul>
      <li>
      The names of the autogenerated code objects should have a leading 
      underscore to prevent naming conflicts.  E.g. a vtk renderer object
      should be called something like _ren, and the render window object 
      called something like _renWin (or _renderWindow if you like).
      </li>
      <li>
      Debug statements are useful, and for this purpose one should use the
      <code>debugMsg()</code> function defined in the module's
      <code>common.py</code> file.
      </li>
      <li>
      All objects and methods specified in the API should be provided, even
      if the renderer can't actually produce the relevant output.  In that 
      case, a warning or error message should be given mentioning that 
      such a function is not available/possible/supported by the renderer.
      </li>
      <li>
      Generally speaking the renderer needs a python wrapper, especially if
      it is to be run interactively.  However, the renderer could just print
      code output to file for later rendering as would be the case with PovRay.
      </li>
  </ul>

  <h2>Pyvisi class structure</h2>

  <a href="devel/pyvisi_class_structure.svg">pyvisi_class_structure.svg</a>
