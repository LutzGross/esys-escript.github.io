# *****************************************************************************
# *                                                                           *
# *       COPYRIGHT  ACcESS 2004  -  All Rights Reserved                      *
# *                                                                           *
# * This software is the property of ACcESS. No part of this code             *
# * may be copied in any form or by any means without the expressed written   *
# * consent of ACcESS.  Copying, use or modification of this software         *
# * by any unauthorised person is illegal unless that person has a software   *
# * license agreement with ACcESS.                                            *
# *                                                                           *
# *****************************************************************************
#
# Skeleton for unit test files
# Text outside of known blocks is ignored and can be used for comments
# Keywords must be the first non-blank text on a line
# Blocks cannot be embedded in other blocks (they will just be ignored)
#
# The Message block contains text to be output
# The Usage block begins with a "BeginMessage" keyword and ends with a 
# "EndMessage" keyword
# The Message block is processed when it is found and uses whatever
# replacements are in place at the current time
#
BeginMessage
Processing Unit Test generation skeleton
EndMessage

#
# The Usage block contains the text of the usage message to display if
# too few arguments are specified on the command line
# The Usage block begins with a "BeginUsage" keyword and ends with a 
# "EndUsage" keyword
# The BeginUsage has a single argument - the number of arguments required
#
BeginUsage 2
UnitTest skeleton expects two arguments <ClassName> and <ClassNamespace>

   <ClassName> is the name of the class being tested
   <ClassNamespace> is the namespace containing the tested class

EndUsage

#
# The replacements block defines the edit replacements to be performed
# The token to be replaced must be containined inside angle brackets
# (both in the replacement token definition and the text to be edited)
# The replacement text is defined by special keywords
# Valid keywords are 
#   arg:n (where n is a zero based integer)
#       token will be replaced with the text from input argument n
#   date:yyyymmdd
#       token will be replaced with the current date in YYYYMMDD format
# Each replacement block completely replaces any previous replacement block
# no replacement definitions from the previous block are carried forward
# The replacements block begins with a BeginReplacements keyword and
# ends with a EndReplacements keyword
#
BeginReplacements
<ClassName> arg:0
<ClassNamespace> arg:1
<YYYYMMDD> date:yyyymmdd
EndReplacements
#
#  The following message will have replacements substituted
#
BeginMessage
   Classname       : <ClassName>
   Class Namespace : <ClassNamespace>
EndMessage
#
# The FileCheck block checks the specified files do not exist in
# the current directory - if they do processing will stop
# The file names will be processed for replacements
# The FileCheck block begins with the BeginFileCheck keyword and
# ends with the EndFileCheck keyword
#
BeginFileCheck
<ClassName>Test.cpp
<ClassName>Test.mk
<ClassName>TestCase.cpp
<ClassName>TestCase.h
EndFileCheck
#
# The file block defines the text of a file to be generated
# The file block begins with a BeginFile keyword and ends with an
# EndFile keyword
# The BeginFile keyword contains the name of the file as an argument
# the file name is edited with the current replacement set
#
BeginFile <ClassName>Test.cpp
/* 
 *****************************************************************************
 *                                                                           *
 *       COPYRIGHT  ACcESS  -  All Rights Reserved                           *
 *                                                                           *
 * This software is the property of ACcESS. No part of this code             *
 * may be copied in any form or by any means without the expressed written   *
 * consent of ACcESS.  Copying, use or modification of this software         *
 * by any unauthorised person is illegal unless that person has a software   *
 * license agreement with ACcESS.                                            *
 *                                                                           *
 *****************************************************************************
*/
#include "<ClassName>TestCase.h"
#include "CppUnitTest/TestRunner.h"

using namespace CppUnitTest;

int main(int argc, char **argv) {
  //
  // object which runs all of the tests
  TestRunner runner;
  //
  // add the RangeTestCase suite of tests to the runner
  runner.addTest ("<ClassName>", <ClassName>TestCase::suite());

  // actually run the unit tests.
  runner.run (argc, argv);
  return 0;
}

EndFile

BeginFile <ClassName>Test.mk
DEFAULT_TARGET := <ClassName>Test.exe
L_SRC_DIR := .
PACKAGES := CppUnitTest Utils
include $(ESYS_ROOT)/make/Makefile.default

EndFile
BeginFile <ClassName>TestCase.cpp
/* 
 *****************************************************************************
 *                                                                           *
 *       COPYRIGHT  ACcESS  -  All Rights Reserved                           *
 *                                                                           *
 * This software is the property of ACcESS. No part of this code             *
 * may be copied in any form or by any means without the expressed written   *
 * consent of ACcESS.  Copying, use or modification of this software         *
 * by any unauthorised person is illegal unless that person has a software   *
 * license agreement with ACcESS.                                            *
 *                                                                           *
 *****************************************************************************
*/
#include "<ClassNamespace>/<ClassName>.h"
#include "<ClassName>TestCase.h"

using namespace CppUnitTest;

void <ClassName>TestCase::setUp() {
  //
  // This is called before each test is run
 
}

void <ClassName>TestCase::tearDown() {
  //
  // This is called after each test has been run
 
}

void <ClassName>TestCase::testAll() {
  //
  // The test code may be entered here
  // There is nothing special about the function name, it may be renamed to
  // something more suitable. 
  // As many test methods as desired may be added.
  
}

TestSuite* <ClassName>TestCase::suite ()
{
  //
  // create the suite of tests to perform.
  TestSuite *testSuite = new TestSuite ("<ClassName>TestCase");

  testSuite->addTest (new TestCaller< <ClassName>TestCase>("testAll",&<ClassName>TestCase::testAll));
  return testSuite;
}

EndFile
BeginFile <ClassName>TestCase.h
/* 
 *****************************************************************************
 *                                                                           *
 *       COPYRIGHT  ACcESS  -  All Rights Reserved                           *
 *                                                                           *
 * This software is the property of ACcESS. No part of this code             *
 * may be copied in any form or by any means without the expressed written   *
 * consent of ACcESS.  Copying, use or modification of this software         *
 * by any unauthorised person is illegal unless that person has a software   *
 * license agreement with ACcESS.                                            *
 *                                                                           *
 *****************************************************************************
*/
#if !defined  <ClassName>TestCase_<YYYYMMDD>_H
#define  <ClassName>TestCase_<YYYYMMDD>_H

#include "CppUnitTest/TestCase.h"
#include "CppUnitTest/TestSuite.h"
#include "CppUnitTest/TestCaller.h"

class <ClassName>TestCase : public CppUnitTest::TestCase
{
 public:

  //
  // setUp is called before each test method to set up test state
  void setUp();
  //
  // tearDown is called after each test method is called.
  void tearDown(); 

  //
  // A test method must return void and have no arguments
  // <ClassName> class
  void testAll();

  <ClassName>TestCase (std::string name) : TestCase (name) {}
  ~<ClassName>TestCase() {}
  //
  //
  // return the suite of tests to perform
  //
  static CppUnitTest::TestSuite* suite ();
};

#endif
EndFile

BeginMessage
Completed generating Unit Test files
EndMessage
