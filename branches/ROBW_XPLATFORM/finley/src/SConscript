Import('*')

local_env=env.Copy()

src_dir = local_env.Dir('.').srcnode().abspath

import os
filenames = os.listdir(src_dir)
sources = [x for x in filenames if os.path.splitext(x)[1] in ['.cpp', '.c']]
headers = [x for x in filenames if os.path.splitext(x)[1] in ['.h']]

# Filter unused sources
sources.remove('ElementFile_borrowLocalVolume.c') # FIXME: Should this file be removed?

# finleycpp has additional source in the CPPAdapter sub-directory. Append these to the list
cppadapter_filenames = os.listdir(src_dir+'/CPPAdapter');
sources += ['CPPAdapter/'+x for x in cppadapter_filenames if os.path.splitext(x)[1] in ['.cpp', '.c']]
cppadapter_headers = ['CPPAdapter/'+x for x in cppadapter_filenames if os.path.splitext(x)[1] in ['.h']]

if mkl_libs:
   local_env.Append(CPPDEFINES=['MKL',])
if scsl_libs:
   local_env.Append(CPPDEFINES=['SCSL',])
if umf_libs:
   local_env.Append(CPPDEFINES=['UMFPACK',])
if papi_libs:
   local_env.Append(CPPDEFINES=['PAPI',])

lib_name = 'finleycpp'

local_env.Append(LIBS = [boost_lib, 'esysUtils', 'escriptcpp', 'paso'])

lib = local_env.SharedLibrary(lib_name, sources)

include_path = Dir(lib_name, incinstall)
cppadapter_include_path = Dir('CppAdapter', include_path)

local_env.Install(include_path, headers )
local_env.Install(cppadapter_include_path, cppadapter_headers )
local_env.Install(libinstall, lib)


# FIXME: old stuff

#libs = ['escriptcpp',
#        'esysUtils',
#        'paso',
#        str(boost_lib),
#        'dl',
#        'util']     \
#       + sys_libs   \
#       + solver_libs \
#       + papi_libs


#Depends(finley_lib, esysUtils_lib)
#Depends(finley_lib, escript_lib)
#Depends(finley_lib, paso_lib)

