libinstall = None

Import('*')

import os
import string

libname = 'finleycpp'

finley_path = str(esysroot) + '/finley/src'
finley_cppadapter_path = str(esysroot) + '/finley/src/CPPAdapter'
paso_path = str(esysroot) + '/paso/src'
escript_path = str(esysroot) + '/escript/inc'
esysUtils_path = str(esysroot) + '/esysUtils/src'

esys_lib_path = str(esysroot) + '/lib'
mmio_lib_path = str(esysroot) + '/tools/mmio/lib'
esysUtils_lib_path = str(esysroot) + '/esysUtils/lib'

esysUtils_lib = str(esysUtils_lib_path) + '/libesysUtils.a'
escript_lib = str(esys_lib_path) + '/libescriptcpp.so'
paso_lib = str(esys_lib_path) + '/libpaso.a'
mmio_lib = str(mmio_lib_path) + '/libmmio.a'

cpp_path = [finley_path,
            finley_cppadapter_path,
            paso_path,
            escript_path,
            esysUtils_path,
            python_path,
            boost_path]

sources = ['Assemble_addToSystemMatrix.c',
           'Assemble_CopyElementData.c',
           'Assemble_CopyNodalData.c',
           'Assemble_getAssembleParameters.c',
           'Assemble_getSize.c',
           'Assemble_gradient.c',
           'Assemble_handelShapeMissMatch.c',
           'Assemble_integrate.c',
           'Assemble_interpolate.c',
           'Assemble_NodeCoordinates.c',
           'Assemble_PDE.c',
           'Assemble_PDEMatrix_Single2.c',
           'Assemble_PDEMatrix_System2.c',
           'Assemble_PDE_RHS.c',
           'Assemble_RHSMatrix_Single.c',
           'Assemble_RHSMatrix_System.c',
           'Assemble_RobinCondition.c',
           'Assemble_RobinCondition_RHS.c',
           'Assemble_setNormal.c',
           'ElementFile_allocTable.c',
           'ElementFile.c',
           'ElementFile_copyTable.c',
           'ElementFile_gather.c',
           'ElementFile_improveColoring.c',
           'ElementFile_markNodes.c',
           'ElementFile_optimizeDistribution.c',
           'ElementFile_prepare.c',
           'ElementFile_relableNodes.c',
           'ElementFile_scatter.c',
           'ElementFile_setNodeRange.c',
           'Finley.c',
           'IndexList.c',
           'Mesh.c',
           'Mesh_findMatchingFaces.c',
           'Mesh_getPattern.c',
           'Mesh_glueFaces.c',
           'Mesh_hex20.c',
           'Mesh_hex8.c',
           'Mesh_joinFaces.c',
           'Mesh_line2.c',
           'Mesh_line3.c',
           'Mesh_markNodes.c',
           'Mesh_merge.c',
           'Mesh_prepare.c',
           'Mesh_prepareNodes.c',
           'Mesh_print.c',
           'Mesh_read.c',
           'Mesh_rec4.c',
           'Mesh_rec8.c',
           'Mesh_relabelElementNodes.c',
           'Mesh_resolveNodeIds.c',
           'Mesh_saveDX.c',
           'Mesh_saveVTK.c',
           'Mesh_write.c',
           'NodeFile_allocTable.c',
           'NodeFile.c',
           'NodeFile_copyTable.c',
           'NodeFile_gatter.c',
           'NodeFile_scatter.c',
           'NodeFile_setCoordinates.c',
           'NodeFile_setIdRange.c',
           'Quadrature.c',
           'ReferenceElements.c',
           'ShapeFunctions.c',
           'Util.c',
           'CPPAdapter/FinleyError.cpp',
           'CPPAdapter/MeshAdapter.cpp',
           'CPPAdapter/MeshAdapterFactory.cpp',
           'CPPAdapter/SystemMatrixAdapter.cpp',
           'CPPAdapter/finleycpp.cpp']

lib_path = [esys_lib_path,
            mmio_lib_path,
            esysUtils_lib_path,
            boost_lib_path] \
          + solver_lib_paths


libs = ['escriptcpp',
        'esysUtils',
        'paso',
        'mmio',
        str(boost_lib),
        'dl',
        'util']     \
       + sys_libs   \
       + solver_libs

finley_env = Environment(ENV = os.environ)

finley_env.Replace(CC = cc)
finley_env.Replace(CXX = cxx)
finley_env.Replace(CCFLAGS = cc_flags)
finley_env.Replace(CXXFLAGS = cxx_flags)
finley_env.Replace(SHOBJSUFFIX = '.lo')
finley_env.Replace(CPPPATH = cpp_path)
finley_env.Replace(LIBPATH = lib_path)
finley_env.Replace(LIBS = libs)

finley_lib = finley_env.SharedLibrary(libname, sources)

Depends(finley_lib, esysUtils_lib)
Depends(finley_lib, escript_lib)
Depends(finley_lib, paso_lib)
Depends(finley_lib, mmio_lib)

Default(finley_env.Install(libdir, finley_lib))
Default(finley_env.Install(libdir2, finley_lib))
if libinstall != None:
  Default(finley_env.Install(libinstall, finley_lib))
