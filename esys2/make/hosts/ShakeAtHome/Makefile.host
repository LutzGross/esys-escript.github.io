# $Id$

# C Compiler Settings
CC := gcc
CC_SYS_INC_DIRS := ${NULL}
CC_INC_DIR_FLAG := -I
CC_DEF_FLAG := -D
CC_DEP_FLAGS := -MM
CC_OBJ_FLAGS := -c 
CC_SHARE_FLAGS := -fpic
CC_CONFORM_FLAGS := -ansi -ansi_alias 
CC_DIAG_FLAGS := 
CC_ARCH_FLAGS := 
CC_OPT_FLAGS := -O3 
CC_OUTPUT_FLAG := -o

# CPP Compiler Settings
CPP := gcc
CPP_SYS_INC_DIRS := ${NULL}
CPP_INC_DIR_FLAG := -I
CPP_DEF_FLAG := -D
CPP_DEP_FLAGS := -MM
CPP_OBJ_FLAGS := -c -fpic
CPP_SHARE_FLAGS := -fpic
CPP_CONFORM_FLAGS := -ansi -ansi_alias 
CPP_DIAG_FLAGS := 
CPP_ARCH_FLAGS := 
ifeq ($(strip $(DODEBUG)),NO)
  DEBUG_FILE_EXIT := ${NULL}
  CPP_OPT_FLAGS := -O3
else
#
# if not specified assume debug is wanted
  CPP_OPT_FLAGS := -g -O0 
#
# libraries built with debug on have this extension appended to their name
# eg the debug version of libCppUnitTest.a would be libCppUnitTestg.a
  DEBUG_FILE_EXT := g
endif

CPP_OUTPUT_FLAG := -o

# Swig Compiler Settings
SWIG := /usr/bin/swig
SWIG_INC_DIR_FLAGS := ${patsubst %, -I%, ${L_EXT_INC_DIRS}}
SWIG_OPT_FLAGS := -stat -v -strict 2
SWIG_DOC_FLAG := -dnone
SWIG_LANG_FLAG := -c++ -python -shadow
SWIG_OUTPUT_FLAG := -o

# Python Compiler Settings
PYTHON := python2.3
PYTHON_CMD_FLAG := -c
PYTHON_OPT_FLAGS := -O
PYTHON_DIAG_FLAGS := -Wall
PYTHON_COMPILE_CMD = 'import py_compile, sys; py_compile.compile("$<", "${L_LIB_DIR}/$@", "$<")'

# Archiver Settings
AR := ar
AR_OPTION_FLAGS := crus

# Linker Settings
LD := gcc
LD_SYS_LIB_DIRS := /opt/intel/cmplrs/80.058/intel_cc_80/lib
LD_SYS_LIBS := 
LD_LIB_DIR_FLAG := -L
LD_LIB_FLAG := -l
LD_DIAG_FLAGS := ${NULL}
LD_SHARE_FLAG := -shared
LD_OUTPUT_FLAG := -o

# $Log$
# Revision 1.1  2004/10/26 06:53:58  jgs
# Initial revision
#
# Revision 1.2  2004/09/23 01:48:54  jgs
# make: augmented Makefiles with comments throughout
#
#         Makefile.default - changed order of includes for clarity
#         Makfile.phony    - reordered phony targets
#                          - added target "all" - now first target to be encountered
#
# Revision 1.1  2004/08/02 11:23:10  gross
# some progress toward slicing
#
#
