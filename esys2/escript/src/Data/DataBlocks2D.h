/* 
 ******************************************************************************
 *                                                                            *
 *       COPYRIGHT  ACcESS 2004 -  All Rights Reserved                        *
 *                                                                            *
 * This software is the property of ACcESS. No part of this code              *
 * may be copied in any form or by any means without the expressed written    *
 * consent of ACcESS.  Copying, use or modification of this software          *
 * by any unauthorised person is illegal unless that person has a software    *
 * license agreement with ACcESS.                                             *
 *                                                                            *
 ******************************************************************************
*/
                                                                           
#if !defined  escript_DataBlocks2D_20040405_H
#define escript_DataBlocks2D_20040405_H

#include <vector>

namespace escript {

/**
   \brief
   DataBlocks2D allocates and manages a 2D array of data blocks.

   Description:
   DataBlocks2D allocates and manages a 2D array of data blocks.

*/

class DataBlocks2D {

 public:

  typedef std::vector<double> ValueType;

  /**
     \brief
     Default constructor for DataBlocks2D

     Description:
     Default constructor for DataBlocks2D
  */
  DataBlocks2D();

  /**
     \brief
     Copy constructor for DataBlocks2D

     Description:
     Copy constructor for DataBlocks2D
  */
  DataBlocks2D(const DataBlocks2D& other);

  /**
     \brief
     Constructor for DataBlocks2D

     Description:
     Constructor for DataBlocks2D
     \param numRows - Input - Number of rows
     \param numCols - Input - Number of columns
     \param blockSize - Input - Number of elements per block
  */
  DataBlocks2D(int numRows, int numCols, int blockSize);

  /**
     \brief
     Default destructor for DataBlocks2D

     Description:
     Default destructor for DataBlocks2D
  */
  ~DataBlocks2D();

  /**
     \brief
     Resize the container. All current data is lost.

     Description:
     Resize the container. All current data is lost. The data elements are
     initialised to 0.

     \param numRows - Input - Number of rows
     \param numCols - Input - Number of columns
     \param blockSize - Input - Number of elements per block
  */
  void resize(int numRows, int numCols, int blockSize);

  /**
    \brief
    Return the 1 dimensional index of the first element for the block i,j.
    Allows each element to be referenced as though entire 3D array was laid
    out as a 1 dimensional list of elements.
  */
  ValueType::size_type index(ValueType::size_type i, ValueType::size_type j) const;

  /**
     \brief
     Return the data
     Data is returned as an array that can be indexed via indexes generated by DataBlocks2D::index
  */
  ValueType& getData();

  /**
     \brief
     Return the data
     Data is returned as an array that can be indexed via indexes generated by DataBlocks2D::index
  */
  const ValueType& getData() const;

  /**
     \brief
     Return the number of rows
  */
  ValueType::size_type getNumRows() const;

  /**
     \brief
     Return the number of columns
  */
  ValueType::size_type getNumCols() const;

  /**
     \brief
     Swap
  */
  void Swap(DataBlocks2D& other);

  /**
     \brief
     operator=
  */
  DataBlocks2D& operator=(const DataBlocks2D& other);

 protected:

 private:

  //
  // data container, currently only concerned with doubles
  ValueType m_data;

  //
  // the number of doubles per data block
  int m_blockSize;

  //
  // 
  int m_numRows;
  int m_numCols; 

};

inline DataBlocks2D::ValueType::size_type DataBlocks2D::getNumRows() const
{
  return m_numRows;
}

inline DataBlocks2D::ValueType::size_type DataBlocks2D::getNumCols() const
{
  return m_numCols;
}

} // end of namespace
#endif
