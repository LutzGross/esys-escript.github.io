# $Id: run_visualization_interface.py 798 2006-08-04 01:05:36Z gross $

__copyright__="""  Copyright (c) 2006 by ACcESS MNRF
                    http://www.access.edu.au
                Primary Business: Queensland, Australia"""
__license__="""Licensed under the Open Software License version 3.0
             http://www.opensource.org/licenses/osl-3.0.php"""
import sys
import unittest
import math
import numarray
from esys.pycad import *

try:
     PYCAD_TEST_DATA=os.environ['PYCAD_TEST_DATA']
except KeyError:
     PYCAD_TEST_DATA='.'

try:
     PYCAD_WORKDIR=os.environ['PYCAD_WORKDIR']
except KeyError:
     PYCAD_WORKDIR='.'

PYCAD_TEST_MESH_PATH=PYCAD_TEST_DATA+"/data_meshes/"
PYCAD_WORKDIR_PATH=PYCAD_WORKDIR+"/"

def _cross(x, y):
    return numarray.array([x[1] * y[2] - x[2] * y[1], x[2] * y[0] - x[0] * y[2], x[0] * y[1] - x[1] * y[0]])


class Test_PyCAD_Transformations(unittest.TestCase):
   ABS_TOL=1.e-8
   def __distance(self,x,y):
       return math.sqrt(numarray.dot(x-y,x-y))
   def test_Translation_x(self):
        t=Translation([1,0,0])
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(self.__distance(s0,numarray.array([2,0,0]))<self.ABS_TOL,"s0 is wrong.")
        s1=t([0,1,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(self.__distance(s1,numarray.array([1,1,0]))<self.ABS_TOL,"s1 is wrong.")
        s2=t([0,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(self.__distance(s2,numarray.array([1,0,1]))<self.ABS_TOL,"s2 is wrong.")
   def test_Translation_y(self):
        t=Translation([0,1,0])
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(self.__distance(s0,numarray.array([1,1,0]))<self.ABS_TOL,"s0 is wrong.")
        s1=t([0,1,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(self.__distance(s1,numarray.array([0,2,0]))<self.ABS_TOL,"s1 is wrong.")
        s2=t([0,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(self.__distance(s2,numarray.array([0,1,1]))<self.ABS_TOL,"s2 is wrong.")
   def test_Translation_z(self):
        t=Translation([0,0,1])
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(self.__distance(s0,numarray.array([1,0,1]))<self.ABS_TOL,"s0 is wrong.")
        s1=t([0,1,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(self.__distance(s1,numarray.array([0,1,1]))<self.ABS_TOL,"s1 is wrong.")
        s2=t([0,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(self.__distance(s2,numarray.array([0,0,2]))<self.ABS_TOL,"s2 is wrong.")
   def test_Dilation_0_two(self):
        t=Dilation(2.)
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(self.__distance(s0,numarray.array([2,0,0]))<self.ABS_TOL,"s0 is wrong.")
        s1=t([0,1,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(self.__distance(s1,numarray.array([0,2,0]))<self.ABS_TOL,"s1 is wrong.")
        s2=t([0,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(self.__distance(s2,numarray.array([0,0,2]))<self.ABS_TOL,"s2 is wrong.")
   def test_Dilation_0_half(self):
        t=Dilation(0.5)
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(self.__distance(s0,numarray.array([0.5,0,0]))<self.ABS_TOL,"s0 is wrong.")
        s1=t([0,1,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(self.__distance(s1,numarray.array([0,0.5,0]))<self.ABS_TOL,"s1 is wrong.")
        s2=t([0,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(self.__distance(s2,numarray.array([0,0,0.5]))<self.ABS_TOL,"s2 is wrong.")
   def test_Dilation_x_two(self):
        t=Dilation(2.,[1.,0.,0.])
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(self.__distance(s0,numarray.array([1,0,0]))<self.ABS_TOL,"s0 is wrong.")
        s0_1=t([0,0,0])
        self.failUnless(isinstance(s0_1,numarray.NumArray),"s0_1 is not a numarray object.")
        self.failUnless(self.__distance(s0_1,numarray.array([-1.,0,0]))<self.ABS_TOL,"s0_1 is wrong.")
        s1=t([0,1,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(self.__distance(s1,numarray.array([-1,2,0]))<self.ABS_TOL,"s1 is wrong.")
        s2=t([0,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(self.__distance(s2,numarray.array([-1.,0,2]))<self.ABS_TOL,"s2 is wrong.")
   def test_Dilation_x_half(self):
        t=Dilation(0.5,[1.,0.,0.])
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(self.__distance(s0,numarray.array([1.,0,0]))<self.ABS_TOL,"s0 is wrong.")
        s0_1=t([0,0,0])
        self.failUnless(isinstance(s0_1,numarray.NumArray),"s0_1 is not a numarray object.")
        self.failUnless(self.__distance(s0_1,numarray.array([.5,0,0]))<self.ABS_TOL,"s0_1 is wrong.")
        s1=t([0,1,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(self.__distance(s1,numarray.array([0.5,0.5,0]))<self.ABS_TOL,"s1 is wrong.")
        s2=t([0,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(self.__distance(s2,numarray.array([0.5,0,0.5]))<self.ABS_TOL,"s2 is wrong.")
   def test_Dilation_y_two(self):
        t=Dilation(2.,[0.,1.,0.])
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(self.__distance(s0,numarray.array([2.,-1.,0]))<self.ABS_TOL,"s0 is wrong.")
        s1_1=t([0,0,0])
        self.failUnless(isinstance(s1_1,numarray.NumArray),"s1_1 is not a numarray object.")
        self.failUnless(self.__distance(s1_1,numarray.array([0.,-1.,0]))<self.ABS_TOL,"s1_1 is wrong.")
        s1=t([0,1,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(self.__distance(s1,numarray.array([0.,1.,0]))<self.ABS_TOL,"s1 is wrong.")
        s2=t([0,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(self.__distance(s2,numarray.array([0.,-1.,2]))<self.ABS_TOL,"s2 is wrong.")
   def test_Dilation_y_half(self):
        t=Dilation(0.5,[0.,1.,0.])
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(self.__distance(s0,numarray.array([0.5,0.5,0]))<self.ABS_TOL,"s0 is wrong.")
        s1_1=t([0,0,0])
        self.failUnless(isinstance(s1_1,numarray.NumArray),"s1_1 is not a numarray object.")
        self.failUnless(self.__distance(s1_1,numarray.array([0,0.5,0]))<self.ABS_TOL,"s1_1 is wrong.")
        s1=t([0,1,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(self.__distance(s1,numarray.array([0.,1.,0]))<self.ABS_TOL,"s1 is wrong.")
        s2=t([0,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(self.__distance(s2,numarray.array([0.,0.5,0.5]))<self.ABS_TOL,"s2 is wrong.")
   def test_Dilation_z_two(self):
        t=Dilation(2.,[0.,0.,1.])
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(self.__distance(s0,numarray.array([2.,0.,-1.]))<self.ABS_TOL,"s0 is wrong.")
        s2_1=t([0,0,0])
        self.failUnless(isinstance(s2_1,numarray.NumArray),"s2_1 is not a numarray object.")
        self.failUnless(self.__distance(s2_1,numarray.array([0.,0.,-1.]))<self.ABS_TOL,"s2_1 is wrong.")
        s1=t([0,1,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(self.__distance(s1,numarray.array([0.,2.,-1.]))<self.ABS_TOL,"s1 is wrong.")
        s2=t([0,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(self.__distance(s2,numarray.array([0.,0.,1.]))<self.ABS_TOL,"s2 is wrong.")
   def test_Dilation_z_half(self):
        t=Dilation(0.5,[0.,0.,1.])
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(self.__distance(s0,numarray.array([0.5,0.,0.5]))<self.ABS_TOL,"s0 is wrong.")
        s2_1=t([0,0,0])
        self.failUnless(isinstance(s2_1,numarray.NumArray),"s2_1 is not a numarray object.")
        self.failUnless(self.__distance(s2_1,numarray.array([0,0,0.5]))<self.ABS_TOL,"s2_1 is wrong.")
        s1=t([0,1,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(self.__distance(s1,numarray.array([0.,0.5,0.5]))<self.ABS_TOL,"s1 is wrong.")
        s2=t([0,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(self.__distance(s2,numarray.array([0.,0.,1.]))<self.ABS_TOL,"s2 is wrong.")
   def test_Reflection_x_offset0(self):
        t=Reflection([1.,0.,0.])
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(self.__distance(s0,numarray.array([-1.,0,0.]))<self.ABS_TOL,"s0 is wrong.")
        s1=t([0,1,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(self.__distance(s1,numarray.array([0,1,0]))<self.ABS_TOL,"s1 is wrong.")
        s2=t([0,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(self.__distance(s2,numarray.array([0,0,1]))<self.ABS_TOL,"s2 is wrong.")
        s=t([1,2,3])
        self.failUnless(isinstance(s,numarray.NumArray),"s is not a numarray object.")
        self.failUnless(self.__distance(s,numarray.array([-1.,2,3]))<self.ABS_TOL,"s is wrong.")
   def test_Reflection_x_offset2(self):
        t=Reflection([-2.,0.,0.],offset=-4)
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(self.__distance(s0,numarray.array([3.,0,0.]))<self.ABS_TOL,"s0 is wrong.")
        s1=t([0,1,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(self.__distance(s1,numarray.array([4,1,0]))<self.ABS_TOL,"s1 is wrong.")
        s2=t([0,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(self.__distance(s2,numarray.array([4,0,1]))<self.ABS_TOL,"s2 is wrong.")
        s=t([1,2,3])
        self.failUnless(isinstance(s,numarray.NumArray),"s is not a numarray object.")
        self.failUnless(self.__distance(s,numarray.array([3.,2,3]))<self.ABS_TOL,"s is wrong.")
   def test_Reflection_x_offset2_vector(self):
        t=Reflection([1.,0.,0.],offset=[2,0,0])
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(self.__distance(s0,numarray.array([3.,0,0.]))<self.ABS_TOL,"s0 is wrong.")
        s1=t([0,1,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(self.__distance(s1,numarray.array([4,1,0]))<self.ABS_TOL,"s1 is wrong.")
        s2=t([0,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(self.__distance(s2,numarray.array([4,0,1]))<self.ABS_TOL,"s2 is wrong.")
        s=t([1,2,3])
        self.failUnless(isinstance(s,numarray.NumArray),"s is not a numarray object.")
        self.failUnless(self.__distance(s,numarray.array([3.,2,3]))<self.ABS_TOL,"s is wrong.")
   def test_Reflection_y_offset0(self):
        t=Reflection([0.,1.,0.])
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(self.__distance(s0,numarray.array([1.,0,0.]))<self.ABS_TOL,"s0 is wrong.")
        s1=t([0,1,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(self.__distance(s1,numarray.array([0,-1,0]))<self.ABS_TOL,"s1 is wrong.")
        s2=t([0,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(self.__distance(s2,numarray.array([0,0,1]))<self.ABS_TOL,"s2 is wrong.")
        s=t([1,2,3])
        self.failUnless(isinstance(s,numarray.NumArray),"s is not a numarray object.")
        self.failUnless(self.__distance(s,numarray.array([1.,-2,3]))<self.ABS_TOL,"s is wrong.")
   def test_Reflection_y_offset2(self):
        t=Reflection([0.,-2.,0.],offset=-4)
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(self.__distance(s0,numarray.array([1.,4,0.]))<self.ABS_TOL,"s0 is wrong.")
        s1=t([0,1,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(self.__distance(s1,numarray.array([0,3,0]))<self.ABS_TOL,"s1 is wrong.")
        s2=t([0,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(self.__distance(s2,numarray.array([0,4,1]))<self.ABS_TOL,"s2 is wrong.")
        s=t([1,2,3])
        self.failUnless(isinstance(s,numarray.NumArray),"s is not a numarray object.")
        self.failUnless(self.__distance(s,numarray.array([1.,2,3]))<self.ABS_TOL,"s is wrong.")
   def test_Reflection_y_offset2_vector(self):
        t=Reflection([0.,1.,0.],offset=[0,2,0])
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(self.__distance(s0,numarray.array([1.,4,0.]))<self.ABS_TOL,"s0 is wrong.")
        s1=t([0,1,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(self.__distance(s1,numarray.array([0,3,0]))<self.ABS_TOL,"s1 is wrong.")
        s2=t([0,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(self.__distance(s2,numarray.array([0,4,1]))<self.ABS_TOL,"s2 is wrong.")
        s=t([1,2,3])
        self.failUnless(isinstance(s,numarray.NumArray),"s is not a numarray object.")
        self.failUnless(self.__distance(s,numarray.array([1.,2,3]))<self.ABS_TOL,"s is wrong.")
   def test_Reflection_z_offset0(self):
        t=Reflection([0.,0.,1.])
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(self.__distance(s0,numarray.array([1.,0,0.]))<self.ABS_TOL,"s0 is wrong.")
        s1=t([0,1,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(self.__distance(s1,numarray.array([0,1,0]))<self.ABS_TOL,"s1 is wrong.")
        s2=t([0,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(self.__distance(s2,numarray.array([0,0,-1]))<self.ABS_TOL,"s2 is wrong.")
        s=t([1,2,3])
        self.failUnless(isinstance(s,numarray.NumArray),"s is not a numarray object.")
        self.failUnless(self.__distance(s,numarray.array([1.,2,-3]))<self.ABS_TOL,"s is wrong.")
   def test_Reflection_z_offset2(self):
        t=Reflection([0.,0.,-2.],offset=-4)
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(self.__distance(s0,numarray.array([1.,0,4.]))<self.ABS_TOL,"s0 is wrong.")
        s1=t([0,1,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(self.__distance(s1,numarray.array([0,1,4]))<self.ABS_TOL,"s1 is wrong.")
        s2=t([0,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(self.__distance(s2,numarray.array([0,0,3]))<self.ABS_TOL,"s2 is wrong.")
        s=t([1,2,3])
        self.failUnless(isinstance(s,numarray.NumArray),"s is not a numarray object.")
        self.failUnless(self.__distance(s,numarray.array([1.,2,1]))<self.ABS_TOL,"s is wrong.")
   def test_Reflection_z_offset2_vector(self):
        t=Reflection([0.,0.,1.],offset=[0,0,2])
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(self.__distance(s0,numarray.array([1.,0,4.]))<self.ABS_TOL,"s0 is wrong.")
        s1=t([0,1,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(self.__distance(s1,numarray.array([0,1,4]))<self.ABS_TOL,"s1 is wrong.")
        s2=t([0,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(self.__distance(s2,numarray.array([0,0,3]))<self.ABS_TOL,"s2 is wrong.")
        s=t([1,2,3])
        self.failUnless(isinstance(s,numarray.NumArray),"s is not a numarray object.")
        self.failUnless(self.__distance(s,numarray.array([1.,2,1]))<self.ABS_TOL,"s is wrong.")
   def test_Rotatation_x_90_0(self):
        t=Rotatation(point1=[1.,0.,0.],angle=90*DEG)
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(self.__distance(s0,numarray.array([1.,0,0.]))<self.ABS_TOL,"s0 is wrong.")
        s1=t([0,1,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(self.__distance(s1,numarray.array([0.,0,1.]))<self.ABS_TOL,"s1 is wrong.")
        s2=t([0,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(self.__distance(s2,numarray.array([0.,-1.,0.]))<self.ABS_TOL,"s2 is wrong.")
   def test_Rotatation_x_30_0(self):
        t=Rotatation(point1=[1.,0.,0.],angle=30*DEG)
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(self.__distance(s0,numarray.array([1.,0,0.]))<self.ABS_TOL,"s0 is wrong.")
        s1=t([0,1,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(abs(numarray.dot(s1,s1)-1.)<self.ABS_TOL,"s1 length is wrong.")
        self.failUnless(abs(s1[1]-math.cos(30*DEG))<self.ABS_TOL,"s1 angle is wrong.")
        self.failUnless(numarray.dot(_cross(s1,[0,1,0]),numarray.array([1.,0.,0.]))<0.,"s1 has wrong orientation.")
        s2=t([0,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(abs(numarray.dot(s2,s2)-1.)<self.ABS_TOL,"s2 length is wrong.")
        self.failUnless(abs(s2[2]-math.cos(30*DEG))<self.ABS_TOL,"s2 angle is wrong.")
        self.failUnless(numarray.dot(_cross(s2,[0,0,1]),numarray.array([1.,0.,0.]))<0.,"s2 has wrong orientation.")
   def test_Rotatation_x_330_0(self):
        t=Rotatation(point1=[1.,0.,0.],angle=330*DEG)
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(self.__distance(s0,numarray.array([1.,0,0.]))<self.ABS_TOL,"s0 is wrong.")
        s1=t([0,1,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(abs(numarray.dot(s1,s1)-1.)<self.ABS_TOL,"s1 length is wrong.")
        self.failUnless(abs(s1[1]-math.cos(330*DEG))<self.ABS_TOL,"s1 angle is wrong.")
        self.failUnless(numarray.dot(_cross(s1,[0,1,0]),numarray.array([1.,0.,0.]))>0.,"s1 has wrong orientation.")
        s2=t([0,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(abs(numarray.dot(s2,s2)-1.)<self.ABS_TOL,"s2 length is wrong.")
        self.failUnless(abs(s2[2]-math.cos(330*DEG))<self.ABS_TOL,"s2 angle is wrong.")
        self.failUnless(numarray.dot(_cross(s2,[0,0,1]),numarray.array([1.,0.,0.]))>0.,"s2 has wrong orientation.")
   def test_Rotatation_x_90(self):
        t=Rotatation(point1=[1.,0.,0.],point0=[2.,0.,0.],angle=90*DEG)
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(self.__distance(s0,numarray.array([1.,0,0.]))<self.ABS_TOL,"s0 is wrong.")
        s1=t([0,1,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(self.__distance(s1,numarray.array([0.,0,-1.]))<self.ABS_TOL,"s1 is wrong.")
        s2=t([0,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(self.__distance(s2,numarray.array([0.,1.,0.]))<self.ABS_TOL,"s2 is wrong.")
   def test_Rotatation_x_30(self):
        t=Rotatation(point1=[1.,0.,0.],point0=[2.,0.,0.],angle=30*DEG)
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(self.__distance(s0,numarray.array([1.,0,0.]))<self.ABS_TOL,"s0 is wrong.")
        s1=t([0,1,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(abs(numarray.dot(s1,s1)-1.)<self.ABS_TOL,"s1 length is wrong.")
        self.failUnless(abs(s1[1]-math.cos(30*DEG))<self.ABS_TOL,"s1 angle is wrong.")
        self.failUnless(numarray.dot(_cross(s1,[0,1,0]),numarray.array([-1.,0.,0.]))<0.,"s1 has wrong orientation.")
        s2=t([0,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(abs(numarray.dot(s2,s2)-1.)<self.ABS_TOL,"s2 length is wrong.")
        self.failUnless(abs(s2[2]-math.cos(30*DEG))<self.ABS_TOL,"s2 angle is wrong.")
        self.failUnless(numarray.dot(_cross(s2,[0,0,1]),numarray.array([-1.,0.,0.]))<0.,"s2 has wrong orientation.")
   def test_Rotatation_x_330(self):
        t=Rotatation(point1=[1.,0.,0.],point0=[2.,0.,0.],angle=330*DEG)
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(self.__distance(s0,numarray.array([1.,0,0.]))<self.ABS_TOL,"s0 is wrong.")
        s1=t([0,1,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(abs(numarray.dot(s1,s1)-1.)<self.ABS_TOL,"s1 length is wrong.")
        self.failUnless(abs(s1[1]-math.cos(330*DEG))<self.ABS_TOL,"s1 angle is wrong.")
        self.failUnless(numarray.dot(_cross(s1,[0,1,0]),numarray.array([-1.,0.,0.]))>0.,"s1 has wrong orientation.")
        s2=t([0,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(abs(numarray.dot(s2,s2)-1.)<self.ABS_TOL,"s2 length is wrong.")
        self.failUnless(abs(s2[2]-math.cos(330*DEG))<self.ABS_TOL,"s2 angle is wrong.")
        self.failUnless(numarray.dot(_cross(s2,[0,0,1]),numarray.array([-1.,0.,0.]))>0.,"s2 has wrong orientation.")
   def test_Rotatation_y_90_0(self):
        t=Rotatation(point1=[0.,1.,0.],angle=90*DEG)
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(self.__distance(s0,numarray.array([0.,0,-1.]))<self.ABS_TOL,"s0 is wrong.")
        s1=t([0,5,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(self.__distance(s1,numarray.array([0.,5,0.]))<self.ABS_TOL,"s1 is wrong.")
        s2=t([0,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(self.__distance(s2,numarray.array([1,0.,0.]))<self.ABS_TOL,"s2 is wrong.")
   def test_Rotatation_y_30_0(self):
        t=Rotatation(point1=[0.,1.,0.],angle=30*DEG)
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(abs(numarray.dot(s0,s0)-1.)<self.ABS_TOL,"s0 length is wrong.")
        self.failUnless(abs(s0[0]-math.cos(30*DEG))<self.ABS_TOL,"s0 angle is wrong.")
        self.failUnless(numarray.dot(_cross(s0,[1,0,0]),numarray.array([0.,1.,0.]))<0.,"s0 has wrong orientation.")
        s1=t([0,5,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(self.__distance(s1,numarray.array([0.,5,0.]))<self.ABS_TOL,"s1 is wrong.")
        s2=t([0,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(abs(numarray.dot(s2,s2)-1.)<self.ABS_TOL,"s2 length is wrong.")
        self.failUnless(abs(s2[2]-math.cos(30*DEG))<self.ABS_TOL,"s2 angle is wrong.")
        self.failUnless(numarray.dot(_cross(s2,[0,0,1]),numarray.array([0.,1.,0.]))<0.,"s2 has wrong orientation.")
   def test_Rotatation_y_330_0(self):
        t=Rotatation(point1=[0.,1.,0.],angle=330*DEG)
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(abs(numarray.dot(s0,s0)-1.)<self.ABS_TOL,"s0 length is wrong.")
        self.failUnless(abs(s0[0]-math.cos(330*DEG))<self.ABS_TOL,"s0 angle is wrong.")
        self.failUnless(numarray.dot(_cross(s0,[1,0,0]),numarray.array([0.,1.,0.]))>0.,"s0 has wrong orientation.")
        s1=t([0,1,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(self.__distance(s1,numarray.array([0.,1,0.]))<self.ABS_TOL,"s1 is wrong.")
        s2=t([0,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(abs(numarray.dot(s2,s2)-1.)<self.ABS_TOL,"s2 length is wrong.")
        self.failUnless(abs(s2[2]-math.cos(330*DEG))<self.ABS_TOL,"s2 angle is wrong.")
        self.failUnless(numarray.dot(_cross(s2,[0,0,1]),numarray.array([0.,1.,0.]))>0.,"s2 has wrong orientation.")
   def test_Rotatation_y_90(self):
        t=Rotatation(point1=[0.,1.,0.],point0=[0.,2.,0.],angle=90*DEG)
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(self.__distance(s0,numarray.array([0.,0,1.]))<self.ABS_TOL,"s0 is wrong.")
        s1=t([0,5,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(self.__distance(s1,numarray.array([0.,5,0.]))<self.ABS_TOL,"s1 is wrong.")
        s2=t([0,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(self.__distance(s2,numarray.array([-1,0.,0.]))<self.ABS_TOL,"s2 is wrong.")
   def test_Rotatation_y_30(self):
        t=Rotatation(point1=[0.,1.,0.],point0=[0.,2.,0.],angle=30*DEG)
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(abs(numarray.dot(s0,s0)-1.)<self.ABS_TOL,"s0 length is wrong.")
        self.failUnless(abs(s0[0]-math.cos(30*DEG))<self.ABS_TOL,"s0 angle is wrong.")
        self.failUnless(numarray.dot(_cross(s0,[1,0,0]),numarray.array([0.,-1.,0.]))<0.,"s0 has wrong orientation.")
        s1=t([0,1,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(self.__distance(s1,numarray.array([0.,1,0.]))<self.ABS_TOL,"s1 is wrong.")
        s2=t([0,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(abs(numarray.dot(s2,s2)-1.)<self.ABS_TOL,"s2 length is wrong.")
        self.failUnless(abs(s2[2]-math.cos(30*DEG))<self.ABS_TOL,"s2 angle is wrong.")
        self.failUnless(numarray.dot(_cross(s2,[0,0,1]),numarray.array([0.,-1.,0.]))<0.,"s2 has wrong orientation.")
   def test_Rotatation_y_330(self):
        t=Rotatation(point1=[0.,1.,0.],point0=[0.,2.,0.],angle=330*DEG)
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(abs(numarray.dot(s0,s0)-1.)<self.ABS_TOL,"s0 length is wrong.")
        self.failUnless(abs(s0[0]-math.cos(330*DEG))<self.ABS_TOL,"s0 angle is wrong.")
        self.failUnless(numarray.dot(_cross(s0,[1,0,0]),numarray.array([0.,-1.,0.]))>0.,"s0 has wrong orientation.")
        s1=t([0,1,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(self.__distance(s1,numarray.array([0.,1,0.]))<self.ABS_TOL,"s1 is wrong.")
        s2=t([0,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(abs(numarray.dot(s2,s2)-1.)<self.ABS_TOL,"s2 length is wrong.")
        self.failUnless(abs(s2[2]-math.cos(330*DEG))<self.ABS_TOL,"s2 angle is wrong.")
        self.failUnless(numarray.dot(_cross(s2,[0,0,1]),numarray.array([0.,-1.,0.]))>0.,"s2 has wrong orientation.")
   def test_Rotatation_z_90_0(self):
        t=Rotatation(point1=[0.,0.,1.],angle=90*DEG)
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(self.__distance(s0,numarray.array([0.,1,0.]))<self.ABS_TOL,"s0 is wrong.")
        s1=t([0,5,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(self.__distance(s1,numarray.array([-5.,0,0.]))<self.ABS_TOL,"s1 is wrong.")
        s2=t([0,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(self.__distance(s2,numarray.array([0.,0,1.]))<self.ABS_TOL,"s2 is wrong.")
   def test_Rotatation_z_30_0(self):
        t=Rotatation(point1=[0.,0.,1.],angle=30*DEG)
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(abs(numarray.dot(s0,s0)-1.)<self.ABS_TOL,"s0 length is wrong.")
        self.failUnless(abs(s0[0]-math.cos(30*DEG))<self.ABS_TOL,"s0 angle is wrong.")
        self.failUnless(numarray.dot(_cross(s0,[1,0,0]),numarray.array([0.,0.,1.]))<0.,"s0 has wrong orientation.")
        s1=t([0,5,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(abs(numarray.dot(s1,s1)-5.**2)<self.ABS_TOL,"s1 length is wrong.")
        self.failUnless(abs(s1[1]/5.-math.cos(30*DEG))<self.ABS_TOL,"s1 angle is wrong.")
        self.failUnless(numarray.dot(_cross(s1,[0,5,0]),numarray.array([0.,0.,1.]))<0.,"s1 has wrong orientation.")
        s2=t([0,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(self.__distance(s2,numarray.array([0.,0,1.]))<self.ABS_TOL,"s2 is wrong.")
   def test_Rotatation_z_330_0(self):
        t=Rotatation(point1=[0.,0.,1.],angle=330*DEG)
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(abs(numarray.dot(s0,s0)-1.)<self.ABS_TOL,"s0 length is wrong.")
        self.failUnless(abs(s0[0]-math.cos(330*DEG))<self.ABS_TOL,"s0 angle is wrong.")
        self.failUnless(numarray.dot(_cross(s0,[1,0,0]),numarray.array([0.,0.,1.]))>0.,"s0 has wrong orientation.")
        s1=t([0,5,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(abs(numarray.dot(s1,s1)-5.**2)<self.ABS_TOL,"s1 length is wrong.")
        self.failUnless(abs(s1[1]/5.-math.cos(330*DEG))<self.ABS_TOL,"s1 angle is wrong.")
        self.failUnless(numarray.dot(_cross(s1,[0,1,0]),numarray.array([0.,0.,1.]))>0.,"s1 has wrong orientation.")
   def test_Rotatation_z_90(self):
        t=Rotatation(point1=[0.,0.,1.],point0=[0.,0.,2.],angle=90*DEG)
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(self.__distance(s0,numarray.array([0.,-1,0.]))<self.ABS_TOL,"s0 is wrong.")
        s1=t([0,5,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(self.__distance(s1,numarray.array([5.,0,0.]))<self.ABS_TOL,"s1 is wrong.")
        s2=t([0,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(self.__distance(s2,numarray.array([0.,0,1.]))<self.ABS_TOL,"s2 is wrong.")
   def test_Rotatation_z_30(self):
        t=Rotatation(point1=[0.,0.,1.],point0=[0.,0.,2.],angle=30*DEG)
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(abs(numarray.dot(s0,s0)-1.)<self.ABS_TOL,"s0 length is wrong.")
        self.failUnless(abs(s0[0]-math.cos(30*DEG))<self.ABS_TOL,"s0 angle is wrong.")
        self.failUnless(numarray.dot(_cross(s0,[1,0,0]),numarray.array([0.,0.,-1.]))<0.,"s0 has wrong orientation.")
        s1=t([0,1,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(abs(numarray.dot(s1,s1)-1.)<self.ABS_TOL,"s1 length is wrong.")
        self.failUnless(abs(s1[1]-math.cos(30*DEG))<self.ABS_TOL,"s1 angle is wrong.")
        self.failUnless(numarray.dot(_cross(s1,[0,1,0]),numarray.array([0.,0.,-1.]))<0.,"s1 has wrong orientation.")
        s2=t([0,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(self.__distance(s2,numarray.array([0.,0,1.]))<self.ABS_TOL,"s2 is wrong.")
   def test_Rotatation_z_330(self):
        t=Rotatation(point1=[0.,0.,1.],point0=[0.,0.,2.],angle=330*DEG)
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(abs(numarray.dot(s0,s0)-1.)<self.ABS_TOL,"s0 length is wrong.")
        self.failUnless(abs(s0[0]-math.cos(330*DEG))<self.ABS_TOL,"s0 angle is wrong.")
        self.failUnless(numarray.dot(_cross(s0,[1,0,0]),numarray.array([0.,0.,-1.]))>0.,"s0 has wrong orientation.")
        s1=t([0,1,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(abs(numarray.dot(s1,s1)-1.)<self.ABS_TOL,"s1 length is wrong.")
        self.failUnless(abs(s1[1]-math.cos(30*DEG))<self.ABS_TOL,"s1 angle is wrong.")
        self.failUnless(numarray.dot(_cross(s1,[0,1,0]),numarray.array([0.,0.,-1.]))>0.,"s1 has wrong orientation.")
        s2=t([0,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(self.__distance(s2,numarray.array([0.,0,1.]))<self.ABS_TOL,"s2 is wrong.")
   def test_Rotatation_x_90_1(self):
        t=Rotatation(point0=[0.,0.,1.],point1=[1.,0.,1.],angle=90*DEG)
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(self.__distance(s0,numarray.array([1.,1,1.]))<self.ABS_TOL,"s0 is wrong.")
        s1=t([0,1,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(self.__distance(s1,numarray.array([0.,1,2.]))<self.ABS_TOL,"s1 is wrong.")
        s2=t([0,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(self.__distance(s2,numarray.array([0.,0,1.]))<self.ABS_TOL,"s2 is wrong.")
   def test_Rotatation_y_90_1(self):
        t=Rotatation(point0=[1.,0.,0.],point1=[1.,1.,0.],angle=90*DEG)
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(self.__distance(s0,numarray.array([1.,0,0.]))<self.ABS_TOL,"s0 is wrong.")
        s1=t([0,1,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(self.__distance(s1,numarray.array([1.,1,1.]))<self.ABS_TOL,"s1 is wrong.")
        s2=t([0,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(self.__distance(s2,numarray.array([2.,0,1.]))<self.ABS_TOL,"s2 is wrong.")
   def test_Rotatation_z_90_1(self):
        t=Rotatation(point0=[0.,1.,0.],point1=[0.,1.,1.],angle=90*DEG)
        s0=t([1,0,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(self.__distance(s0,numarray.array([1.,2,0.]))<self.ABS_TOL,"s0 is wrong.")
        s1=t([0,1,0])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(self.__distance(s1,numarray.array([0.,1,0.]))<self.ABS_TOL,"s1 is wrong.")
        s2=t([0,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(self.__distance(s2,numarray.array([1.,1,1.]))<self.ABS_TOL,"s2 is wrong.")
   def test_Rotatation_diag_90_0(self):
        t=Rotatation(point1=[1.,1.,1.],angle=90*DEG)
        s0=t([1,-1,0])
        self.failUnless(isinstance(s0,numarray.NumArray),"s0 is not a numarray object.")
        self.failUnless(abs(numarray.dot(s0,s0)-2.)<self.ABS_TOL,"s0 length is wrong.")
        self.failUnless(abs(numarray.dot(s0,numarray.array([1,-1,0])))<self.ABS_TOL,"s0 angle is wrong.")
        self.failUnless(numarray.dot(_cross(s0,[1,-1,0]),numarray.array([1.,1.,1.]))<0.,"s0 has wrong orientation.")
        s1=t([0,1,-1])
        self.failUnless(isinstance(s1,numarray.NumArray),"s1 is not a numarray object.")
        self.failUnless(abs(numarray.dot(s1,s1)-2.)<self.ABS_TOL,"s1 length is wrong.")
        self.failUnless(abs(numarray.dot(s1,numarray.array([0,1,-1])))<self.ABS_TOL,"s1 angle is wrong.")
        self.failUnless(numarray.dot(_cross(s1,[0,1,-1]),numarray.array([1.,1.,1.]))<0.,"s1 has wrong orientation.")
        s2=t([-1,0,1])
        self.failUnless(isinstance(s2,numarray.NumArray),"s2 is not a numarray object.")
        self.failUnless(abs(numarray.dot(s2,s2)-2.)<self.ABS_TOL,"s2 length is wrong.")
        self.failUnless(abs(numarray.dot(s2,numarray.array([-1,0,1])))<self.ABS_TOL,"s2 angle is wrong.")
        self.failUnless(numarray.dot(_cross(s2,[-1,0,1]),numarray.array([1.,1.,1.]))<0.,"s2 has wrong orientation.")
        s3=t([1,1,1])
        self.failUnless(isinstance(s3,numarray.NumArray),"s3 is not a numarray object.")
        self.failUnless(self.__distance(s3,numarray.array([1.,1,1.]))<self.ABS_TOL,"s3 is wrong.")

class Test_PyCAD_Primitives(unittest.TestCase):
   def setUp(self):
         global global_primitive_id_counter
         self.id0=global_primitive_id_counter

   def test_baseclass(self):
         p=Primitive()

         id=p.getID()
         print id
         self.failUnless(isinstance(id,int),"id number is not an integer")
         self.failUnless(id==self.id0,"id number is expected to be %s."%self.id0)
           
         self.failUnless(not p.isPoint(),"generic primitive is not a point.")
         self.failUnless(not p.isCurve(),"generic primitive is not a curve.")
         self.failUnless(not p.isCurveLoop(),"generic primitive is not a curve loop.")
         self.failUnless(not p.isSurface(),"generic primitive is not a surface.")
         self.failUnless(not p.isSurfaceLoop(),"generic primitive is not a surface loop.")

         hs=p.getHistory()
         self.failUnless(isinstance(hs,set),"history must be a set")
         self.failUnless(len(hs)==0,"history should be empty.")

         ps=p.getPoints()
         self.failUnless(isinstance(ps,set),"point set must be a set")
         self.failUnless(len(ps)==0,"point set should be empty.")

         p.setLocalScale(1.23)

   def test_point(self):
       p=Point(1.,2.,3.,local_scale=9.)
       
       id=p.getID()
       self.failUnless(isinstance(id,int),"id number is not an integer")
       self.failUnless(id==self.id0,"id number is expected to be %s"%self.id0)
           
       hs=p.getHistory()
       self.failUnless(isinstance(hs,set),"history must be a set")
       self.failUnless(len(hs)==1,"history must have length 1.")
       self.failUnless(p in hs,"history must contain point p")

       ps=p.getPoints()
       self.failUnless(isinstance(ps,set),"point set must be a set")
       self.failUnless(len(ps)==1,"point set must have length 1.")
       self.failUnless(p in ps,"point set must contain point p")

       c=p.getCoordinates()
       self.failUnless(isinstance(c,numarray.NumArray),"coordinates are not a numarray object.")
       self.failUnless(c[0]==1.,"x coordinate is not 1.")
       self.failUnless(c[1]==2.,"y coordinate is not 2.")
       self.failUnless(c[2]==3.,"z coordinate is not 3.")
 
       p.setCoordinates(-1.,-2.,-3.)
       c=p.getCoordinates()
       self.failUnless(isinstance(c,numarray.NumArray),"new coordinates are not a numarray object.")
       self.failUnless(c[0]==-1.,"new x coordinate is not -1.")
       self.failUnless(c[1]==-2.,"new y coordinate is not -2.")
       self.failUnless(c[2]==-3.,"new z coordinate is not -3.")

       self.failUnless(p.isColocated(Point(-1.,-2.,-3.)),"colocation not detected.")
       self.failUnless(p.isColocated(numarray.array([-1.,-2.,-3.])),"colocation with numarray representation not detected.")
       self.failUnless(not p.isColocated(numarray.array([1.,-2.,-3.])),"false colocation detected.")
       self.failUnless(not p.isColocated(numarray.array([0.,0.,0.])),"false colocation with origin detected.")

       l=p.getLocalScale()
       self.failUnless(l==9.,"refinement scale is not 9.")

       p.setLocalScale(3.)
       l=p.getLocalScale()
       self.failUnless(l==3.,"new refinement scale is not 3.")
       self.UnlessRaises(ValueError,p.setLocalScale,-3.)

if __name__ == '__main__':
   suite = unittest.TestSuite()
   suite.addTest(unittest.makeSuite(Test_PyCAD_Transformations))
   suite.addTest(unittest.makeSuite(Test_PyCAD_Primitives))
   s=unittest.TextTestRunner(verbosity=2).run(suite)
   if s.wasSuccessful():
     sys.exit(0)
   else:
     sys.exit(1)
