# $Id:$

"""
mesh generation using gmsh

@var __author__: name of author
@var __copyright__: copyrights
@var __license__: licence agreement
@var __url__: url entry point on documentation
@var __version__: version
@var __date__: date of the version
"""


__author__="Lutz Gross, l.gross@uq.edu.au"
__copyright__="""  Copyright (c) 2007 by ACcESS MNRF
                    http://www.access.edu.au
                Primary Business: Queensland, Australia"""
__license__="""Licensed under the Open Software License version 3.0
             http://www.opensource.org/licenses/osl-3.0.php"""
__url__="http://www.iservo.edu.au/esys/escript"
__version__="$Revision:$"
__date__="$Date:$"

import design
import tempfile
import os

class Design(design.Design):
    """
    design fo gmsh
    """
    DELAUNAY="iso"
    NETGEN="netgen"
    TETGEN="tetgen"
    def __init__(self,dim=3,element_size=1.,order=1,keep_files=False):
       """
       initializes the gmsh design

       @param dim: patial dimension
       @param element_size: global element size
       @param order: element order
       @param keep_files: flag to keep work files.
       """ 
       design.Design.__init__(self,dim=dim,element_size=element_size,order=order,keep_files=keep_files)
       self.setScriptFileName()
       self.setMeshFileName()
       self.setOptions()
    def setScriptFileName(self,name=None):
       """
       set the filename for the gmsh input script. if no name is given a name with extension geo is generated.
       """
       if name == None:
           self.__scriptname=tempfile.mkstemp(suffix=".geo")[1]
       else:
           self.__scriptname=name
           self.setKeepFilesOn()
    def getScriptFileName(self):
       """
       returns the name of the file for the gmsh script
       """
       return self.__scriptname
    def setMeshFileName(self, name=None):
       """
       sets the name for the gmsh mesh file. if no name is given a name with extension msh is generated.
       """
       if name == None:
           self.__mshname=tempfile.mkstemp(suffix=".msh")[1]
       else:
           self.__mshname=name
           self.setKeepFilesOn()
    def getMeshFileName(self):
       """
       returns the name of the file for the gmsh msh
       """
       return self.__mshname
    def setOptions(self,algorithm=None,optimize_quality=True,smoothing=1, curvature_based_element_size=False):
        """
        sets options for the mesh generator
        """ 
        if algorithm==None: algorithm=self.DELAUNAY
        self.__curvature_based_element_size=curvature_based_element_size
        self.__algo=algorithm
        self.__optimize_quality=optimize_quality
        self.__smoothing=smoothing
    def __del__(self):
        """
        clean up
        """
        if not self.keepFiles():
               os.unlink(self.getScriptFileName())
               os.unlink(self.getMeshFileName())
    def getScriptString(self):
        """
        returns the gmsh script to generate the mesh
        """
        prim=self.getAllPrimitives()
        out="// generated by esys.pycad\n"
        for p in prim:
           out+=p.getGmshCommand(self.getElementSize())+"\n"
        return out
    def getCommandString(self):
        """
        returns the gmsh comand
        """
        if self.__optimize_quality:
              opt="-optimize "
        else:
              opt=""
        if self.__curvature_based_element_size:
              clcurv="-clcurv "
        else: 
              clcurv=""
 
        exe="gmsh -%s -algo %s %s-smooth %s %s-v 0 -order %s -o %s %s"%(self.getDim(),
                                                                       self.__algo,
                                                                       clcurv,
                                                                       self.__smoothing,
                                                                       opt,
                                                                       self.getElementOrder(),
                                                                       self.getMeshFileName(),
                                                                       self.getScriptFileName())
        return exe
    def getMeshHandler(self):
        """
        returns a handle to a mesh meshing the design. In the current implementation 
        a mesh file name in gmsh format is returned.
        """
        open(self.getScriptFileName(),"w").write(self.getScriptString())
        os.system(self.getCommandString())
        return self.getMeshFileName()
