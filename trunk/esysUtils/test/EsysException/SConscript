# Scons configuration file for esysUtils unit tests

import os
import sys

# ensure correct versions of python and scons

EnsurePythonVersion(2,3)
EnsureSConsVersion(0,96)

#
# set appropriate defaults for configuration variables

esysroot = Dir('#../../..')
usegcc = 0
options = None
sys_libs = []

#
# import configuration variables passed in from
# calling SConscript (if any)

Import('*')

#
# retreive command-line arguments if any

if ARGUMENTS.get('usegcc',0):
  usegcc = 1

if ARGUMENTS.get('options',0):
  options = ARGUMENTS.get('options',0)

#
# determine platform

env = Environment(ENV = os.environ)
platform = env['PLATFORM']

#
# determine hostname

import socket
hostname = socket.gethostname()

#
# load configuration settings

options_dir = str(esysroot) + '/scons'
sys.path.append(options_dir)

from default_options import *

if hostname=='ess':
  from ess_options import *

if usegcc==1:
  from gcc_options import *

if options!=None:
  exec "from " + options + " import *"

cxx_flags=cxx_flags_debug

#
# print out build configuration for this module

print "Build configuration for module: EsysException unit tests"
print "         dodebug:  1"
print "          usegcc: ", usegcc
print "             cxx: ", cxx
print "        platform: ", platform
print "        hostname: ", hostname

#
# do the actual build

esysexception_test_path = str(esysroot) + '/esysUtils/test/EsysException'
esysUtils_path = str(esysroot) + '/esysUtils/inc'
CppUnitTest_path = str(esysroot) + '/tools/CppUnitTest/inc'

esysUtils_lib_path = str(esysroot) + '/esysUtils/lib'
CppUnitTest_lib_path = str(esysroot) + '/tools/CppUnitTest/lib'

esysUtils_lib = str(esysUtils_lib_path) + '/libesysUtils.a'

install_dir = str(esysroot) + '/esysUtils/test'

cpp_path = [esysexception_test_path,
            esysUtils_path,
            CppUnitTest_path]

lib_path = [esysUtils_lib_path,
            CppUnitTest_lib_path]

libs = ['esysUtils',
        'CppUnitTest']

libs.extend(sys_libs)

sources = ['EsysExceptionTestCase.cpp',
           'EsysExceptionTest.cpp']

target = 'EsysExceptionTest.exe'

esysexception_env = Environment(ENV = os.environ)

esysexception_env.Replace(CXX = cxx)
esysexception_env.Replace(CXXFLAGS = cxx_flags)
esysexception_env.Replace(CPPPATH = cpp_path)
esysexception_env.Replace(LIBPATH = lib_path)
esysexception_env.Replace(LIBS = libs)

esysexception_test_exe = esysexception_env.Program(target, sources)

Depends(esysexception_test_exe, esysUtils_lib)

Alias("build_tests", esysexception_env.Install(install_dir, esysexception_test_exe))

import scons_extensions
runUnitTest_builder = Builder(action = scons_extensions.runUnitTest, suffix = '.passed', single_source=True)
esysexception_env.Append(BUILDERS = {'RunUnitTest' : runUnitTest_builder});

Alias("run_tests", esysexception_env.RunUnitTest(target))
