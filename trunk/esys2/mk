#!/bin/bash

# $Id$
# An explicit building script for esys

MODULES="tools/CppUnitTest tools/mmio esysUtils escript finley"

# use for local developmental builds
ENVVARS="DODEBUG=YES"

# use for production installs  - NB: overwrites installed esys llibraries
#ENVVARS="L_INSTLIB_DIR=/raid2/tools/esys/lib L_PYTH_DIR=/raid2/tools/esys/esys"

if [ "$1" == "clean" ];
then
	for module in $MODULES ; do \
		(echo Cleaning: $module; cd $module; gmake clean) \
	done
        exit
fi

(cd escript/lib; if [ ! -e py_src ]; then mkdir py_src; fi)

(cd escript/inc; if [ ! -e escript ]; then ln -s ../src escript; fi)
(cd esysUtils/inc; if [ ! -e esysUtils ]; then ln -s ../src esysUtils; fi)
(cd finley/inc; if [ ! -e finley ]; then ln -s ../src finley; fi)

(cd escript; if [ ! -e Makefile ]; then ln -s ./escript.mk Makefile; fi)
(cd esysUtils; if [ ! -e Makefile ]; then ln -s ./esysUtils.mk Makefile; fi)
(cd finley; if [ ! -e Makefile ]; then ln -s ./finley.mk Makefile; fi)
(cd tools/mmio; if [ ! -e Makefile ]; then ln -s ./mmio.mk Makefile; fi)
(cd tools/CppUnitTest; if [ ! -e Makefile ]; then ln -s ./CppUnitTest.mk Makefile; fi)

for module in $MODULES ; do \
	(echo Building: $module; cd $module; env $ENVVARS gmake -j 8) \
done

if [ "$1" == "install" ];
then
	for module in $MODULES ; do \
		(echo Installing: $module; cd $module; env $ENVVARS gmake install ) \
	done
fi

(cd esys; if [ ! -e escriptcpp.so ]; then ln -s ../lib/libescriptcpp.so escriptcpp.so; fi)
(cd esys; if [ ! -e finleycpp.so ]; then ln -s ../lib/libfinleycpp.so finleycpp.so; fi)
