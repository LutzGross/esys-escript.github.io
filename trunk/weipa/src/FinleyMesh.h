
/*******************************************************
*
* Copyright (c) 2003-2010 by University of Queensland
* Earth Systems Science Computational Center (ESSCC)
* http://www.uq.edu.au/esscc
*
* Primary Business: Queensland, Australia
* Licensed under the Open Software License version 3.0
* http://www.opensource.org/licenses/osl-3.0.php
*
*******************************************************/

#ifndef __FINLEYMESH_H__
#define __FINLEYMESH_H__

#include <weipa/weipa.h>

class DBfile;
struct Finley_Mesh;

namespace escript {
    class AbstractDomain;
}

namespace weipa {

class ElementData;
class NodeData;

/// \brief Represents a full Finley domain including nodes and elements.
///
/// This class represents a Finley domain including nodes, cells, face elements
/// and contact elements. It provides functionality to read a domain from a
/// NetCDF file (generated by the domain's dump() method) or directly
/// through an instance of Finley_Mesh.
///
/// Once initialised, the domain can be saved in the Silo file format or
/// its nodes and elements accessed through the respective methods.
///
/// Note that this class is not MPI aware, that is if domain decomposition
/// was used only one 'chunk' of the domain can be read per instance of this
/// class. See the EscriptDataset class for how to process full domains.
class FinleyMesh
{
public:
    /// \brief Default constructor.
    WEIPA_DLL_API
    FinleyMesh();

    /// \brief Copy constructor.
    WEIPA_DLL_API
    FinleyMesh(const FinleyMesh& m);
 
    /// \brief Virtual destructor.
    WEIPA_DLL_API
    virtual ~FinleyMesh();

    /// \brief Initialises the mesh using an escript domain instance.
    /// \note Finley_Mesh is the only supported domain.
    WEIPA_DLL_API
    bool initFromEscript(const escript::AbstractDomain* escriptDomain);

    /// \brief Reads the mesh from a NetCDF file
    WEIPA_DLL_API
    bool initFromNetCDF(const std::string& filename);

    /// \brief Writes the mesh to a Silo file
    WEIPA_DLL_API
    bool writeToSilo(DBfile* dbfile, const std::string& pathInSilo,
                     const StringVec& labels, const StringVec& units);

    /// \brief Reorders elements so that 'ghost' elements appear last
    WEIPA_DLL_API
    void reorderGhostZones(int ownIndex);

    /// \brief Removes 'ghost' elements and nodes
    WEIPA_DLL_API
    void removeGhostZones(int ownIndex);

    /// \brief Returns the names of all meshes
    WEIPA_DLL_API
    StringVec getMeshNames() const;

    /// \brief Returns the names of all 'special' Finley mesh variables
    WEIPA_DLL_API
    StringVec getVarNames() const;

    /// \brief Returns element data with given name
    WEIPA_DLL_API
    ElementData_ptr getElementsByName(const std::string& name) const;

    /// \brief Returns node data with given name
    WEIPA_DLL_API
    NodeData_ptr getMeshByName(const std::string& name) const;

    /// \brief Returns mesh variable data
    WEIPA_DLL_API
    const IntVec& getVarDataByName(const std::string& name) const;

    /// \brief Returns the node mesh for given function space
    WEIPA_DLL_API
    NodeData_ptr getMeshForFinleyFS(int functionSpace) const;

    /// \brief Returns the element data for given function space
    WEIPA_DLL_API
    ElementData_ptr getElementsForFinleyFS(int functionSpace) const;

    /// \brief Returns a pointer to the nodes.
    WEIPA_DLL_API
    NodeData_ptr getNodes() const { return nodes; }

    /// \brief Returns a pointer to the elements.
    WEIPA_DLL_API
    ElementData_ptr getElements() { return cells; }

    /// \brief Returns a pointer to the face elements.
    WEIPA_DLL_API
    ElementData_ptr getFaceElements() { return faces; }

    /// \brief Returns a pointer to the contact elements.
    WEIPA_DLL_API
    ElementData_ptr getContactElements() { return contacts; }

    /// \brief Returns the absolute path within Silo file if writeToSilo()
    ///        or setSiloPath() was called before, the empty string otherwise.
    WEIPA_DLL_API
    std::string getSiloPath() const { return siloPath; }

    /// \brief Sets the silo path to be used when saving to a Silo file.
    WEIPA_DLL_API
    void setSiloPath(const std::string& path)  { siloPath = path; }

private:
    void cleanup();

    bool initialized;
    const Finley_Mesh* finleyMesh;
    NodeData_ptr    nodes;
    ElementData_ptr cells;
    ElementData_ptr faces;
    ElementData_ptr contacts;
    std::string     siloPath;
};

} // namespace weipa

#endif // __FINLEYMESH_H__

