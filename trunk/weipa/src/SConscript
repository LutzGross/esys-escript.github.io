########################################################
#
# Copyright (c) 2003-2010 by University of Queensland
# Earth Systems Science Computational Center (ESSCC)
# http://www.uq.edu.au/esscc
#
# Primary Business: Queensland, Australia
# Licensed under the Open Software License version 3.0
# http://www.opensource.org/licenses/osl-3.0.php
#
########################################################


import os
Import('*')

local_env = clone_env(env_mpi)
py_wrapper_local_env = clone_env(env_mpi)

# Remove the shared library prefix on all platforms - we don't want 'lib'
# mucking with our python modules
del py_wrapper_local_env['SHLIBPREFIX']

sources = """
    DataVar.cpp
    ElementData.cpp
    EscriptDataset.cpp
    FileSavers.cpp
    FinleyMesh.cpp
    NodeData.cpp
""".split()

headers = """
    DataVar.h
    ElementData.h
    EscriptDataset.h
    FileSavers.h
    FinleyMesh.h
    NodeData.h
    weipa.h
""".split()

local_env.AppendUnique(LIBS = ['esysUtils', 'finley', 'escript'] + env['sys_libs'])
if local_env['usesilo']:
  local_env.Append(CPPDEFINES = ['USE_SILO'])
  local_env.AppendUnique(LIBS = [env['silo_libs']])

if IS_WINDOWS_PLATFORM :
  local_env.Append(CPPDEFINES = ['WEIPA_EXPORTS'])

module_name = 'weipa'

lib = local_env.SharedLibrary(module_name, sources)
env.Alias('target_weipa_so', lib)

include_path = Dir('weipa', local_env['incinstall'])

tmp = local_env.Install(include_path, headers)
env.Alias('target_install_weipa_headers', [tmp])

tmp = local_env.Install(local_env['libinstall'], lib)
env.Alias('target_install_weipa_so', tmp)

### Python wrapper ###
py_wrapper_local_env.Append(LIBS = ['weipa'] + env['sys_libs'])
py_wrapper_name = module_name + 'cpp'
py_wrapper_lib = py_wrapper_local_env.SharedLibrary(py_wrapper_name, 'weipacpp.cpp')
env.Alias('target_weipacpp_so', py_wrapper_lib)

tmp_inst = os.path.join(local_env['pyinstall'], 'weipa')
#windows specific mod
if os.name == 'nt':
  wrapper_postfix = '.pyd'
else:
  wrapper_postfix = '.so'

share_name = os.path.join(tmp_inst, py_wrapper_name + wrapper_postfix)
tmp3 = py_wrapper_local_env.InstallAs(target=share_name,
                                      source=py_wrapper_lib[0])
env.Alias('target_install_weipacpp_so', tmp3)

# export the lib target since tests will depend on it
# the lib target is a list of file nodes (why? win32 produces more than one
# output file: .lib, .dll, .pdb)
# FIXME: This list handling produces the desired result but can this be done
# directly with scons File nodes?
dep_lib = [local_env['libinstall']+'/'+str(x) for x in lib]
Export('dep_lib')

######################
### Plugin library ###
######################
# This is disabled on Windows since Scons complains about compiling the same
# files in the same build directory twice. The plugin is currently only for
# Linux anyway. Correct fix is probably a second SConscript file with different
# build_dir setting.
if not IS_WINDOWS_PLATFORM:
    visitplugin_env = clone_env(env_mpi)
    plugin_sources = """
        DataVar.cpp
        ElementData.cpp
        EscriptDataset.cpp
        FinleyMesh.cpp
        NodeData.cpp
    """.split()

    visitplugin_env.AppendUnique(LIBS = ['esysUtils' ] + env['sys_libs'])
    visitplugin_env.Append(CPPDEFINES = ['VISIT_PLUGIN'])

    plugin_lib = visitplugin_env.StaticLibrary('escriptreader', plugin_sources)
    env.Alias('target_escriptreader_a', plugin_lib)

    tmp = local_env.Install(local_env['libinstall'], plugin_lib)
    env.Alias('target_install_escriptreader_a', tmp)


# Call the python SConscript
env.SConscript(dirs = ['#/weipa/py_src'], build_dir='py', duplicate=0)

# Call the unit tests SConscript
#local_env.SConscript(dirs = ['#/weipa/test'], build_dir='#/build/$PLATFORM/weipa/test', duplicate=0)

