

########################################################
#
# Copyright (c) 2003-2010 by University of Queensland
# Earth Systems Science Computational Center (ESSCC)
# http://www.uq.edu.au/esscc
#
# Primary Business: Queensland, Australia
# Licensed under the Open Software License version 3.0
# http://www.opensource.org/licenses/osl-3.0.php
#
########################################################


import os
Import('*')

local_env = env.Clone()
py_wrapper_local_env = env.Clone()
local_unroll_env = env.Clone()
local_unroll_env.Append(CFLAGS = env['dudley_assemble_flags'])


# Remove the sharedlibrary prefix on all platform - we don't want 'lib' mucking with our python modules
del py_wrapper_local_env['SHLIBPREFIX']

sources = """
	Assemble_AverageElementData.c
	Assemble_CopyElementData.c
	Assemble_CopyNodalData.c
	Assemble_LumpedSystem.c
	Assemble_NodeCoordinates.c
	Assemble_PDE.c
	Assemble_PDE_Single2_2D.c
	Assemble_PDE_Single2_3D.c
	Assemble_PDE_System2_2D.c
	Assemble_PDE_System2_3D.c
	Assemble_addToSystemMatrix.c
	Assemble_getAssembleParameters.c
	Assemble_getSize.c
	Assemble_integrate.c
	Assemble_interpolate.c
	Assemble_setNormal.c
	ElementFile.c
	ElementFile_allocTable.c
	ElementFile_copyTable.c
	ElementFile_createColoring.c
	ElementFile_distributeByRankOfDOF.c
	ElementFile_gather.c
	ElementFile_jacobeans.c
	ElementFile_markNodes.c
	ElementFile_optimizeOrdering.c
	ElementFile_relableNodes.c
	ElementFile_scatter.c
	ElementFile_setCoordinates.c
	ElementFile_setNodeRange.c
	ElementFile_setTags.c
	ElementType.c
	Dudley.c
	IndexList.c
	Mesh.c
	Mesh_createNodeFileMappings.c
	Mesh_distributeByRankOfDOF.c
	Mesh_findMatchingFaces.c
	Mesh_getPattern.c
	Mesh_markNodes.c
	Mesh_optimizeDOFDistribution.c
	Mesh_optimizeDOFLabeling.c
	Mesh_prepare.c
	Mesh_print.c
	Mesh_read.c
	Mesh_readGmsh.c
	Mesh_relableElementNodes.c
	Mesh_resolveNodeIds.c
	Mesh_saveDX.c
	Mesh_setCoordinates.c
	Mesh_tagmaps.c
	Mesh_tet4.c
	Mesh_tri3.c
	Mesh_write.c
	NodeFile.c
	NodeFile_allocTable.c
	NodeFile_copyTable.c
	NodeFile_createDenseLabelings.c
	NodeFile_gather.c
	NodeFile_scatter.c
	NodeFile_setCoordinates.c
	NodeFile_setIdRange.c
	NodeFile_setTags.c
	NodeMapping.c
	ShapeTable.c
	TagMap.c
	Util.c
	CPPAdapter/DudleyAdapterException.cpp
	CPPAdapter/DudleyError.cpp
	CPPAdapter/MeshAdapter.cpp
	CPPAdapter/MeshAdapterFactory.cpp
	CPPAdapter/SystemMatrixAdapter.cpp
	CPPAdapter/TransportProblemAdapter.cpp
""".split()
unroll_sources= """
	Assemble_gradient.c
	Assemble_jacobeans.c
""".split()


headers = """
	Assemble.h
	Dudley.h
	DudleyVersion.h
	ElementFile.h
	ElementType.h
	IndexList.h
	Mesh.h
	NodeFile.h
	NodeMapping.h
	TriangularMesh.h
	ShapeTable.h
	TagMap.h
	Util.h
	vtkCellType.h
""".split()
cppadapter_headers = """
	CPPAdapter/DudleyAdapterException.h
	CPPAdapter/DudleyError.h
	CPPAdapter/MeshAdapter.h
	CPPAdapter/MeshAdapterFactory.h
	CPPAdapter/SystemMatrixAdapter.h
	CPPAdapter/TransportProblemAdapter.h
	CPPAdapter/system_dep.h
""".split()

local_env.Append(LIBS = ['escript', 'esysUtils', 'paso'])

if IS_WINDOWS :
  local_env.Append(CPPDEFINES = ['DUDLEY_EXPORTS'])

module_name = 'dudley'

un = [ local_unroll_env.SharedObject(x) for x in unroll_sources]

lib = local_env.SharedLibrary(module_name, sources+un)
env.Alias('build_dudley_lib', lib)

include_path = Dir('dudley', local_env['incinstall'])
cppadapter_include_path = Dir('CppAdapter', include_path)

hdr_inst1 = local_env.Install(include_path, headers )
hdr_inst2 = local_env.Install(cppadapter_include_path, cppadapter_headers )
env.Alias('install_dudley_headers', [hdr_inst1, hdr_inst2])

lib_inst = local_env.Install(local_env['libinstall'], lib)
env.Alias('install_dudley_lib', lib_inst)

### Python wrapper ###
py_wrapper_local_env.Append(LIBS = ['dudley', 'escript', 'esysUtils', 'paso'])
py_wrapper_name = module_name + 'cpp'
py_wrapper_lib = py_wrapper_local_env.SharedLibrary(py_wrapper_name, 'CPPAdapter/dudleycpp.cpp')
env.Alias('build_dudleycpp_lib', py_wrapper_lib)

tmp_inst = os.path.join(local_env['pyinstall'], module_name)
if IS_WINDOWS:
    wrapper_ext = '.pyd'
else:
    wrapper_ext = '.so'

share_name = os.path.join(tmp_inst, py_wrapper_name+wrapper_ext)
mod_inst = py_wrapper_local_env.InstallAs(target=share_name,
                                          source=py_wrapper_lib[0])
env.Alias('install_dudleycpp_lib', mod_inst)

# configure python module
local_env.SConscript(dirs = ['#/dudley/py_src'], variant_dir='py', duplicate=0)

# configure unit tests
local_env.SConscript(dirs = ['#/dudley/test'], variant_dir='$BUILD_DIR/$PLATFORM/dudley/test', duplicate=0, exports=['py_wrapper_lib'])

