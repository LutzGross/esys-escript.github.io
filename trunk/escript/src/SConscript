import os
Import('*')

local_env=env.Copy()
py_wrapper_local_env=env.Copy()
# Remove the sharedlibrary prefix on all platform - we don't want 'lib' mucking with our python modules
del py_wrapper_local_env['SHLIBPREFIX']

lib_name = 'escript'
py_wrapper_name = lib_name+'cpp'
py_wrapper_source = py_wrapper_name+'.cpp'
py_wrapper_lib_name = py_wrapper_name

# get the relevant file names:
src_dir = local_env.Dir('.').srcnode().abspath
filenames = [ x for x in os.listdir(src_dir) if os.path.splitext(x)[1] in [".h", ".c", ".cpp"] ]

sources = [x for x in filenames if os.path.splitext(x)[1] in ['.cpp', '.c']]
headers = [x for x in filenames if os.path.splitext(x)[1] in ['.h']]

# Filter out sources that should not be in the list automatically
sources.remove(py_wrapper_source) # FIXME: should probably refactor the source tree so the python wrapper isn't colocated with c++ sources

local_env.Append(LIBS = [boost_libs] + ['esysUtils'] + sys_libs )
py_wrapper_local_env.Append(LIBS = [boost_libs] + [ lib_name, 'esysUtils'] + sys_libs )
if useNetCDF == 'yes':
    local_env.Append(LIBS = netCDF_libs)
    local_env.Append(CPPDEFINES = [ 'USE_NETCDF' ])
    if IS_WINDOWS_PLATFORM: local_env.Append(CPPDEFINES = [ 'DLL_NETCDF' ])
    py_wrapper_local_env.Append(LIBS = netCDF_libs)
    py_wrapper_local_env.Append(CPPDEFINES = [ 'USE_NETCDF' ])

local_env.Append(CPPDEFINES = [ 'ESCRIPT_EXPORTS'] )

lib = local_env.SharedLibrary(lib_name, sources)
py_wrapper_lib = py_wrapper_local_env.SharedLibrary( py_wrapper_lib_name, py_wrapper_source)

include_path = Dir(lib_name, incinstall)

local_env.Install(include_path, headers )
local_env.Install(libinstall, lib)
py_wrapper_local_env.Install(pyinstall+'/escript', py_wrapper_lib)

# export the lib target since tests will depend on it
# the lib target is a list of file nodes (why? win32 produces more than one output file: .lib, .dll, .pdb)
# FIXME: This list handling produces the desired result but can this be done directly with scons File nodes?
dep_lib = [libinstall+'/'+str(x) for x in lib]
Export('dep_lib')



# add source files to release
release_srcfiles = [ env.File(x) for x in filenames ] + [env.File("SConscript"), ]
env.Zip(src_zipfile, release_srcfiles)
try:
   env.Tar(src_tarfile, release_srcfiles)
except AttributeError:
   pass
# Call the python sconscript
env.SConscript(dirs = ['#/escript/py_src'], build_dir='py', duplicate=0)

# Call the unit tests SConscript
local_env.SConscript(dirs = ['#/escript/test'], build_dir='#/build/$PLATFORM/escript/test', duplicate=0)
