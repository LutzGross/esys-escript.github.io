#!/bin/bash

# Escript/Finley wrapper for python
# Sets LD_LIBRARY_PATH and PYTHONPATH and then runs either python or the MPI launcher

#Extra paths can be configured about a page further down
#Search for EXTRA_PATH=""

#set to 1 if performing this is a standalone build and /packages contains the relevant tools
STANDALONE=0

#Now we find the location of this script
#Note that this location should be absolute but does not need to be unique
scriptdir=""
CURDIR=`pwd`

#Environment vars which control operations:
# ESCRIPT_NUM_NODES, ESCRIPT_NUM_PROC, ESCRIPT_NUM_THREADS, ESCRIPT_HOSTFILE, ESCRIPT_STDFILES


#Need to match if the name contains /
if [[ $0 =~ / ]]
then
    # We are not using the PATH to find the script
    cd `dirname $0`
    scriptdir=`pwd`
    cd $CURDIR
else
    # name does not contain / therefore we are using 
    tscriptdir=`which $0`
    if [ $? != 0 ]
    then
        echo "Error unable to determine script directory. Exiting."
	exit 1
    fi
    scriptdir=`dirname $tscriptdir`
fi

cd $scriptdir/..
ESCRIPT_ROOT=`pwd`
cd ..
ESCRIPT_PARENT=`pwd`
cd $CURDIR

##### End finding ESCRIPT_ROOT  ########

# if possible please express paths relative to $ESCRIPT_ROOT unless
# they are in an unrelated location

EXTRA_PATH=""
EXTRA_LD_LIBRARY_PATH=""
EXTRA_DYLD_LIBRARY_PATH=""
EXTRA_PYTHONPATH=""

if [ $STANDALONE == 1 ]
then
    EXTRA_PATH=$ESCRIPT_PARENT/packages/python/bin:$EXTRA_PATH
    EXTRA_LD_LIBRARY_PATH=$ESCRIPT_PARENT/packages/boost/lib:$ESCRIPT_PARENT/packages/netcdf/lib/:$EXTRA_LD_LIBRARY_PATH
    EXTRA_LD_LIBRARY_PATH=$ESCRIPT_PARENT/packages/vtk/lib/vtk-5.2:$ESCRIPT_PARENT/packages/mesa/lib:$EXTRA_LD_LIBRARY_PATH
    EXTRA_LD_LIBRARY_PATH=$ESCRIPT_PARENT/packages/python/lib:$EXTRA_LD_LIBRARY_PATH
    EXTRA_PYTHONPATH=$ESCRIPT_PARENT/packages/numarray/lib:$ESCRIPT_PARENT/packages/vtk/lib/python2.6/site-packages:$EXTRA_PYTHONPATH
fi

# For stand-alone builds this will need to be changed
PYTHON_CMD=python

EXTRA_PYTHONPATH=$ESCRIPT_ROOT:$EXTRA_PYTHONPATH
EXTRA_LD_LIBRARY_PATH=$ESCRIPT_ROOT/lib:$EXTRA_LD_LIBRARY_PATH


HELP_TEXT="
Usage: escript [options] script.py [arguments...]
	-n nn		number of nodes to use
	-p np		number of MPI processes to spawn
	-t nt		number of OpenMP threads to use
	-f file		name of MPI hostfile
	-c 		print compile information for escript and exit
	-V		print escript version and exit
	-i		interactive mode 
	-e		print export statements for environment and exit
	-o		redirect output from MPI to files
	-v		print diagnostics
	-x		..reserved for future use ..
	script.py	Your python script
	arguments...	The optional command-line arguments to your script
"

if [ "$1" = "--help" ]; then
  echo "$HELP_TEXT"
  exit 0
fi



# Avoid bug in hybrid runs with MPT MPI
export MPI_NUM_MEMORY_REGIONS=0

# Try to guess the MPI launcher (mpirun unless in PBS batch job in which case mpiexec)
mpi_launcher='mpirun -np'
if [ $?PBS_ENVIRONMENT ]; then
  if [ "X_$PBS_ENVIRONMENT" = "X_PBS_BATCH" ]; then
    mpi_launcher='mpiexec -n'
  fi  
fi

PYTHON_MPI="$ESCRIPT_ROOT/lib/pythonMPI"
OMP_NUM_THREADS=1
MPI_NUM_PROCS=1

# Parse the command-line options
# option e should not be followed by a :
while getopts 'n:p:t:f:h:ecVviox' option
do
	case "$option" in
	  "n")	ESCRIPT_NUM_NODES=$OPTARG
		;;
	  "p")	ESCRIPT_NUM_PROC=$OPTARG
		;;
	  "t")	ESCRIPT_NUM_THREADS=$OPTARG
		;;
	  "f")	ESCRIPT_HOSTFILE=$OPTARG
		;;
	  "c")  cat $ESCRIPT_ROOT/lib/buildvars
		exit 0
		;;
	  "V")	echo "escript-pre2.0(build "`grep svn_revision $ESCRIPT_ROOT/lib/buildvars |cut -d= -f2`")"
		exit 0
		;;
	  "h")  echo "$HELPTEXT"
		exit 0
		;;
	  "i")  DOINTERACTIVE=yes
		;;
	  "e")  echo "export LD_LIBRARY_PATH=$EXTRA_LD_LIBRARY_PATH:\$LD_LIBRARY_PATH"
		echo "export PYTHONPATH=$EXTRA_PYTHONPATH:\$PYTHONPATH"
		echo "export PATH=$EXTRA_PATH:\$PATH"
		if [ `uname` == Darwin ]
		then
		    echo "export DYLD_LIBRARY_PATH=$EXTRA_DYLD_LIBRARY_PATH:$EXTRA_LD_LIBRARY_PATH:\$DYLD_LIBRARY_PATH"
		fi
		exit 0
		;;
	  "o")  ESCRIPT_STDFILES="yes"
		;;
	  "v")  echo "Diagnostics:"
		exit 0
		;;
	  "x")  echo "-x not implemented yet"
		exit 1
		;;
	  ?)	echo "$HELP_TEXT"
		exit 1
		;;
	esac
done
shift `expr $OPTIND - 1`

#Read the MPI_FLAVOUR from the buildvars
MPI_FLAVOUR=`grep mpi_flavour $ESCRIPT_ROOT/lib/buildvars |cut -d= -f2`

export PATH=$EXTRA_PATH:$PATH
export LD_LIBRARY_PATH=$EXTRA_LD_LIBRARY_PATH:$LD_LIBRARY_PATH
export PYTHONPATH=$EXTRA_PYTHONPATH:$PYTHONPATH
if [ `uname` == Darwin ]
then
    export DYLD_LIBRARY_PATH=$EXTRA_DYLD_LIBRARY_PATH:$EXTRA_LD_LIBRARY_PATH:$DYLD_LIBRARY_PATH
fi

# Check to see if the python version we were compiled with matches the one of PYTHON_CMD
if [ -f $ESCRIPT_ROOT/lib/pyversion ]
then
   compversion=`cat $ESCRIPT_ROOT/lib/pyversion`
   intversion=`python --version 2>&1`
   if [ "$compversion" != "$intversion" ]
   then
      echo "Python versions do not match. Escript was compiled for "$compversion"."
      echo "Current version of Python appears to be "$intversion"."
      exit 1
   fi
fi

# Must have at least one command-line arg: the python script
if [ $# -eq 0 ]; then
  echo "No python script specified. Starting python interpreter."
fi

#Ensure the variables have sensible values
if [ -z $ESCRIPT_NUM_NODES ]
then
  ESCRIPT_NUM_NODES=1
fi

if [ -z $ESCRIPT_NUM_PROCS ]
then
  ESCRIPT_NUM_PROCS=1
fi

if [ -z $ESCRIPT_NUM_THREADS ]
then
  ESCRIPT_NUM_THREADS=$OMP_NUM_THREADS
  if [ -z $ESCRIPT_NUM_THREADS ]
  then
    ESCRIPT_NUM_THREADS=1
  fi
fi

#Now we compute total number of Processes
(( TOTPROC=$ESCRIPT_NUM_NODES * $ESCRIPT_NUM_PROCS))
if [ $? -ne 0 ]		#Some compute error 
then			#This could happen if the args were not a number
  ESCRIPT_NUM_NODES=1
  ESCRIPT_NUM_PROCS=1
fi

# Test to ensure people aren't trying to combine interactive and multi-process

if [[ ( ( -z $DOINTERACTIVE ) || ( $# -eq 0 ) ) && ( $TOTPROC -gt 1) ]]
then
  echo "Interactive mode cannot be used with more than one process"
  exit 1
fi

# Using OpenMP?
OMP_OPTIONS=''
if [ -f "$ESCRIPT_ROOT/lib/Compiled.with.openmp" ]; then
#  PYTHON_CMD="$mpi_launcher $MPI_NUM_PROCS $PYTHON_MPI"
  OMP_OPTIONS="env OMP_NUM_THREADS=$ESCRIPT_NUM_THREADS"
fi

# Using MPI?
if [ -f "$ESCRIPT_ROOT/lib/Compiled.with.mpi" ]; then
  PYTHON_CMD="$mpi_launcher $MPI_NUM_PROCS $PYTHON_MPI"
else
  if [ "$TOTPROC" -ne 1 ]; then
    echo "Escript/Finley was not compiled for MPI. You can not use the -n and -p options."
    exit 1
  fi
fi

set -x
$OMP_OPTIONS $PYTHON_CMD "$@"

