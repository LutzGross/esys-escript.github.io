

########################################################
#
# Copyright (c) 2003-2010 by University of Queensland
# Earth Systems Science Computational Center (ESSCC)
# http://www.uq.edu.au/esscc
#
# Primary Business: Queensland, Australia
# Licensed under the Open Software License version 3.0
# http://www.opensource.org/licenses/osl-3.0.php
#
########################################################


import os
Import('*')

local_env = clone_env(env_mpi)
py_wrapper_local_env = clone_env(env_mpi)

# Remove the sharedlibrary prefix on all platform - we don't want 'lib' mucking with our python modules
del py_wrapper_local_env['SHLIBPREFIX']

sources = """
	Assemble_AverageElementData.c
	Assemble_CopyElementData.c
	Assemble_CopyNodalData.c
	Assemble_LumpedSystem.c
	Assemble_NodeCoordinates.c
	Assemble_PDE.c
	Assemble_PDE_Single2_1D.c
	Assemble_PDE_Single2_2D.c
	Assemble_PDE_Single2_3D.c
	Assemble_PDE_Single2_C.c
	Assemble_PDE_System2_1D.c
	Assemble_PDE_System2_2D.c
	Assemble_PDE_System2_3D.c
	Assemble_PDE_System2_C.c
	Assemble_addToSystemMatrix.c
	Assemble_getAssembleParameters.c
	Assemble_getSize.c
	Assemble_gradient.c
	Assemble_integrate.c
	Assemble_interpolate.c
	Assemble_jacobeans.c
	Assemble_setNormal.c
	ElementFile.c
	ElementFile_allocTable.c
	ElementFile_copyTable.c
	ElementFile_createColoring.c
	ElementFile_distributeByRankOfDOF.c
	ElementFile_gather.c
	ElementFile_jacobeans.c
	ElementFile_markNodes.c
	ElementFile_optimizeOrdering.c
	ElementFile_relableNodes.c
	ElementFile_scatter.c
	ElementFile_setCoordinates.c
	ElementFile_setNodeRange.c
	ElementFile_setTags.c
	Finley.c
	IndexList.c
	Mesh.c
	Mesh_createNodeFileMappings.c
	Mesh_distributeByRankOfDOF.c
	Mesh_findMatchingFaces.c
	Mesh_getPattern.c
	Mesh_glueFaces.c
	Mesh_hex20.c
	Mesh_hex8.c
	Mesh_joinFaces.c
	Mesh_markNodes.c
	Mesh_merge.c
	Mesh_optimizeDOFDistribution.c
	Mesh_optimizeDOFLabeling.c
	Mesh_prepare.c
	Mesh_print.c
	Mesh_read.c
	Mesh_readGmsh.c
	Mesh_rec4.c
	Mesh_rec8.c
	Mesh_relableElementNodes.c
	Mesh_resolveNodeIds.c
	Mesh_saveDX.c
	Mesh_saveVTK.c
	Mesh_setCoordinates.c
	Mesh_tagmaps.c
	Mesh_write.c
	NodeFile.c
	NodeFile_allocTable.c
	NodeFile_copyTable.c
	NodeFile_createDenseLabelings.c
	NodeFile_gather.c
	NodeFile_scatter.c
	NodeFile_setCoordinates.c
	NodeFile_setIdRange.c
	NodeFile_setTags.c
	NodeMapping.c
	Quadrature.c
	ReferenceElements.c
	ShapeFunctions.c
	TagMap.c
	Util.c
	ReferenceElementSets.c
	CPPAdapter/FinleyAdapterException.cpp
	CPPAdapter/FinleyError.cpp
	CPPAdapter/MeshAdapter.cpp
	CPPAdapter/MeshAdapterFactory.cpp
	CPPAdapter/SystemMatrixAdapter.cpp
	CPPAdapter/TransportProblemAdapter.cpp
""".split()
headers = """
	Assemble.h
	ElementFile.h
	Finley.h
	FinleyVersion.h
	IndexList.h
	Mesh.h
	NodeFile.h
	NodeMapping.h
	Quadrature.h
	RectangularMesh.h
	ReferenceElements.h
	ShapeFunctions.h
	TagMap.h
	Util.h
	ReferenceElementSets.h
	system_dep.h
	vtkCellType.h
""".split()
cppadapter_headers = """
	CPPAdapter/FinleyAdapterException.h
	CPPAdapter/FinleyError.h
	CPPAdapter/MeshAdapter.h
	CPPAdapter/MeshAdapterFactory.h
	CPPAdapter/SystemMatrixAdapter.h
	CPPAdapter/TransportProblemAdapter.h
""".split()

local_env.Append(LIBS = ['escript', 'esysUtils', 'paso'] + env['sys_libs'] )

if IS_WINDOWS_PLATFORM :
  local_env.Append(CPPDEFINES = ['FINLEY_EXPORTS'])

py_wrapper_local_env.Append(LIBS = ['finley', 'escript', 'esysUtils', 'paso'] + env['sys_libs'] )

module_name = 'finley'
py_wrapper_name = module_name + 'cpp'

lib = local_env.SharedLibrary(module_name, sources)
env.Alias('target_finley_so', lib)

py_wrapper_lib = py_wrapper_local_env.SharedLibrary(py_wrapper_name, 'CPPAdapter/finleycpp.cpp')
env.Alias('target_finleycpp_so', py_wrapper_lib)

include_path = Dir('finley', local_env['incinstall'])
cppadapter_include_path = Dir('CppAdapter', include_path)

tmp1 = local_env.Install(include_path, headers )
tmp2 = local_env.Install(cppadapter_include_path, cppadapter_headers )
env.Alias('target_install_finley_headers', [tmp1, tmp2])

tmp3 = local_env.Install(local_env['libinstall'], lib)
env.Alias('target_install_finley_so', tmp3)

#windows specific mod
tmp_inst = os.path.join(local_env['pyinstall'],module_name)
if os.name == 'nt':
  wrapper_postfix = '.pyd'
else:
  wrapper_postfix = '.so'

share_name = os.path.join(tmp_inst,py_wrapper_name+wrapper_postfix)

tmp4 = py_wrapper_local_env.InstallAs(target=share_name,
                                      source=py_wrapper_lib[0])

env.Alias('target_install_finleycpp_so', tmp4)

# export the lib target since tests will depend on it
# the lib target is a list of file nodes (why? win32 produces more than one output file: .lib, .dll, .pdb)
# FIXME: This list handling produces the desired result but can this be done directly with scons File nodes?
dep_lib = [local_env['libinstall']+'/'+str(x) for x in lib]
Export('dep_lib')

# Call the python sconscript
env.SConscript(dirs = ['#/finley/py_src'], build_dir='py', duplicate=0)

# Call the unit tests SConscript
local_env.SConscript(dirs = ['#/finley/test'], build_dir='#/build/$PLATFORM/finley/test', duplicate=0)

