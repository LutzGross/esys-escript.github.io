
##############################################################################
#
# Copyright (c) 2003-2016 by The University of Queensland
# http://www.uq.edu.au
#
# Primary Business: Queensland, Australia
# Licensed under the Apache License, version 2.0
# http://www.apache.org/licenses/LICENSE-2.0
#
# Development until 2012 by Earth Systems Science Computational Center (ESSCC)
# Development 2012-2013 by School of Earth Sciences
# Development from 2014 by Centre for Geoscience Computing (GeoComp)
#
##############################################################################

from __future__ import print_function, division

__copyright__="""Copyright (c) 2003-2016 by The University of Queensland
http://www.uq.edu.au
Primary Business: Queensland, Australia"""
__license__="""Licensed under the Apache License, version 2.0
http://www.apache.org/licenses/LICENSE-2.0"""
__url__="https://launchpad.net/escript-finley"

"""
test for util operations for reduction operations with tagged data

:remark: use see `test_util`
:var __author__: name of author
:var __copyright__: copyrights
:var __license__: licence agreement
:var __url__: url entry point on documentation
:var __version__: version
:var __date__: date of the version
"""

__author__="Joel Fenwick, joelfenwick@uq.edu.au"

import esys.escriptcore.utestselect as unittest
import numpy
from esys.escript import *
from test_util_base import Test_util_base

class Test_util_reduction_new(Test_util_base):
    """
    test for reduction operation Lsup,sup,inf
    
    the values used here were generated as follows:
    def z2(levels, row):
    if levels==1:
      v=[]
      for j in range(row):
          v.append(random.triangular())
      return tuple(v)
    else:
      v=[]
      for j in range(row):
          v.append(z2(levels-1,row))
      return tuple(v)
      
    z2(2,2)
    z2(3,3)
    z2(4,4)
    
    """
    def get_float_input1(self):
        v1=0.6081355033581688
        return (v1,v1)

    def get_float_input2(self):
        v2=0.5327268994219874
        return (v2,v2)
    
    def get_float_input3(self):
        v3=0.4903827487969067
        return (v3,v3)

    def get_python_input1(self, rank):
        if rank==0:
            return (0.16343477325759478,)
        elif rank==1:
            return (0.414447461350212, 0.5940893953018536)
        elif rank==2:
            return ((0.18517072101415805, 0.20812345616476052), 
                    (0.5546197008728526, 0.5564107547626429))
        elif rank==3:
            return (((0.39959975888207894, 0.6577401243413907, 0.4280968882108843),
                     (0.22892610169500252, 0.29400534047234894, 0.3596253597614875),
                     (0.352145347223075, 0.22330947752937103, 0.6040999239623353)),
                    ((0.5820901702251168, 0.5118427342586129, 0.784142756428528),
                     (0.32306580123331297, 0.5718638969764223, 0.35139290436334764),
                     (0.38744644765122205, 0.6230529976422874, 0.4451744915244834)),
                    ((0.1680467743981198, 0.8270861936315199, 0.2604978984507546),
                     (0.3179202431655108, 0.592515989853744, 0.37531069237770537),
                     (0.5594567456296533, 0.5354189906699913, 0.6879940596903789)))
        elif rank==4:
            return ((((0.07653880859335448, 0.8506240072658446, 0.5669507117736834, 0.5069631117128448), 
                      (0.7231092428343939, 0.18235569823019526, 0.46022740126490647, 0.8492333455592396), 
                      (0.6170052818637486, 0.8808747630127647, 0.1563085221153727, 0.8244613246958687), 
                      (0.4294616619386404, 0.12118821840316875, 0.7616687854731052, 0.6728140330125063)), 
                     ((0.6436880168986288, 0.25021445743624676, 0.11998265803070028, 0.8312669978628259), 
                      (0.6870391868795935, 0.41825547772474664, 0.601722908359805, 0.10996760961876721), 
                      (0.30815741382372003, 0.8484037060918963, 0.6225223666523892, 0.25636768516056313), 
                      (0.5403219505752949, 0.784036866371234, 0.11777309540223573, 0.4039156719922558)), 
                     ((0.5543818190876664, 0.5654917578606441, 0.6110438985958697, 0.09343833716996176), 
                      (0.663012375502168, 0.2314869852119426, 0.23762537471584116, 0.6933683606475624), 
                      (0.29276295759188187, 0.714837865189284, 0.1872658031279304, 0.1702169706800615), 
                      (0.4542436592804883, 0.07976845049430197, 0.08816046717012539, 0.462262050647425)), 
                     ((0.506450528739594, 0.4062122557330939, 0.5462416476803083, 0.25191742530295563), 
                      (0.3393578341507891, 0.2825671991633298, 0.13447310100386736, 0.5860351833019655), 
                      (0.6612450693192753, 0.6774796280346236, 0.2676680871992434, 0.507190159923532), 
                      (0.6953428609343382, 0.7171619543885263, 0.6260223993304953, 0.331615476564711))), 
                    (((0.27573547448763347, 0.5077386283774998, 0.4453961872519076, 0.43130840985234026), 
                      (0.580315177591782, 0.5652609083059623, 0.8511780780181941, 0.33371199932631807), 
                      (0.699271673783864, 0.49366804495096395, 0.06797744724509305, 0.5353269755409358), 
                      (0.6252936853093409, 0.8905733967820801, 0.3089031678403189, 0.5261014470187029)), 
                     ((0.7404002858536928, 0.2048176759131214, 0.4980581903575471, 0.42894050825990854), 
                      (0.45779709857247547, 0.7620468819613082, 0.6247644411339963, 0.6305323474999456), 
                      (0.7909315252937255, 0.3012402477673979, 0.4525703288970107, 0.9352115724287626), 
                      (0.31693114412209444, 0.37281844304816186, 0.7318694959034, 0.19786924305064665)), 
                     ((0.3274437623324882, 0.33087589095095155, 0.8556630658488849, 0.524447118150698), 
                      (0.41163320939179787, 0.9238459438767593, 0.21861731917563137, 0.4424459362963088), 
                      (0.5776510801231114, 0.6065647351222803, 0.639307289457621, 0.7314330090773533), 
                      (0.27421408841108247, 0.12621566941798637, 0.46606608860175, 0.08985539889445235)), 
                     ((0.25771437676193215, 0.8671956551054035, 0.7024115898342955, 0.6180265239465382), 
                      (0.3536132615270657, 0.4678494273732346, 0.5440963329219566, 0.5386557403677203), 
                      (0.425277398166178, 0.5397867882224323, 0.21245876299659439, 0.8499599729452116), 
                      (0.282819828736375, 0.616976644425216, 0.45750716248923645, 0.10388406898090359))), 
                    (((0.480212232724941, 0.8937086550918505, 0.6399122280175192, 0.3926739182869949), 
                      (0.5866305704975537, 0.37523483543667685, 0.34455787558391154, 0.7468191968550546), 
                      (0.7561559742324413, 0.6618299652906166, 0.5497360987548463, 0.44000411823919794), 
                      (0.5489342296514085, 0.33299878380451237, 0.6851907132585857, 0.8837744966993399)), 
                     ((0.2449050432846066, 0.7225682113974873, 0.42149169327348723, 0.5241172273711572), 
                      (0.7461632214743219, 0.3773660518547119, 0.5911139199924735, 0.12543356040664694), 
                      (0.4374385476373295, 0.7523855940695361, 0.4381969239605094, 0.37308327852970813), 
                      (0.21637181734766117, 0.49874174259134, 0.3912614640116107, 0.4526617072173223)), 
                     ((0.7151470272616507, 0.43893562960939475, 0.4654984531602598, 0.026153794290457506), 
                      (0.7899612010454996, 0.4349102788459652, 0.7453956466392258, 0.47431536809150776), 
                      (0.42979681026390004, 0.571667413005515, 0.608322709782375, 0.4374481254420103), 
                      (0.33514856567435775, 0.5877137248653976, 0.9386863487830309, 0.1386415730993477)), 
                     ((0.35219579066973905, 0.6168773605138196, 0.40504448843510976, 0.424824210157774), 
                      (0.7812627665326543, 0.19452639019667187, 0.6000050187112531, 0.7539670503073901), 
                      (0.2981680001911141, 0.5123292320600974, 0.6035479676835969, 0.5180365031497639), 
                      (0.4958302538856905, 0.5666881217462356, 0.3057862327558582, 0.16322148534649822))), 
                    (((0.5219568172234907, 0.6691120408133714, 0.5415030041267854, 0.5178254487487362), 
                      (0.550999473408774, 0.3224491374840088, 0.40632316238837907, 0.5316822545746088), 
                      (0.15782246477014253, 0.39011414803016886, 0.5923055243411701, 0.33403984110147705), 
                      (0.5476956624940421, 0.353567340179472, 0.7751336150761081, 0.3769351266082521)), 
                     ((0.26092129669846587, 0.38531106190825626, 0.43089380185467957, 0.3517745063606868), 
                      (0.6068795949566435, 0.7313287811237782, 0.7817415065395071, 0.539725422031037), 
                      (0.4681995762086918, 0.8081081299514932, 0.45349678068383653, 0.1676286251112078), 
                      (0.9418725604754995, 0.7388572732026134, 0.44262594936532146, 0.7474149440129483)), 
                     ((0.8132968384251593, 0.5972218943821608, 0.5919410574164853, 0.35599895731169406), 
                      (0.7520654612132684, 0.45483154483372135, 0.4059225646226807, 0.4001021311571795), 
                      (0.241190931159322, 0.8294262552595144, 0.6807436275202874, 0.3970641092078186), 
                      (0.41214139959674073, 0.49530207420971023, 0.2603640589059204, 0.5320822386899074)),
                     ((0.4852677073030271, 0.5126350217914364, 0.5251827072400477, 0.4107256987588376), 
                      (0.5923200155158566, 0.7301177285915048, 0.774241876159728, 0.6746581037497406), 
                      (0.3573798122820507, 0.169636160666647, 0.5725299039287078, 0.23182444091612892), 
                      (0.3601137116698788, 0.07438414986800912, 0.4165677125316061, 0.0790530879666291))))
    
    def get_python_input2(self, rank):
        if rank==0:
            return (0.22889838791916658,)
        elif rank==1:
            return (0.49012030903632825, 0.6031662135176437)
        elif rank==2:
            return ((0.6891705183553265, 0.7417620269931902), (0.5710307758197861, 0.39980890346586717))
        elif rank==3:
            return (((0.450166488818521, 0.40335229027346475, 0.34323251080578104), 
                     (0.2842555722086943, 0.519038548037327, 0.22356691063536377),
                     (0.6233434523085559, 0.6939552082789993, 0.20717775496120844)),
                    ((0.6635014413084468, 0.12427061907674535, 0.4316471005230688), 
                     (0.3462206066776269, 0.5812789855981269, 0.1513383660423066), 
                     (0.40921125173698586, 0.6302181341512401, 0.4857376224901844)), 
                    ((0.5156818720590722, 0.3810418328134193, 0.5228685660307542), 
                     (0.44668606111653875, 0.8552520337523355, 0.30378907822454826), 
                     (0.572442375071903, 0.13397389728880899, 0.800878962384303)))
        elif rank==4:
            return ((((0.45433363368861773, 0.6498884169562154, 0.8968304717142223, 0.8907734241559906), 
                      (0.4777438965822781, 0.19219763395957137, 0.47760828704065156, 0.099611811950238), 
                      (0.28320121503596124, 0.6794412465012807, 0.13188620716114968, 0.40410020187234463), 
                      (0.170095604634749, 0.6491679236703396, 0.48405171480791914, 0.48480616171976565)), 
                     ((0.40796761374598983, 0.5888935058511742, 0.810959910176321, 0.3519432924326292), 
                      (0.6778803492879535, 0.15159482372964073, 0.7609511790213423, 0.4291829232233251), 
                      (0.6597430856795399, 0.5416080050562327, 0.7316035149420569, 0.17492295472360206), 
                      (0.3585956180854316, 0.4506986634961759, 0.3068624306617866, 0.6450035140643098)), 
                     ((0.7690325599562085, 0.6582789850176016, 0.6556413596206179, 0.615423012961261), 
                      (0.3947622967482572, 0.3604341682179244, 0.5689343825826134, 0.22003697279869047), 
                      (0.6004909191668832, 0.48591852805780483, 0.6670811381503408, 0.33418084981888524), 
                      (0.5696228030807892, 0.8349733556806979, 0.08716776292987743, 0.6103200906618154)), 
                     ((0.32673151927490685, 0.3650741778596788, 0.4719563946069752, 0.2624495178810215), 
                      (0.6911360309172416, 0.629718040535628, 0.37138298773280687, 0.7867876295855086), 
                      (0.6768502043234856, 0.32903587935447837, 0.6229889864689531, 0.5226994780805113), 
                      (0.6571446582814051, 0.30807025622961254, 0.3025565918384279, 0.5316791314282434))), 
                    (((0.7110156690310308, 0.07897654694359649, 0.49671935812956247, 0.15989919493282642), 
                      (0.4454758263127157, 0.8468596115253173, 0.4603369168686832, 0.7835562740584727), 
                      (0.1973500874759318, 0.6890077016392274, 0.38353764662415646, 0.2602210860778308), 
                      (0.3062963684983607, 0.5485723785169033, 0.7558085192193574, 0.7260373711224899)), 
                     ((0.6292337309967168, 0.6298019421801468, 0.5769038995707547, 0.805909547222589), 
                      (0.2956786092814956, 0.8516163380649984, 0.0433563110406362, 0.5562648421367056), 
                      (0.44398600437607083, 0.3132864322653825, 0.1309184523859448, 0.09487956033144461), 
                      (0.39347200269496224, 0.6744128343886427, 0.17787462973897294, 0.6844498649820736)), 
                     ((0.4668129815805621, 0.46840442065095245, 0.6348701936076414, 0.534532796163385), 
                      (0.5401302006866129, 0.42361490419012787, 0.3055178484323608, 0.4099049291060996), 
                      (0.15643756091005653, 0.5538397868668722, 0.5793672234228313, 0.5343825930606839), 
                      (0.567145595353928, 0.7936293829906991, 0.5159699957715731, 0.11524767048966807)), 
                     ((0.46983068856527466, 0.829272105469925, 0.8242448082292821, 0.3155783126108229), 
                      (0.46679344399363587, 0.35498575768428703, 0.8195558132407107, 0.044710380043836144), 
                      (0.7228682303918399, 0.5956512578344273, 0.5842273233950968, 0.46445592272801267), 
                      (0.48424480615111076, 0.43589572454719294, 0.2739525289177576, 0.5141521147948742))), 
                    (((0.5353156164778932, 0.827716346014944, 0.2661170502005538, 0.6240217001592496), 
                      (0.5889586875315378, 0.6056309378106368, 0.38460210470822326, 0.3257073061066195), 
                      (0.38605597818925463, 0.5566287156895975, 0.8868213070850919, 0.10818212758613992), 
                      (0.44934219884516874, 0.7722925534790802, 0.6824771465971564, 0.4861304182325704)), 
                     ((0.35670465647772914, 0.40563319853724733, 0.9215374519881303, 0.3261075398074149), 
                      (0.5466590188369063, 0.8063505325979616, 0.2505468000914572, 0.27573025774136484), 
                      (0.743952777599612, 0.5916038948220598, 0.5814331576314142, 0.25330559867360414), 
                      (0.9281192928557953, 0.5526121099889816, 0.7663168620517609, 0.27644519542436335)), 
                     ((0.4312170339514421, 0.39670998093753257, 0.6147975692316388, 0.49353631380425866), 
                      (0.2914782490250003, 0.34495461015075896, 0.724277583477783, 0.7656114513280461), 
                      (0.2967100926835535, 0.3708225100005513, 0.4557999563503535, 0.21401134707432434), 
                      (0.33196574382892885, 0.6509108525238382, 0.44580359408187276, 0.6130947882235365)), 
                     ((0.11173436827791464, 0.6700051363761477, 0.12807937551069665, 0.7174522662954508), 
                      (0.40082249771839484, 0.6435832868289147, 0.47429720113534696, 0.44533186804848607), 
                      (0.4625441865293232, 0.24229257632548656, 0.655276132353378, 0.27883861657454045), 
                      (0.638496711915504, 0.5391658143407168, 0.6794910638048037, 0.18819631783938193))), 
                    (((0.49500523167298044, 0.7621808699493068, 0.8002303121407335, 0.4339016426795843), 
                      (0.6899502135654372, 0.9438297115207196, 0.39545080237118185, 0.43835240439976453), 
                      (0.5324364296711654, 0.7403526206887153, 0.421079060947922, 0.28183735731097076), 
                      (0.7641745784203584, 0.8052630361187237, 0.4113425938410049, 0.4873541423815537)), 
                     ((0.4763043550807671, 0.8818320340667569, 0.4376950912132615, 0.5155236207246434), 
                      (0.4770314956120568, 0.6995239422377975, 0.29342906280323733, 0.2207382366023154), 
                      (0.47119152389910457, 0.5643383062697325, 0.19014363807175272, 0.47728067160438753), 
                      (0.293549802812087, 0.3091310044125135, 0.8079461149429534, 0.30540675213143226)), 
                     ((0.6562012019806969, 0.5762140611417803, 0.8922117406714833, 0.5644163171621817), 
                      (0.28018207838767606, 0.6980601983118322, 0.9321643060248082, 0.6857895197253853), 
                      (0.30248864387340907, 0.37739756004900193, 0.5011312641768506, 0.19190880686969636), 
                      (0.36857760657786354, 0.6980580453947155, 0.4162678161352499, 0.6651932863378893)), 
                     ((0.2969663268640197, 0.5012850908098417, 0.5630486821046159, 0.5994825528795871), 
                      (0.45367000863631446, 0.24430658191105983, 0.277060548382701, 0.5169546884489187), 
                      (0.9278462241176814, 0.5112886572173754, 0.3908093365092602, 0.7815138913982161), 
                      (0.32136995201761503, 0.2619940057725135, 0.35043110649096515, 0.9241246395431221))))

    def get_python_input3(self, rank):
        if rank==0:
            return (0.37126864363799594,)
        elif rank==1:
            return (0.6234908821535466, 0.6138798448505429)
        elif rank==2:
            return ((0.46458697075264, 0.47521353725342), (0.2769991834092879, 0.7655903776259643))
        elif rank==3:
            return (((0.7087306338233754, 0.5091993546185136, 0.7823132790082358), 
                     (0.7809687239325918, 0.7618301393180559, 0.13846012311583666), 
                     (0.24584408982123662, 0.30175410391822816, 0.6508820239463049)),
                    ((0.0799357328507963, 0.4268164046934606, 0.3340669557843154), 
                     (0.5352665915599666, 0.4796035531201281, 0.31521200922735726),
                     (0.6181927127971525, 0.5813500010909463, 0.6485259530707308)),
                    ((0.607591622470962, 0.5134390179382666, 0.7761053727330762), 
                     (0.30315911281007185, 0.7772739725828741, 0.21981237010097954), 
                     (0.5720780258224234, 0.7199923733581466, 0.8038912730779739)))
        elif rank==4:
            return ((((0.45368972429803434, 0.43658224238126836, 0.327332664787118, 0.1659399779578305), 
                      (0.5908203393014015, 0.6287596060266886, 0.26557881193403204, 0.7640693855123928), 
                      (0.6550472925659366, 0.4051939492486867, 0.39695234748477226, 0.7984350907853707), 
                      (0.45152587205177463, 0.6915126698433964, 0.1408991785923076, 0.5555466803377823)), 
                     ((0.7111217974645967, 0.22442551434498154, 0.33601178864915354, 0.21277504641255832),
                      (0.10220061513651632, 0.4523774178793611, 0.4079018667540423, 0.909554257065248), 
                      (0.6139494095517375, 0.3083569476979329, 0.6376629339543685, 0.28647430781873456), 
                      (0.36486444793373635, 0.3134770531471723, 0.19207850462685053, 0.2742209367740796)), 
                     ((0.5206089841634276, 0.24952538894537638, 0.0933758645493489, 0.24304014487798284), 
                      (0.2039225828898289, 0.423378042043955, 0.21847415387885974, 0.4823494123271024), 
                      (0.49781756385165377, 0.42765522168555026, 0.4737414300227722, 0.5398374124738391), 
                      (0.2640617374368053, 0.34880253282719476, 0.32357380359477705, 0.7111559522372015)), 
                     ((0.23761918672652063, 0.1593578505403827, 0.6530063992033186, 0.9079894778799892),
                      (0.8250545394400823, 0.4861804550261372, 0.3406365725750848, 0.42480466462889144),
                      (0.47203132507512685, 0.20818156589620632, 0.20161698569028383, 0.42806013456132413),
                      (0.7792675299565863, 0.3736959703075082, 0.19761992623295196, 0.4235372420916027))), 
                    (((0.6459817009885405, 0.2610419659851719, 0.39888588458573665, 0.6358114313716404),
                      (0.6789108524310596, 0.4760144991501489, 0.5132407231875976, 0.7445121079875354), 
                      (0.3165090047475903, 0.1882290433512482, 0.30270840337500193, 0.4773827304127968), 
                      (0.27248041023839426, 0.5356669773887297, 0.5759298824759524, 0.27026295067501754)), 
                     ((0.2225815420544881, 0.6296933698530776, 0.6420994781708316, 0.5292910401325328),
                      (0.4838814244753861, 0.3015763358329324, 0.5966105067811018, 0.437555952383517),
                      (0.2508886824465943, 0.3688703869280175, 0.44848941714873286, 0.6968286221703255), 
                      (0.7458127375857659, 0.5565367320025696, 0.5221639609134333, 0.5043229193744858)), 
                     ((0.2704586652152375, 0.23622061144754075, 0.5668874045788246, 0.7383427762361463),
                      (0.3326338826927772, 0.5180692401299339, 0.6853188934444896, 0.5105611442225273),
                      (0.32729714889258044, 0.7634733351662765, 0.2667323956085834, 0.3813499428619923),
                      (0.707758750914661, 0.23317899979615478, 0.6728060312412778, 0.5045011288076484)),
                     ((0.2758755420358796, 0.6849112850328907, 0.7208465949939953, 0.5465246847493163),
                      (0.5382081700827642, 0.4626841039902129, 0.38537277159039474, 0.5918003106653552),
                      (0.7410792569612943, 0.848695963275266, 0.35215371840141596, 0.7859807920638692),
                      (0.439754658119384, 0.09885040884202281, 0.20324265625602897, 0.6393707779383961))), 
                    (((0.45932643067605416, 0.4867064483724215, 0.2492845750953945, 0.4071869028109893),
                      (0.518352199566693, 0.6265341328104177, 0.5719047743470251, 0.8284284690707643),
                      (0.1255527780884896, 0.133522460155736, 0.5939516968011829, 0.6970674969748756),
                      (0.821986273583169, 0.3881563859122813, 0.16941736964779366, 0.288738726812057)),
                     ((0.48102730273877786, 0.1522385344365771, 0.5752150637264031, 0.39522973755221524), 
                      (0.732520712427958, 0.49190588963815157, 0.6125760080831428, 0.2716702847832281), 
                      (0.8159103581398756, 0.34507912842082983, 0.7075657623779936, 0.29530894172611916), 
                      (0.5278442353318813, 0.6539972004065213, 0.48897529954240776, 0.7932403888940815)),
                     ((0.831358889394934, 0.48050345824229945, 0.6410388202892018, 0.8982570057418652), 
                      (0.30388123939085465, 0.727912073121657, 0.543834760379716, 0.6710456332208439), 
                      (0.4417259323277584, 0.5717441377950038, 0.3664067245442036, 0.3280925201821242), 
                      (0.5400907637568426, 0.43207844188064887, 0.732946675152238, 0.5339092194505695)),
                     ((0.22369526225631464, 0.5665529520090573, 0.2653373517286637, 0.6914637769007175),
                      (0.22138531453529892, 0.17362665833183274, 0.11873401018627547, 0.48731998406078203),
                      (0.5508721228465998, 0.3492961556670177, 0.5692351404720578, 0.5107492266892075), 
                      (0.17584863513461835, 0.35755945941346623, 0.7650117785966029, 0.48316674832514844))), 
                    (((0.2982202413301988, 0.2348830652298031, 0.3114442699257422, 0.20218169729319738), 
                      (0.6846710473822368, 0.8119003553529898, 0.1790804504032915, 0.4781252356617314), 
                      (0.3766941501672641, 0.5437027703705374, 0.24423050827666176, 0.3323763024031741), 
                      (0.8189980567608663, 0.5888920746029481, 0.17138276940268463, 0.5475256795584624)), 
                     ((0.4569907243510988, 0.5255497422421722, 0.1680676291815795, 0.2879601796868399), 
                      (0.5419471765149858, 0.8765158329632898, 0.21847500231364173, 0.6219663103942495),
                      (0.8993300494227338, 0.5256551743041176, 0.4312579142909404, 0.28503463714017396),
                      (0.6601304123050094, 0.9681225089321629, 0.6110831795473397, 0.630733896684101)),
                     ((0.7252549854189686, 0.48905018110325815, 0.3949054499635516, 0.6883221515509466), 
                      (0.3510020242244332, 0.5964593467774927, 0.665927090247577, 0.19851750424804993),
                      (0.49702295298466764, 0.32952301722148614, 0.6578112215358343, 0.629875436683738), 
                      (0.5228582859488041, 0.48834135369831744, 0.8107618558028835, 0.012956020032133924)), 
                     ((0.3966015859408982, 0.19901168720580728, 0.6930890007374754, 0.7839579709117346), 
                      (0.8623235889093344, 0.5661301336086426, 0.6547115325958021, 0.6689861941430038),
                      (0.5105113993916237, 0.7066840336625683, 0.8004786600943815, 0.5266845579213677),
                      (0.689553296868146, 0.773301352126767, 0.7364812118860565, 0.5377502245784462))))

    def get_array_input1(self, rank):
        z=self.get_python_input1(rank)
        return (numpy.array(z),numpy.array(z))

    def get_array_input2(self, rank):
        z=self.get_python_input2(rank)
        return (numpy.array(z),numpy.array(z))

    def get_array_input3(self, rank):
        z=self.get_python_input3(rank)
        return (numpy.array(z),numpy.array(z))
    
    def get_const_input1(self, rank, fs):
        z=self.get_python_input1(rank)
        ref=self.get_array_input1(rank)
        d=Data(z, fs)
        return (d, ref)
    
    def get_const_input2(self, rank, fs):
        z=self.get_python_input2(rank)
        ref=self.get_array_input2(rank)
        d=Data(z, fs)
        return (d, ref)
    
    def get_expanded_input1(self, rank, fs):
        base=self.get_python_input1(rank)
        x=fs.getX()[0]
        mask=whereNegative(x-0.5)   # A trick from Lutz Gross' version of tests
        r=base*mask+(1-mask)*base
        return (r, base)
    
    def get_tagged_input1(self, rank, fs):
        z=self.get_python_input1(rank)
        ref=self.get_array_input1(rank)
        d=Data(z, fs)
        d.tag()
        return (d, ref)

    
    def test_Lsup_new(self):
        (f1,f2)=self.get_float_input1()
        pars=[(f1, "Lsup(a)", "isinstance(res,float)", numpy.array(f2), "ref.max()", "Lsup - scalar")]
        for rank in range(4):
            (a, r)=self.get_array_input1(rank)
            p=(a, "Lsup(a)", "isinstance(res,float)", numpy.array(r), "ref.max()", "Lsup - array rank "+str(rank))
            pars.append(p)
            (a, r)=self.get_const_input1(rank, self.functionspace)
            p=(a, "Lsup(a)", "isinstance(res,float)", numpy.array(r), "ref.max()", "Lsup - Constant Data rank "+str(rank))
            pars.append(p)
            (a, r)=self.get_expanded_input1(rank, self.functionspace)
            p=(a, "Lsup(a)", "isinstance(res,float)", numpy.array(r), "ref.max()", "Lsup - Expanded Data rank "+str(rank))
            pars.append(p)            
        for v in pars:
            a=v[0]
            op=v[1]
            misccheck=v[2]
            ref=v[3]
            oraclecheck=v[4]
            description=v[5]
            res=eval(op)
            self.assertTrue(eval(misccheck),"Failed check for for "+description)
            oraclevalue=eval(oraclecheck)
            self.assertTrue(abs(res-oraclevalue)<=self.RES_TOL*abs(oraclevalue),"wrong result for "+description)
        del pars
        tpars=[]    # tagged versions
        for rank in range(4):
            test=["Lsup - tagged rank "+str(rank),]
            (a, r)=self.get_tagged_input1(rank, self.functionspace)
            test.append(a)
            r=numpy.array(r)
            # arguments are new tagged value, operation, extra check, reference_value, reference_check
            (t2, r2)=self.get_array_input2(rank)
            rmerge=r2.max()
            test.append((t2, "Lsup(a)", "isinstance(res,float)", rmerge, None,))
            (t3, r3)=self.get_array_input3(rank)
            rmerge=max(rmerge, r3.max())
            test.append((t3, "Lsup(a)", "isinstance(res,float)", rmerge, None,))
            tpars.append(test)
        for v in tpars:
            description=v[0]
            a=v[1]
            tagcount=1
            for step in v[2:]:
                a.setTaggedValue(tagcount, step[0])
                tagcount+=1
                op=step[1]
                misccheck=step[2]
                ref=step[3]
                oraclecheck=step[4]
                res=eval(op)
                if misccheck is not None:
                    self.assertTrue(eval(misccheck), "Check failed for "+description+" checking "+misccheck)
                if oraclecheck is not None:
                    oraclevalue=eval(oraclecheck)
                else:
                    oraclevalue=ref
                self.assertTrue(abs(res-oraclevalue)<=self.RES_TOL*abs(oraclevalue),"wrong result for "+description)
