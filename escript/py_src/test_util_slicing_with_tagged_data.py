# $Id$
"""
test for util operations for slicing operations with tagged data

@remark: use see L{test_util}
@var __author__: name of author
@var __licence__: licence agreement
@var __url__: url entry point on documentation
@var __version__: version
@var __date__: date of the version
"""

__author__="Lutz Gross, l.gross@uq.edu.au"
__licence__="contact: esys@access.uq.edu.au"
__url__="http://www.iservo.edu.au/esys/escript"
__version__="$Revision$"
__date__="$Date$"

import unittest
import numarray
from esys.escript import *
from esys.escript.test_util_base import Test_util_base

class Test_util_slicing_with_tagged_data(Test_util_base):
   """
   test for slicing operations for tagged data are tested.
   """
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank1_U(self):
      arg=Data(numarray.array([0.0, 1.0, 2.0]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([-0.0, -1.0, -2.0]))
      res=arg[:2]
      ref=Data(numarray.array([0.0, 1.0]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([-0.0, -1.0]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2,),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank1_L(self):
      arg=Data(numarray.array([0.0, 1.0, 2.0]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([-0.0, -1.0, -2.0]))
      res=arg[2:]
      ref=Data(numarray.array([2.0]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([-2.0]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1,),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank1_R(self):
      arg=Data(numarray.array([0.0, 1.0, 2.0]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([-0.0, -1.0, -2.0]))
      res=arg[1:2]
      ref=Data(numarray.array([1.0]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([-1.0]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1,),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank1_P(self):
      arg=Data(numarray.array([0.0, 1.0, 2.0]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([-0.0, -1.0, -2.0]))
      res=arg[1]
      ref=Data(1.0,self.functionspace)
      ref.setTaggedValue(1,-1.0)
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank1_C(self):
      arg=Data(numarray.array([0.0, 1.0, 2.0]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([-0.0, -1.0, -2.0]))
      res=arg[:]
      ref=Data(numarray.array([0.0, 1.0, 2.0]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([-0.0, -1.0, -2.0]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3,),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank2_CP(self):
      arg=Data(numarray.array([[0.0, 1.0, 2.0, 3.0], [4.0, 5.0, 6.0, 7.0], [8.0, 9.0, 10.0, 11.0]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[-0.0, -1.0, -2.0, -3.0], [-4.0, -5.0, -6.0, -7.0], [-8.0, -9.0, -10.0, -11.0]]))
      res=arg[:,2]
      ref=Data(numarray.array([2.0, 6.0, 10.0]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([-2.0, -6.0, -10.0]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3,),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank2_CU(self):
      arg=Data(numarray.array([[0.0, 1.0, 2.0, 3.0], [4.0, 5.0, 6.0, 7.0], [8.0, 9.0, 10.0, 11.0]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[-0.0, -1.0, -2.0, -3.0], [-4.0, -5.0, -6.0, -7.0], [-8.0, -9.0, -10.0, -11.0]]))
      res=arg[:,:3]
      ref=Data(numarray.array([[0.0, 1.0, 2.0], [4.0, 5.0, 6.0], [8.0, 9.0, 10.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-0.0, -1.0, -2.0], [-4.0, -5.0, -6.0], [-8.0, -9.0, -10.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank2_UR(self):
      arg=Data(numarray.array([[0.0, 1.0, 2.0, 3.0], [4.0, 5.0, 6.0, 7.0], [8.0, 9.0, 10.0, 11.0]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[-0.0, -1.0, -2.0, -3.0], [-4.0, -5.0, -6.0, -7.0], [-8.0, -9.0, -10.0, -11.0]]))
      res=arg[:2,1:3]
      ref=Data(numarray.array([[1.0, 2.0], [5.0, 6.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-1.0, -2.0], [-5.0, -6.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 2),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank2_RR(self):
      arg=Data(numarray.array([[0.0, 1.0, 2.0, 3.0], [4.0, 5.0, 6.0, 7.0], [8.0, 9.0, 10.0, 11.0]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[-0.0, -1.0, -2.0, -3.0], [-4.0, -5.0, -6.0, -7.0], [-8.0, -9.0, -10.0, -11.0]]))
      res=arg[1:2,1:3]
      ref=Data(numarray.array([[5.0, 6.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-5.0, -6.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 2),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank2_PU(self):
      arg=Data(numarray.array([[0.0, 1.0, 2.0, 3.0], [4.0, 5.0, 6.0, 7.0], [8.0, 9.0, 10.0, 11.0]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[-0.0, -1.0, -2.0, -3.0], [-4.0, -5.0, -6.0, -7.0], [-8.0, -9.0, -10.0, -11.0]]))
      res=arg[1,:3]
      ref=Data(numarray.array([4.0, 5.0, 6.0]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([-4.0, -5.0, -6.0]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3,),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank2_UL(self):
      arg=Data(numarray.array([[0.0, 1.0, 2.0, 3.0], [4.0, 5.0, 6.0, 7.0], [8.0, 9.0, 10.0, 11.0]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[-0.0, -1.0, -2.0, -3.0], [-4.0, -5.0, -6.0, -7.0], [-8.0, -9.0, -10.0, -11.0]]))
      res=arg[:2,2:]
      ref=Data(numarray.array([[2.0, 3.0], [6.0, 7.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-2.0, -3.0], [-6.0, -7.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 2),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank2_CL(self):
      arg=Data(numarray.array([[0.0, 1.0, 2.0, 3.0], [4.0, 5.0, 6.0, 7.0], [8.0, 9.0, 10.0, 11.0]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[-0.0, -1.0, -2.0, -3.0], [-4.0, -5.0, -6.0, -7.0], [-8.0, -9.0, -10.0, -11.0]]))
      res=arg[:,2:]
      ref=Data(numarray.array([[2.0, 3.0], [6.0, 7.0], [10.0, 11.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-2.0, -3.0], [-6.0, -7.0], [-10.0, -11.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 2),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank2_LP(self):
      arg=Data(numarray.array([[0.0, 1.0, 2.0, 3.0], [4.0, 5.0, 6.0, 7.0], [8.0, 9.0, 10.0, 11.0]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[-0.0, -1.0, -2.0, -3.0], [-4.0, -5.0, -6.0, -7.0], [-8.0, -9.0, -10.0, -11.0]]))
      res=arg[2:,2]
      ref=Data(numarray.array([10.0]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([-10.0]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1,),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank2_LR(self):
      arg=Data(numarray.array([[0.0, 1.0, 2.0, 3.0], [4.0, 5.0, 6.0, 7.0], [8.0, 9.0, 10.0, 11.0]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[-0.0, -1.0, -2.0, -3.0], [-4.0, -5.0, -6.0, -7.0], [-8.0, -9.0, -10.0, -11.0]]))
      res=arg[2:,1:3]
      ref=Data(numarray.array([[9.0, 10.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-9.0, -10.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 2),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank2_UN(self):
      arg=Data(numarray.array([[0.0, 1.0, 2.0, 3.0], [4.0, 5.0, 6.0, 7.0], [8.0, 9.0, 10.0, 11.0]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[-0.0, -1.0, -2.0, -3.0], [-4.0, -5.0, -6.0, -7.0], [-8.0, -9.0, -10.0, -11.0]]))
      res=arg[:2]
      ref=Data(numarray.array([[0.0, 1.0, 2.0, 3.0], [4.0, 5.0, 6.0, 7.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-0.0, -1.0, -2.0, -3.0], [-4.0, -5.0, -6.0, -7.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 4),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank2_UU(self):
      arg=Data(numarray.array([[0.0, 1.0, 2.0, 3.0], [4.0, 5.0, 6.0, 7.0], [8.0, 9.0, 10.0, 11.0]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[-0.0, -1.0, -2.0, -3.0], [-4.0, -5.0, -6.0, -7.0], [-8.0, -9.0, -10.0, -11.0]]))
      res=arg[:2,:3]
      ref=Data(numarray.array([[0.0, 1.0, 2.0], [4.0, 5.0, 6.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-0.0, -1.0, -2.0], [-4.0, -5.0, -6.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank2_RP(self):
      arg=Data(numarray.array([[0.0, 1.0, 2.0, 3.0], [4.0, 5.0, 6.0, 7.0], [8.0, 9.0, 10.0, 11.0]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[-0.0, -1.0, -2.0, -3.0], [-4.0, -5.0, -6.0, -7.0], [-8.0, -9.0, -10.0, -11.0]]))
      res=arg[1:2,2]
      ref=Data(numarray.array([6.0]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([-6.0]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1,),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank2_CC(self):
      arg=Data(numarray.array([[0.0, 1.0, 2.0, 3.0], [4.0, 5.0, 6.0, 7.0], [8.0, 9.0, 10.0, 11.0]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[-0.0, -1.0, -2.0, -3.0], [-4.0, -5.0, -6.0, -7.0], [-8.0, -9.0, -10.0, -11.0]]))
      res=arg[:,:]
      ref=Data(numarray.array([[0.0, 1.0, 2.0, 3.0], [4.0, 5.0, 6.0, 7.0], [8.0, 9.0, 10.0, 11.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-0.0, -1.0, -2.0, -3.0], [-4.0, -5.0, -6.0, -7.0], [-8.0, -9.0, -10.0, -11.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 4),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank2_RC(self):
      arg=Data(numarray.array([[0.0, 1.0, 2.0, 3.0], [4.0, 5.0, 6.0, 7.0], [8.0, 9.0, 10.0, 11.0]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[-0.0, -1.0, -2.0, -3.0], [-4.0, -5.0, -6.0, -7.0], [-8.0, -9.0, -10.0, -11.0]]))
      res=arg[1:2,:]
      ref=Data(numarray.array([[4.0, 5.0, 6.0, 7.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-4.0, -5.0, -6.0, -7.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 4),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank2_LL(self):
      arg=Data(numarray.array([[0.0, 1.0, 2.0, 3.0], [4.0, 5.0, 6.0, 7.0], [8.0, 9.0, 10.0, 11.0]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[-0.0, -1.0, -2.0, -3.0], [-4.0, -5.0, -6.0, -7.0], [-8.0, -9.0, -10.0, -11.0]]))
      res=arg[2:,2:]
      ref=Data(numarray.array([[10.0, 11.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-10.0, -11.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 2),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank2_RN(self):
      arg=Data(numarray.array([[0.0, 1.0, 2.0, 3.0], [4.0, 5.0, 6.0, 7.0], [8.0, 9.0, 10.0, 11.0]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[-0.0, -1.0, -2.0, -3.0], [-4.0, -5.0, -6.0, -7.0], [-8.0, -9.0, -10.0, -11.0]]))
      res=arg[1:2]
      ref=Data(numarray.array([[4.0, 5.0, 6.0, 7.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-4.0, -5.0, -6.0, -7.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 4),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank2_CN(self):
      arg=Data(numarray.array([[0.0, 1.0, 2.0, 3.0], [4.0, 5.0, 6.0, 7.0], [8.0, 9.0, 10.0, 11.0]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[-0.0, -1.0, -2.0, -3.0], [-4.0, -5.0, -6.0, -7.0], [-8.0, -9.0, -10.0, -11.0]]))
      res=arg[:]
      ref=Data(numarray.array([[0.0, 1.0, 2.0, 3.0], [4.0, 5.0, 6.0, 7.0], [8.0, 9.0, 10.0, 11.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-0.0, -1.0, -2.0, -3.0], [-4.0, -5.0, -6.0, -7.0], [-8.0, -9.0, -10.0, -11.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 4),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank2_PN(self):
      arg=Data(numarray.array([[0.0, 1.0, 2.0, 3.0], [4.0, 5.0, 6.0, 7.0], [8.0, 9.0, 10.0, 11.0]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[-0.0, -1.0, -2.0, -3.0], [-4.0, -5.0, -6.0, -7.0], [-8.0, -9.0, -10.0, -11.0]]))
      res=arg[1]
      ref=Data(numarray.array([4.0, 5.0, 6.0, 7.0]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([-4.0, -5.0, -6.0, -7.0]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4,),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank2_PP(self):
      arg=Data(numarray.array([[0.0, 1.0, 2.0, 3.0], [4.0, 5.0, 6.0, 7.0], [8.0, 9.0, 10.0, 11.0]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[-0.0, -1.0, -2.0, -3.0], [-4.0, -5.0, -6.0, -7.0], [-8.0, -9.0, -10.0, -11.0]]))
      res=arg[1,2]
      ref=Data(6.0,self.functionspace)
      ref.setTaggedValue(1,-6.0)
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank2_LN(self):
      arg=Data(numarray.array([[0.0, 1.0, 2.0, 3.0], [4.0, 5.0, 6.0, 7.0], [8.0, 9.0, 10.0, 11.0]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[-0.0, -1.0, -2.0, -3.0], [-4.0, -5.0, -6.0, -7.0], [-8.0, -9.0, -10.0, -11.0]]))
      res=arg[2:]
      ref=Data(numarray.array([[8.0, 9.0, 10.0, 11.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-8.0, -9.0, -10.0, -11.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 4),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_URP(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[:2,1:3,1]
      ref=Data(numarray.array([[4.0, 7.0], [16.0, 19.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-4.0, -7.0], [-16.0, -19.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 2),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_LCN(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[2:,:]
      ref=Data(numarray.array([[[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 4, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_LCR(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[2:,:,1:2]
      ref=Data(numarray.array([[[25.0], [28.0], [31.0], [34.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-25.0], [-28.0], [-31.0], [-34.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 4, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_URU(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[:2,1:3,:2]
      ref=Data(numarray.array([[[3.0, 4.0], [6.0, 7.0]], [[15.0, 16.0], [18.0, 19.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-3.0, -4.0], [-6.0, -7.0]], [[-15.0, -16.0], [-18.0, -19.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 2, 2),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_RCR(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[1:2,:,1:2]
      ref=Data(numarray.array([[[13.0], [16.0], [19.0], [22.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-13.0], [-16.0], [-19.0], [-22.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 4, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_UCP(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[:2,:,1]
      ref=Data(numarray.array([[1.0, 4.0, 7.0, 10.0], [13.0, 16.0, 19.0, 22.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-1.0, -4.0, -7.0, -10.0], [-13.0, -16.0, -19.0, -22.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 4),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_LLN(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[2:,2:]
      ref=Data(numarray.array([[[30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 2, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_RPP(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[1:2,2,1]
      ref=Data(numarray.array([19.0]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([-19.0]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1,),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_LPL(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[2:,2,2:]
      ref=Data(numarray.array([[32.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-32.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_CCR(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[:,:,1:2]
      ref=Data(numarray.array([[[1.0], [4.0], [7.0], [10.0]], [[13.0], [16.0], [19.0], [22.0]], [[25.0], [28.0], [31.0], [34.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-1.0], [-4.0], [-7.0], [-10.0]], [[-13.0], [-16.0], [-19.0], [-22.0]], [[-25.0], [-28.0], [-31.0], [-34.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 4, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_LUL(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[2:,:3,2:]
      ref=Data(numarray.array([[[26.0], [29.0], [32.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-26.0], [-29.0], [-32.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 3, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_PPU(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[1,2,:2]
      ref=Data(numarray.array([18.0, 19.0]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([-18.0, -19.0]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2,),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_LCP(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[2:,:,1]
      ref=Data(numarray.array([[25.0, 28.0, 31.0, 34.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-25.0, -28.0, -31.0, -34.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 4),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_RUR(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[1:2,:3,1:2]
      ref=Data(numarray.array([[[13.0], [16.0], [19.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-13.0], [-16.0], [-19.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 3, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_CUC(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[:,:3,:]
      ref=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_LRU(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[2:,1:3,:2]
      ref=Data(numarray.array([[[27.0, 28.0], [30.0, 31.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-27.0, -28.0], [-30.0, -31.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 2, 2),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_LRR(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[2:,1:3,1:2]
      ref=Data(numarray.array([[[28.0], [31.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-28.0], [-31.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 2, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_UUN(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[:2,:3]
      ref=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_CUL(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[:,:3,2:]
      ref=Data(numarray.array([[[2.0], [5.0], [8.0]], [[14.0], [17.0], [20.0]], [[26.0], [29.0], [32.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-2.0], [-5.0], [-8.0]], [[-14.0], [-17.0], [-20.0]], [[-26.0], [-29.0], [-32.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 3, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_LUP(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[2:,:3,1]
      ref=Data(numarray.array([[25.0, 28.0, 31.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-25.0, -28.0, -31.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_CCL(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[:,:,2:]
      ref=Data(numarray.array([[[2.0], [5.0], [8.0], [11.0]], [[14.0], [17.0], [20.0], [23.0]], [[26.0], [29.0], [32.0], [35.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-2.0], [-5.0], [-8.0], [-11.0]], [[-14.0], [-17.0], [-20.0], [-23.0]], [[-26.0], [-29.0], [-32.0], [-35.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 4, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_UCR(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[:2,:,1:2]
      ref=Data(numarray.array([[[1.0], [4.0], [7.0], [10.0]], [[13.0], [16.0], [19.0], [22.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-1.0], [-4.0], [-7.0], [-10.0]], [[-13.0], [-16.0], [-19.0], [-22.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 4, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_LCU(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[2:,:,:2]
      ref=Data(numarray.array([[[24.0, 25.0], [27.0, 28.0], [30.0, 31.0], [33.0, 34.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-24.0, -25.0], [-27.0, -28.0], [-30.0, -31.0], [-33.0, -34.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 4, 2),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_CCP(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[:,:,1]
      ref=Data(numarray.array([[1.0, 4.0, 7.0, 10.0], [13.0, 16.0, 19.0, 22.0], [25.0, 28.0, 31.0, 34.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-1.0, -4.0, -7.0, -10.0], [-13.0, -16.0, -19.0, -22.0], [-25.0, -28.0, -31.0, -34.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 4),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_LPP(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[2:,2,1]
      ref=Data(numarray.array([31.0]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([-31.0]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1,),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_ULN(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[:2,2:]
      ref=Data(numarray.array([[[6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[18.0, 19.0, 20.0], [21.0, 22.0, 23.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 2, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_PPN(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[1,2]
      ref=Data(numarray.array([18.0, 19.0, 20.0]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([-18.0, -19.0, -20.0]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3,),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_CCN(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[:,:]
      ref=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 4, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_RLP(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[1:2,2:,1]
      ref=Data(numarray.array([[19.0, 22.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-19.0, -22.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 2),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_PLU(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[1,2:,:2]
      ref=Data(numarray.array([[18.0, 19.0], [21.0, 22.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-18.0, -19.0], [-21.0, -22.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 2),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_RUC(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[1:2,:3,:]
      ref=Data(numarray.array([[[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_PPP(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[1,2,1]
      ref=Data(19.0,self.functionspace)
      ref.setTaggedValue(1,-19.0)
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_CUU(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[:,:3,:2]
      ref=Data(numarray.array([[[0.0, 1.0], [3.0, 4.0], [6.0, 7.0]], [[12.0, 13.0], [15.0, 16.0], [18.0, 19.0]], [[24.0, 25.0], [27.0, 28.0], [30.0, 31.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-0.0, -1.0], [-3.0, -4.0], [-6.0, -7.0]], [[-12.0, -13.0], [-15.0, -16.0], [-18.0, -19.0]], [[-24.0, -25.0], [-27.0, -28.0], [-30.0, -31.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 3, 2),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_LUN(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[2:,:3]
      ref=Data(numarray.array([[[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_LLC(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[2:,2:,:]
      ref=Data(numarray.array([[[30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 2, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_UUL(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[:2,:3,2:]
      ref=Data(numarray.array([[[2.0], [5.0], [8.0]], [[14.0], [17.0], [20.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-2.0], [-5.0], [-8.0]], [[-14.0], [-17.0], [-20.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 3, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_LPN(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[2:,2]
      ref=Data(numarray.array([[30.0, 31.0, 32.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-30.0, -31.0, -32.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_RPN(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[1:2,2]
      ref=Data(numarray.array([[18.0, 19.0, 20.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-18.0, -19.0, -20.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_RCP(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[1:2,:,1]
      ref=Data(numarray.array([[13.0, 16.0, 19.0, 22.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-13.0, -16.0, -19.0, -22.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 4),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_UCN(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[:2,:]
      ref=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 4, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_LRL(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[2:,1:3,2:]
      ref=Data(numarray.array([[[29.0], [32.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-29.0], [-32.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 2, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_PUR(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[1,:3,1:2]
      ref=Data(numarray.array([[13.0], [16.0], [19.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-13.0], [-16.0], [-19.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_RLC(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[1:2,2:,:]
      ref=Data(numarray.array([[[18.0, 19.0, 20.0], [21.0, 22.0, 23.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 2, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_PRC(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[1,1:3,:]
      ref=Data(numarray.array([[15.0, 16.0, 17.0], [18.0, 19.0, 20.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_CPN(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[:,2]
      ref=Data(numarray.array([[6.0, 7.0, 8.0], [18.0, 19.0, 20.0], [30.0, 31.0, 32.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-6.0, -7.0, -8.0], [-18.0, -19.0, -20.0], [-30.0, -31.0, -32.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_CLN(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[:,2:]
      ref=Data(numarray.array([[[6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 2, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_RRN(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[1:2,1:3]
      ref=Data(numarray.array([[[15.0, 16.0, 17.0], [18.0, 19.0, 20.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 2, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_CUN(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[:,:3]
      ref=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_UUP(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[:2,:3,1]
      ref=Data(numarray.array([[1.0, 4.0, 7.0], [13.0, 16.0, 19.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-1.0, -4.0, -7.0], [-13.0, -16.0, -19.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_URN(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[:2,1:3]
      ref=Data(numarray.array([[[3.0, 4.0, 5.0], [6.0, 7.0, 8.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 2, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_RRP(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[1:2,1:3,1]
      ref=Data(numarray.array([[16.0, 19.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-16.0, -19.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 2),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_PRN(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[1,1:3]
      ref=Data(numarray.array([[15.0, 16.0, 17.0], [18.0, 19.0, 20.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_RLN(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[1:2,2:]
      ref=Data(numarray.array([[[18.0, 19.0, 20.0], [21.0, 22.0, 23.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 2, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_PRL(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[1,1:3,2:]
      ref=Data(numarray.array([[17.0], [20.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-17.0], [-20.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_PLC(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[1,2:,:]
      ref=Data(numarray.array([[18.0, 19.0, 20.0], [21.0, 22.0, 23.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_UPN(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[:2,2]
      ref=Data(numarray.array([[6.0, 7.0, 8.0], [18.0, 19.0, 20.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-6.0, -7.0, -8.0], [-18.0, -19.0, -20.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_ULR(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[:2,2:,1:2]
      ref=Data(numarray.array([[[7.0], [10.0]], [[19.0], [22.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-7.0], [-10.0]], [[-19.0], [-22.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 2, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_PUC(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[1,:3,:]
      ref=Data(numarray.array([[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_CPP(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[:,2,1]
      ref=Data(numarray.array([7.0, 19.0, 31.0]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([-7.0, -19.0, -31.0]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3,),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_LRN(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[2:,1:3]
      ref=Data(numarray.array([[[27.0, 28.0, 29.0], [30.0, 31.0, 32.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 2, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_PCN(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[1,:]
      ref=Data(numarray.array([[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_RCN(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[1:2,:]
      ref=Data(numarray.array([[[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 4, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_RUN(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[1:2,:3]
      ref=Data(numarray.array([[[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_CRN(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[:,1:3]
      ref=Data(numarray.array([[[3.0, 4.0, 5.0], [6.0, 7.0, 8.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0]], [[27.0, 28.0, 29.0], [30.0, 31.0, 32.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0]], [[-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 2, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_PLN(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[1,2:]
      ref=Data(numarray.array([[18.0, 19.0, 20.0], [21.0, 22.0, 23.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank3_PUN(self):
      arg=Data(numarray.array([[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0]], [[24.0, 25.0, 26.0], [27.0, 28.0, 29.0], [30.0, 31.0, 32.0], [33.0, 34.0, 35.0]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0]], [[-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0], [-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0]]]))
      res=arg[1,:3]
      ref=Data(numarray.array([[12.0, 13.0, 14.0], [15.0, 16.0, 17.0], [18.0, 19.0, 20.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-12.0, -13.0, -14.0], [-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_UCCL(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:3,:,:,2:]
      ref=Data(numarray.array([[[[2.0], [5.0], [8.0], [11.0], [14.0]], [[17.0], [20.0], [23.0], [26.0], [29.0]], [[32.0], [35.0], [38.0], [41.0], [44.0]]], [[[47.0], [50.0], [53.0], [56.0], [59.0]], [[62.0], [65.0], [68.0], [71.0], [74.0]], [[77.0], [80.0], [83.0], [86.0], [89.0]]], [[[92.0], [95.0], [98.0], [101.0], [104.0]], [[107.0], [110.0], [113.0], [116.0], [119.0]], [[122.0], [125.0], [128.0], [131.0], [134.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-2.0], [-5.0], [-8.0], [-11.0], [-14.0]], [[-17.0], [-20.0], [-23.0], [-26.0], [-29.0]], [[-32.0], [-35.0], [-38.0], [-41.0], [-44.0]]], [[[-47.0], [-50.0], [-53.0], [-56.0], [-59.0]], [[-62.0], [-65.0], [-68.0], [-71.0], [-74.0]], [[-77.0], [-80.0], [-83.0], [-86.0], [-89.0]]], [[[-92.0], [-95.0], [-98.0], [-101.0], [-104.0]], [[-107.0], [-110.0], [-113.0], [-116.0], [-119.0]], [[-122.0], [-125.0], [-128.0], [-131.0], [-134.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 3, 5, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_LPCU(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2:,1,:,:2]
      ref=Data(numarray.array([[[105.0, 106.0], [108.0, 109.0], [111.0, 112.0], [114.0, 115.0], [117.0, 118.0]], [[150.0, 151.0], [153.0, 154.0], [156.0, 157.0], [159.0, 160.0], [162.0, 163.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-105.0, -106.0], [-108.0, -109.0], [-111.0, -112.0], [-114.0, -115.0], [-117.0, -118.0]], [[-150.0, -151.0], [-153.0, -154.0], [-156.0, -157.0], [-159.0, -160.0], [-162.0, -163.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 5, 2),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_URCR(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:3,1:2,:,1:2]
      ref=Data(numarray.array([[[[16.0], [19.0], [22.0], [25.0], [28.0]]], [[[61.0], [64.0], [67.0], [70.0], [73.0]]], [[[106.0], [109.0], [112.0], [115.0], [118.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-16.0], [-19.0], [-22.0], [-25.0], [-28.0]]], [[[-61.0], [-64.0], [-67.0], [-70.0], [-73.0]]], [[[-106.0], [-109.0], [-112.0], [-115.0], [-118.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 1, 5, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_LRUU(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2:,1:2,:4,:2]
      ref=Data(numarray.array([[[[105.0, 106.0], [108.0, 109.0], [111.0, 112.0], [114.0, 115.0]]], [[[150.0, 151.0], [153.0, 154.0], [156.0, 157.0], [159.0, 160.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-105.0, -106.0], [-108.0, -109.0], [-111.0, -112.0], [-114.0, -115.0]]], [[[-150.0, -151.0], [-153.0, -154.0], [-156.0, -157.0], [-159.0, -160.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 1, 4, 2),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_CUUL(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:,:2,:4,2:]
      ref=Data(numarray.array([[[[2.0], [5.0], [8.0], [11.0]], [[17.0], [20.0], [23.0], [26.0]]], [[[47.0], [50.0], [53.0], [56.0]], [[62.0], [65.0], [68.0], [71.0]]], [[[92.0], [95.0], [98.0], [101.0]], [[107.0], [110.0], [113.0], [116.0]]], [[[137.0], [140.0], [143.0], [146.0]], [[152.0], [155.0], [158.0], [161.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-2.0], [-5.0], [-8.0], [-11.0]], [[-17.0], [-20.0], [-23.0], [-26.0]]], [[[-47.0], [-50.0], [-53.0], [-56.0]], [[-62.0], [-65.0], [-68.0], [-71.0]]], [[[-92.0], [-95.0], [-98.0], [-101.0]], [[-107.0], [-110.0], [-113.0], [-116.0]]], [[[-137.0], [-140.0], [-143.0], [-146.0]], [[-152.0], [-155.0], [-158.0], [-161.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 2, 4, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_CCPC(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:,:,2,:]
      ref=Data(numarray.array([[[6.0, 7.0, 8.0], [21.0, 22.0, 23.0], [36.0, 37.0, 38.0]], [[51.0, 52.0, 53.0], [66.0, 67.0, 68.0], [81.0, 82.0, 83.0]], [[96.0, 97.0, 98.0], [111.0, 112.0, 113.0], [126.0, 127.0, 128.0]], [[141.0, 142.0, 143.0], [156.0, 157.0, 158.0], [171.0, 172.0, 173.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-6.0, -7.0, -8.0], [-21.0, -22.0, -23.0], [-36.0, -37.0, -38.0]], [[-51.0, -52.0, -53.0], [-66.0, -67.0, -68.0], [-81.0, -82.0, -83.0]], [[-96.0, -97.0, -98.0], [-111.0, -112.0, -113.0], [-126.0, -127.0, -128.0]], [[-141.0, -142.0, -143.0], [-156.0, -157.0, -158.0], [-171.0, -172.0, -173.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_RLCP(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[1:3,2:,:,1]
      ref=Data(numarray.array([[[76.0, 79.0, 82.0, 85.0, 88.0]], [[121.0, 124.0, 127.0, 130.0, 133.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-76.0, -79.0, -82.0, -85.0, -88.0]], [[-121.0, -124.0, -127.0, -130.0, -133.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 1, 5),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_LRRC(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2:,1:2,1:4,:]
      ref=Data(numarray.array([[[[108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]]], [[[153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]]], [[[-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 1, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_LLCP(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2:,2:,:,1]
      ref=Data(numarray.array([[[121.0, 124.0, 127.0, 130.0, 133.0]], [[166.0, 169.0, 172.0, 175.0, 178.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-121.0, -124.0, -127.0, -130.0, -133.0]], [[-166.0, -169.0, -172.0, -175.0, -178.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 1, 5),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PRCN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,1:2,:]
      ref=Data(numarray.array([[[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 5, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_RPRC(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[1:3,1,1:4,:]
      ref=Data(numarray.array([[[63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0]], [[108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0]], [[-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_ULCN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:3,2:,:]
      ref=Data(numarray.array([[[[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 1, 5, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_CLRN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:,2:,1:4]
      ref=Data(numarray.array([[[[33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0]]], [[[78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0]]], [[[123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0]]], [[[168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0]]], [[[-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0]]], [[[-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0]]], [[[-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 1, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_RRRL(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[1:3,1:2,1:4,2:]
      ref=Data(numarray.array([[[[65.0], [68.0], [71.0]]], [[[110.0], [113.0], [116.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-65.0], [-68.0], [-71.0]]], [[[-110.0], [-113.0], [-116.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 1, 3, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PLPL(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,2:,2,2:]
      ref=Data(numarray.array([[128.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-128.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_LLPN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2:,2:,2]
      ref=Data(numarray.array([[[126.0, 127.0, 128.0]], [[171.0, 172.0, 173.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-126.0, -127.0, -128.0]], [[-171.0, -172.0, -173.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 1, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PCRC(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,:,1:4,:]
      ref=Data(numarray.array([[[93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0]], [[108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]], [[123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0]], [[-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]], [[-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_CPRP(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:,1,1:4,1]
      ref=Data(numarray.array([[19.0, 22.0, 25.0], [64.0, 67.0, 70.0], [109.0, 112.0, 115.0], [154.0, 157.0, 160.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-19.0, -22.0, -25.0], [-64.0, -67.0, -70.0], [-109.0, -112.0, -115.0], [-154.0, -157.0, -160.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_CUPU(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:,:2,2,:2]
      ref=Data(numarray.array([[[6.0, 7.0], [21.0, 22.0]], [[51.0, 52.0], [66.0, 67.0]], [[96.0, 97.0], [111.0, 112.0]], [[141.0, 142.0], [156.0, 157.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-6.0, -7.0], [-21.0, -22.0]], [[-51.0, -52.0], [-66.0, -67.0]], [[-96.0, -97.0], [-111.0, -112.0]], [[-141.0, -142.0], [-156.0, -157.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 2, 2),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_UUUL(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:3,:2,:4,2:]
      ref=Data(numarray.array([[[[2.0], [5.0], [8.0], [11.0]], [[17.0], [20.0], [23.0], [26.0]]], [[[47.0], [50.0], [53.0], [56.0]], [[62.0], [65.0], [68.0], [71.0]]], [[[92.0], [95.0], [98.0], [101.0]], [[107.0], [110.0], [113.0], [116.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-2.0], [-5.0], [-8.0], [-11.0]], [[-17.0], [-20.0], [-23.0], [-26.0]]], [[[-47.0], [-50.0], [-53.0], [-56.0]], [[-62.0], [-65.0], [-68.0], [-71.0]]], [[[-92.0], [-95.0], [-98.0], [-101.0]], [[-107.0], [-110.0], [-113.0], [-116.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 2, 4, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_RUUC(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[1:3,:2,:4,:]
      ref=Data(numarray.array([[[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 2, 4, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_CCLL(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:,:,2:,2:]
      ref=Data(numarray.array([[[[8.0], [11.0], [14.0]], [[23.0], [26.0], [29.0]], [[38.0], [41.0], [44.0]]], [[[53.0], [56.0], [59.0]], [[68.0], [71.0], [74.0]], [[83.0], [86.0], [89.0]]], [[[98.0], [101.0], [104.0]], [[113.0], [116.0], [119.0]], [[128.0], [131.0], [134.0]]], [[[143.0], [146.0], [149.0]], [[158.0], [161.0], [164.0]], [[173.0], [176.0], [179.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-8.0], [-11.0], [-14.0]], [[-23.0], [-26.0], [-29.0]], [[-38.0], [-41.0], [-44.0]]], [[[-53.0], [-56.0], [-59.0]], [[-68.0], [-71.0], [-74.0]], [[-83.0], [-86.0], [-89.0]]], [[[-98.0], [-101.0], [-104.0]], [[-113.0], [-116.0], [-119.0]], [[-128.0], [-131.0], [-134.0]]], [[[-143.0], [-146.0], [-149.0]], [[-158.0], [-161.0], [-164.0]], [[-173.0], [-176.0], [-179.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 3, 3, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_LRLC(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2:,1:2,2:,:]
      ref=Data(numarray.array([[[[111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]]], [[[156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]]], [[[-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 1, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_RRLN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[1:3,1:2,2:]
      ref=Data(numarray.array([[[[66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]]], [[[111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]]], [[[-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 1, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PLUU(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,2:,:4,:2]
      ref=Data(numarray.array([[[120.0, 121.0], [123.0, 124.0], [126.0, 127.0], [129.0, 130.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-120.0, -121.0], [-123.0, -124.0], [-126.0, -127.0], [-129.0, -130.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 4, 2),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PPUR(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,1,:4,1:2]
      ref=Data(numarray.array([[106.0], [109.0], [112.0], [115.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-106.0], [-109.0], [-112.0], [-115.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_CRCU(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:,1:2,:,:2]
      ref=Data(numarray.array([[[[15.0, 16.0], [18.0, 19.0], [21.0, 22.0], [24.0, 25.0], [27.0, 28.0]]], [[[60.0, 61.0], [63.0, 64.0], [66.0, 67.0], [69.0, 70.0], [72.0, 73.0]]], [[[105.0, 106.0], [108.0, 109.0], [111.0, 112.0], [114.0, 115.0], [117.0, 118.0]]], [[[150.0, 151.0], [153.0, 154.0], [156.0, 157.0], [159.0, 160.0], [162.0, 163.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-15.0, -16.0], [-18.0, -19.0], [-21.0, -22.0], [-24.0, -25.0], [-27.0, -28.0]]], [[[-60.0, -61.0], [-63.0, -64.0], [-66.0, -67.0], [-69.0, -70.0], [-72.0, -73.0]]], [[[-105.0, -106.0], [-108.0, -109.0], [-111.0, -112.0], [-114.0, -115.0], [-117.0, -118.0]]], [[[-150.0, -151.0], [-153.0, -154.0], [-156.0, -157.0], [-159.0, -160.0], [-162.0, -163.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 1, 5, 2),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_RUPL(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[1:3,:2,2,2:]
      ref=Data(numarray.array([[[53.0], [68.0]], [[98.0], [113.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-53.0], [-68.0]], [[-98.0], [-113.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 2, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PLPU(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,2:,2,:2]
      ref=Data(numarray.array([[126.0, 127.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-126.0, -127.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 2),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PLRL(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,2:,1:4,2:]
      ref=Data(numarray.array([[[125.0], [128.0], [131.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-125.0], [-128.0], [-131.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 3, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_RPPN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[1:3,1,2]
      ref=Data(numarray.array([[66.0, 67.0, 68.0], [111.0, 112.0, 113.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-66.0, -67.0, -68.0], [-111.0, -112.0, -113.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_UPCN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:3,1,:]
      ref=Data(numarray.array([[[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 5, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_LLUN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2:,2:,:4]
      ref=Data(numarray.array([[[[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0]]], [[[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0]]], [[[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 1, 4, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PPLC(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,1,2:,:]
      ref=Data(numarray.array([[111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PRRP(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,1:2,1:4,1]
      ref=Data(numarray.array([[109.0, 112.0, 115.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-109.0, -112.0, -115.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PPPC(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,1,2,:]
      ref=Data(numarray.array([111.0, 112.0, 113.0]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([-111.0, -112.0, -113.0]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3,),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_RURL(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[1:3,:2,1:4,2:]
      ref=Data(numarray.array([[[[50.0], [53.0], [56.0]], [[65.0], [68.0], [71.0]]], [[[95.0], [98.0], [101.0]], [[110.0], [113.0], [116.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-50.0], [-53.0], [-56.0]], [[-65.0], [-68.0], [-71.0]]], [[[-95.0], [-98.0], [-101.0]], [[-110.0], [-113.0], [-116.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 2, 3, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PUUR(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,:2,:4,1:2]
      ref=Data(numarray.array([[[91.0], [94.0], [97.0], [100.0]], [[106.0], [109.0], [112.0], [115.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-91.0], [-94.0], [-97.0], [-100.0]], [[-106.0], [-109.0], [-112.0], [-115.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 4, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_RUCL(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[1:3,:2,:,2:]
      ref=Data(numarray.array([[[[47.0], [50.0], [53.0], [56.0], [59.0]], [[62.0], [65.0], [68.0], [71.0], [74.0]]], [[[92.0], [95.0], [98.0], [101.0], [104.0]], [[107.0], [110.0], [113.0], [116.0], [119.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-47.0], [-50.0], [-53.0], [-56.0], [-59.0]], [[-62.0], [-65.0], [-68.0], [-71.0], [-74.0]]], [[[-92.0], [-95.0], [-98.0], [-101.0], [-104.0]], [[-107.0], [-110.0], [-113.0], [-116.0], [-119.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 2, 5, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_CCPP(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:,:,2,1]
      ref=Data(numarray.array([[7.0, 22.0, 37.0], [52.0, 67.0, 82.0], [97.0, 112.0, 127.0], [142.0, 157.0, 172.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-7.0, -22.0, -37.0], [-52.0, -67.0, -82.0], [-97.0, -112.0, -127.0], [-142.0, -157.0, -172.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_RRPL(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[1:3,1:2,2,2:]
      ref=Data(numarray.array([[[68.0]], [[113.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-68.0]], [[-113.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 1, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_LULP(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2:,:2,2:,1]
      ref=Data(numarray.array([[[97.0, 100.0, 103.0], [112.0, 115.0, 118.0]], [[142.0, 145.0, 148.0], [157.0, 160.0, 163.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-97.0, -100.0, -103.0], [-112.0, -115.0, -118.0]], [[-142.0, -145.0, -148.0], [-157.0, -160.0, -163.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 2, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PLLL(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,2:,2:,2:]
      ref=Data(numarray.array([[[128.0], [131.0], [134.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-128.0], [-131.0], [-134.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 3, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PPPR(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,1,2,1:2]
      ref=Data(numarray.array([112.0]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([-112.0]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1,),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_LRCN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2:,1:2,:]
      ref=Data(numarray.array([[[[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]]], [[[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]]], [[[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 1, 5, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_CCUC(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:,:,:4,:]
      ref=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 3, 4, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_LRLL(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2:,1:2,2:,2:]
      ref=Data(numarray.array([[[[113.0], [116.0], [119.0]]], [[[158.0], [161.0], [164.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-113.0], [-116.0], [-119.0]]], [[[-158.0], [-161.0], [-164.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 1, 3, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_CRRR(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:,1:2,1:4,1:2]
      ref=Data(numarray.array([[[[19.0], [22.0], [25.0]]], [[[64.0], [67.0], [70.0]]], [[[109.0], [112.0], [115.0]]], [[[154.0], [157.0], [160.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-19.0], [-22.0], [-25.0]]], [[[-64.0], [-67.0], [-70.0]]], [[[-109.0], [-112.0], [-115.0]]], [[[-154.0], [-157.0], [-160.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 1, 3, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_CRCR(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:,1:2,:,1:2]
      ref=Data(numarray.array([[[[16.0], [19.0], [22.0], [25.0], [28.0]]], [[[61.0], [64.0], [67.0], [70.0], [73.0]]], [[[106.0], [109.0], [112.0], [115.0], [118.0]]], [[[151.0], [154.0], [157.0], [160.0], [163.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-16.0], [-19.0], [-22.0], [-25.0], [-28.0]]], [[[-61.0], [-64.0], [-67.0], [-70.0], [-73.0]]], [[[-106.0], [-109.0], [-112.0], [-115.0], [-118.0]]], [[[-151.0], [-154.0], [-157.0], [-160.0], [-163.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 1, 5, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_RCRN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[1:3,:,1:4]
      ref=Data(numarray.array([[[[48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0]], [[63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0]], [[78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0]]], [[[93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0]], [[108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]], [[123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0]], [[-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0]], [[-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0]]], [[[-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0]], [[-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]], [[-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 3, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PUCP(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,:2,:,1]
      ref=Data(numarray.array([[91.0, 94.0, 97.0, 100.0, 103.0], [106.0, 109.0, 112.0, 115.0, 118.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-91.0, -94.0, -97.0, -100.0, -103.0], [-106.0, -109.0, -112.0, -115.0, -118.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 5),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_CUUN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:,:2,:4]
      ref=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 2, 4, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_RPCN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[1:3,1,:]
      ref=Data(numarray.array([[[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 5, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_LPRP(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2:,1,1:4,1]
      ref=Data(numarray.array([[109.0, 112.0, 115.0], [154.0, 157.0, 160.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-109.0, -112.0, -115.0], [-154.0, -157.0, -160.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PLUN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,2:,:4]
      ref=Data(numarray.array([[[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 4, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_UCPN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:3,:,2]
      ref=Data(numarray.array([[[6.0, 7.0, 8.0], [21.0, 22.0, 23.0], [36.0, 37.0, 38.0]], [[51.0, 52.0, 53.0], [66.0, 67.0, 68.0], [81.0, 82.0, 83.0]], [[96.0, 97.0, 98.0], [111.0, 112.0, 113.0], [126.0, 127.0, 128.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-6.0, -7.0, -8.0], [-21.0, -22.0, -23.0], [-36.0, -37.0, -38.0]], [[-51.0, -52.0, -53.0], [-66.0, -67.0, -68.0], [-81.0, -82.0, -83.0]], [[-96.0, -97.0, -98.0], [-111.0, -112.0, -113.0], [-126.0, -127.0, -128.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_URCN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:3,1:2,:]
      ref=Data(numarray.array([[[[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]]], [[[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]]], [[[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]]], [[[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]]], [[[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 1, 5, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PCCL(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,:,:,2:]
      ref=Data(numarray.array([[[92.0], [95.0], [98.0], [101.0], [104.0]], [[107.0], [110.0], [113.0], [116.0], [119.0]], [[122.0], [125.0], [128.0], [131.0], [134.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-92.0], [-95.0], [-98.0], [-101.0], [-104.0]], [[-107.0], [-110.0], [-113.0], [-116.0], [-119.0]], [[-122.0], [-125.0], [-128.0], [-131.0], [-134.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 5, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_RUUN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[1:3,:2,:4]
      ref=Data(numarray.array([[[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 2, 4, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_LLRU(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2:,2:,1:4,:2]
      ref=Data(numarray.array([[[[123.0, 124.0], [126.0, 127.0], [129.0, 130.0]]], [[[168.0, 169.0], [171.0, 172.0], [174.0, 175.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-123.0, -124.0], [-126.0, -127.0], [-129.0, -130.0]]], [[[-168.0, -169.0], [-171.0, -172.0], [-174.0, -175.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 1, 3, 2),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_URUU(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:3,1:2,:4,:2]
      ref=Data(numarray.array([[[[15.0, 16.0], [18.0, 19.0], [21.0, 22.0], [24.0, 25.0]]], [[[60.0, 61.0], [63.0, 64.0], [66.0, 67.0], [69.0, 70.0]]], [[[105.0, 106.0], [108.0, 109.0], [111.0, 112.0], [114.0, 115.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-15.0, -16.0], [-18.0, -19.0], [-21.0, -22.0], [-24.0, -25.0]]], [[[-60.0, -61.0], [-63.0, -64.0], [-66.0, -67.0], [-69.0, -70.0]]], [[[-105.0, -106.0], [-108.0, -109.0], [-111.0, -112.0], [-114.0, -115.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 1, 4, 2),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PPUN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,1,:4]
      ref=Data(numarray.array([[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_UUUP(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:3,:2,:4,1]
      ref=Data(numarray.array([[[1.0, 4.0, 7.0, 10.0], [16.0, 19.0, 22.0, 25.0]], [[46.0, 49.0, 52.0, 55.0], [61.0, 64.0, 67.0, 70.0]], [[91.0, 94.0, 97.0, 100.0], [106.0, 109.0, 112.0, 115.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-1.0, -4.0, -7.0, -10.0], [-16.0, -19.0, -22.0, -25.0]], [[-46.0, -49.0, -52.0, -55.0], [-61.0, -64.0, -67.0, -70.0]], [[-91.0, -94.0, -97.0, -100.0], [-106.0, -109.0, -112.0, -115.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 2, 4),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_LPUN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2:,1,:4]
      ref=Data(numarray.array([[[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 4, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_RUPN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[1:3,:2,2]
      ref=Data(numarray.array([[[51.0, 52.0, 53.0], [66.0, 67.0, 68.0]], [[96.0, 97.0, 98.0], [111.0, 112.0, 113.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-51.0, -52.0, -53.0], [-66.0, -67.0, -68.0]], [[-96.0, -97.0, -98.0], [-111.0, -112.0, -113.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 2, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_RCPN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[1:3,:,2]
      ref=Data(numarray.array([[[51.0, 52.0, 53.0], [66.0, 67.0, 68.0], [81.0, 82.0, 83.0]], [[96.0, 97.0, 98.0], [111.0, 112.0, 113.0], [126.0, 127.0, 128.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-51.0, -52.0, -53.0], [-66.0, -67.0, -68.0], [-81.0, -82.0, -83.0]], [[-96.0, -97.0, -98.0], [-111.0, -112.0, -113.0], [-126.0, -127.0, -128.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_RRRR(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[1:3,1:2,1:4,1:2]
      ref=Data(numarray.array([[[[64.0], [67.0], [70.0]]], [[[109.0], [112.0], [115.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-64.0], [-67.0], [-70.0]]], [[[-109.0], [-112.0], [-115.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 1, 3, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_ULUL(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:3,2:,:4,2:]
      ref=Data(numarray.array([[[[32.0], [35.0], [38.0], [41.0]]], [[[77.0], [80.0], [83.0], [86.0]]], [[[122.0], [125.0], [128.0], [131.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-32.0], [-35.0], [-38.0], [-41.0]]], [[[-77.0], [-80.0], [-83.0], [-86.0]]], [[[-122.0], [-125.0], [-128.0], [-131.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 1, 4, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_ULCL(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:3,2:,:,2:]
      ref=Data(numarray.array([[[[32.0], [35.0], [38.0], [41.0], [44.0]]], [[[77.0], [80.0], [83.0], [86.0], [89.0]]], [[[122.0], [125.0], [128.0], [131.0], [134.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-32.0], [-35.0], [-38.0], [-41.0], [-44.0]]], [[[-77.0], [-80.0], [-83.0], [-86.0], [-89.0]]], [[[-122.0], [-125.0], [-128.0], [-131.0], [-134.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 1, 5, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_RRCN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[1:3,1:2,:]
      ref=Data(numarray.array([[[[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]]], [[[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]]], [[[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 1, 5, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_CCLC(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:,:,2:,:]
      ref=Data(numarray.array([[[[6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 3, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_CUPN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:,:2,2]
      ref=Data(numarray.array([[[6.0, 7.0, 8.0], [21.0, 22.0, 23.0]], [[51.0, 52.0, 53.0], [66.0, 67.0, 68.0]], [[96.0, 97.0, 98.0], [111.0, 112.0, 113.0]], [[141.0, 142.0, 143.0], [156.0, 157.0, 158.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-6.0, -7.0, -8.0], [-21.0, -22.0, -23.0]], [[-51.0, -52.0, -53.0], [-66.0, -67.0, -68.0]], [[-96.0, -97.0, -98.0], [-111.0, -112.0, -113.0]], [[-141.0, -142.0, -143.0], [-156.0, -157.0, -158.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 2, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_ULLN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:3,2:,2:]
      ref=Data(numarray.array([[[[36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 1, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_UUCN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:3,:2,:]
      ref=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 2, 5, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_LLLC(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2:,2:,2:,:]
      ref=Data(numarray.array([[[[126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 1, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_RPLN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[1:3,1,2:]
      ref=Data(numarray.array([[[66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PUCC(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,:2,:,:]
      ref=Data(numarray.array([[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 5, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_UCRN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:3,:,1:4]
      ref=Data(numarray.array([[[[3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0]], [[33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0]]], [[[48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0]], [[63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0]], [[78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0]]], [[[93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0]], [[108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]], [[123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0]], [[-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0]]], [[[-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0]], [[-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0]], [[-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0]]], [[[-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0]], [[-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]], [[-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 3, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_CLRC(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:,2:,1:4,:]
      ref=Data(numarray.array([[[[33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0]]], [[[78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0]]], [[[123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0]]], [[[168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0]]], [[[-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0]]], [[[-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0]]], [[[-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 1, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_LUPN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2:,:2,2]
      ref=Data(numarray.array([[[96.0, 97.0, 98.0], [111.0, 112.0, 113.0]], [[141.0, 142.0, 143.0], [156.0, 157.0, 158.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-96.0, -97.0, -98.0], [-111.0, -112.0, -113.0]], [[-141.0, -142.0, -143.0], [-156.0, -157.0, -158.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 2, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PPPU(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,1,2,:2]
      ref=Data(numarray.array([111.0, 112.0]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([-111.0, -112.0]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2,),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PRRU(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,1:2,1:4,:2]
      ref=Data(numarray.array([[[108.0, 109.0], [111.0, 112.0], [114.0, 115.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-108.0, -109.0], [-111.0, -112.0], [-114.0, -115.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 3, 2),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_ULUN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:3,2:,:4]
      ref=Data(numarray.array([[[[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0]]], [[[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0]]], [[[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0]]], [[[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0]]], [[[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 1, 4, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_LLRN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2:,2:,1:4]
      ref=Data(numarray.array([[[[123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0]]], [[[168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0]]], [[[-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 1, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_RPCU(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[1:3,1,:,:2]
      ref=Data(numarray.array([[[60.0, 61.0], [63.0, 64.0], [66.0, 67.0], [69.0, 70.0], [72.0, 73.0]], [[105.0, 106.0], [108.0, 109.0], [111.0, 112.0], [114.0, 115.0], [117.0, 118.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-60.0, -61.0], [-63.0, -64.0], [-66.0, -67.0], [-69.0, -70.0], [-72.0, -73.0]], [[-105.0, -106.0], [-108.0, -109.0], [-111.0, -112.0], [-114.0, -115.0], [-117.0, -118.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 5, 2),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PUPN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,:2,2]
      ref=Data(numarray.array([[96.0, 97.0, 98.0], [111.0, 112.0, 113.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-96.0, -97.0, -98.0], [-111.0, -112.0, -113.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_LRLN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2:,1:2,2:]
      ref=Data(numarray.array([[[[111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]]], [[[156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]]], [[[-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 1, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_LUCN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2:,:2,:]
      ref=Data(numarray.array([[[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 2, 5, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_UCUC(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:3,:,:4,:]
      ref=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 3, 4, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_CUCN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:,:2,:]
      ref=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 2, 5, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_CCLN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:,:,2:]
      ref=Data(numarray.array([[[[6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 3, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PLLN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,2:,2:]
      ref=Data(numarray.array([[[126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_RRLL(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[1:3,1:2,2:,2:]
      ref=Data(numarray.array([[[[68.0], [71.0], [74.0]]], [[[113.0], [116.0], [119.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-68.0], [-71.0], [-74.0]]], [[[-113.0], [-116.0], [-119.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 1, 3, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_UUUU(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:3,:2,:4,:2]
      ref=Data(numarray.array([[[[0.0, 1.0], [3.0, 4.0], [6.0, 7.0], [9.0, 10.0]], [[15.0, 16.0], [18.0, 19.0], [21.0, 22.0], [24.0, 25.0]]], [[[45.0, 46.0], [48.0, 49.0], [51.0, 52.0], [54.0, 55.0]], [[60.0, 61.0], [63.0, 64.0], [66.0, 67.0], [69.0, 70.0]]], [[[90.0, 91.0], [93.0, 94.0], [96.0, 97.0], [99.0, 100.0]], [[105.0, 106.0], [108.0, 109.0], [111.0, 112.0], [114.0, 115.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-0.0, -1.0], [-3.0, -4.0], [-6.0, -7.0], [-9.0, -10.0]], [[-15.0, -16.0], [-18.0, -19.0], [-21.0, -22.0], [-24.0, -25.0]]], [[[-45.0, -46.0], [-48.0, -49.0], [-51.0, -52.0], [-54.0, -55.0]], [[-60.0, -61.0], [-63.0, -64.0], [-66.0, -67.0], [-69.0, -70.0]]], [[[-90.0, -91.0], [-93.0, -94.0], [-96.0, -97.0], [-99.0, -100.0]], [[-105.0, -106.0], [-108.0, -109.0], [-111.0, -112.0], [-114.0, -115.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 2, 4, 2),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_UPUN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:3,1,:4]
      ref=Data(numarray.array([[[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 4, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_LCUN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2:,:,:4]
      ref=Data(numarray.array([[[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 3, 4, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_UPPU(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:3,1,2,:2]
      ref=Data(numarray.array([[21.0, 22.0], [66.0, 67.0], [111.0, 112.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-21.0, -22.0], [-66.0, -67.0], [-111.0, -112.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 2),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_LLUL(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2:,2:,:4,2:]
      ref=Data(numarray.array([[[[122.0], [125.0], [128.0], [131.0]]], [[[167.0], [170.0], [173.0], [176.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-122.0], [-125.0], [-128.0], [-131.0]]], [[[-167.0], [-170.0], [-173.0], [-176.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 1, 4, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_RLLN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[1:3,2:,2:]
      ref=Data(numarray.array([[[[81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 1, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_CLUN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:,2:,:4]
      ref=Data(numarray.array([[[[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0]]], [[[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0]]], [[[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0]]], [[[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0]]], [[[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0]]], [[[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0]]], [[[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 1, 4, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PCPN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,:,2]
      ref=Data(numarray.array([[96.0, 97.0, 98.0], [111.0, 112.0, 113.0], [126.0, 127.0, 128.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-96.0, -97.0, -98.0], [-111.0, -112.0, -113.0], [-126.0, -127.0, -128.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_LLCN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2:,2:,:]
      ref=Data(numarray.array([[[[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 1, 5, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_UUUC(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:3,:2,:4,:]
      ref=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 2, 4, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_RRRP(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[1:3,1:2,1:4,1]
      ref=Data(numarray.array([[[64.0, 67.0, 70.0]], [[109.0, 112.0, 115.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-64.0, -67.0, -70.0]], [[-109.0, -112.0, -115.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 1, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_LURN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2:,:2,1:4]
      ref=Data(numarray.array([[[[93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0]], [[108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]]], [[[138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0]], [[153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0]], [[-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]]], [[[-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0]], [[-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 2, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_UUUN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:3,:2,:4]
      ref=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 2, 4, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PLCN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,2:,:]
      ref=Data(numarray.array([[[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 5, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_RCCN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[1:3,:,:]
      ref=Data(numarray.array([[[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 3, 5, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_LUUN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2:,:2,:4]
      ref=Data(numarray.array([[[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 2, 4, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_RLRN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[1:3,2:,1:4]
      ref=Data(numarray.array([[[[78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0]]], [[[123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0]]], [[[-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 1, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_RPUN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[1:3,1,:4]
      ref=Data(numarray.array([[[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 4, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_UURR(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:3,:2,1:4,1:2]
      ref=Data(numarray.array([[[[4.0], [7.0], [10.0]], [[19.0], [22.0], [25.0]]], [[[49.0], [52.0], [55.0]], [[64.0], [67.0], [70.0]]], [[[94.0], [97.0], [100.0]], [[109.0], [112.0], [115.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-4.0], [-7.0], [-10.0]], [[-19.0], [-22.0], [-25.0]]], [[[-49.0], [-52.0], [-55.0]], [[-64.0], [-67.0], [-70.0]]], [[[-94.0], [-97.0], [-100.0]], [[-109.0], [-112.0], [-115.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 2, 3, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_CCCN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:,:,:]
      ref=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 3, 5, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PPRN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,1,1:4]
      ref=Data(numarray.array([[108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PRUN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,1:2,:4]
      ref=Data(numarray.array([[[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 4, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_ULRN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:3,2:,1:4]
      ref=Data(numarray.array([[[[33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0]]], [[[78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0]]], [[[123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0]]], [[[-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0]]], [[[-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 1, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PCLN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,:,2:]
      ref=Data(numarray.array([[[96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_RRUN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[1:3,1:2,:4]
      ref=Data(numarray.array([[[[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0]]], [[[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0]]], [[[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 1, 4, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_LPPP(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2:,1,2,1]
      ref=Data(numarray.array([112.0, 157.0]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([-112.0, -157.0]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2,),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_LRUN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2:,1:2,:4]
      ref=Data(numarray.array([[[[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]]], [[[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]]], [[[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 1, 4, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_RRUR(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[1:3,1:2,:4,1:2]
      ref=Data(numarray.array([[[[61.0], [64.0], [67.0], [70.0]]], [[[106.0], [109.0], [112.0], [115.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-61.0], [-64.0], [-67.0], [-70.0]]], [[[-106.0], [-109.0], [-112.0], [-115.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 1, 4, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_CPRN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:,1,1:4]
      ref=Data(numarray.array([[[18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0]], [[63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0]], [[108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]], [[153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0]], [[-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0]], [[-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]], [[-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_RLUN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[1:3,2:,:4]
      ref=Data(numarray.array([[[[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0]]], [[[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0]]], [[[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 1, 4, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_UCCN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:3,:,:]
      ref=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 3, 5, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_CLCN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:,2:,:]
      ref=Data(numarray.array([[[[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 1, 5, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_CPLN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:,1,2:]
      ref=Data(numarray.array([[[21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_UULN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:3,:2,2:]
      ref=Data(numarray.array([[[[6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]]], [[[51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]]], [[[96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]]], [[[-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]]], [[[-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 2, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PLRN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,2:,1:4]
      ref=Data(numarray.array([[[123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_LCPN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2:,:,2]
      ref=Data(numarray.array([[[96.0, 97.0, 98.0], [111.0, 112.0, 113.0], [126.0, 127.0, 128.0]], [[141.0, 142.0, 143.0], [156.0, 157.0, 158.0], [171.0, 172.0, 173.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-96.0, -97.0, -98.0], [-111.0, -112.0, -113.0], [-126.0, -127.0, -128.0]], [[-141.0, -142.0, -143.0], [-156.0, -157.0, -158.0], [-171.0, -172.0, -173.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_CULN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:,:2,2:]
      ref=Data(numarray.array([[[[6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]]], [[[51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]]], [[[96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]]], [[[141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]]], [[[-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]]], [[[-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]]], [[[-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 2, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PRLN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,1:2,2:]
      ref=Data(numarray.array([[[111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_CPPN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:,1,2]
      ref=Data(numarray.array([[21.0, 22.0, 23.0], [66.0, 67.0, 68.0], [111.0, 112.0, 113.0], [156.0, 157.0, 158.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-21.0, -22.0, -23.0], [-66.0, -67.0, -68.0], [-111.0, -112.0, -113.0], [-156.0, -157.0, -158.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_RCUN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[1:3,:,:4]
      ref=Data(numarray.array([[[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 3, 4, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PLPN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,2:,2]
      ref=Data(numarray.array([[126.0, 127.0, 128.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-126.0, -127.0, -128.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_UCLN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:3,:,2:]
      ref=Data(numarray.array([[[[6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 3, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PCRN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,:,1:4]
      ref=Data(numarray.array([[[93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0]], [[108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]], [[123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0]], [[-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]], [[-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_CCPN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:,:,2]
      ref=Data(numarray.array([[[6.0, 7.0, 8.0], [21.0, 22.0, 23.0], [36.0, 37.0, 38.0]], [[51.0, 52.0, 53.0], [66.0, 67.0, 68.0], [81.0, 82.0, 83.0]], [[96.0, 97.0, 98.0], [111.0, 112.0, 113.0], [126.0, 127.0, 128.0]], [[141.0, 142.0, 143.0], [156.0, 157.0, 158.0], [171.0, 172.0, 173.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-6.0, -7.0, -8.0], [-21.0, -22.0, -23.0], [-36.0, -37.0, -38.0]], [[-51.0, -52.0, -53.0], [-66.0, -67.0, -68.0], [-81.0, -82.0, -83.0]], [[-96.0, -97.0, -98.0], [-111.0, -112.0, -113.0], [-126.0, -127.0, -128.0]], [[-141.0, -142.0, -143.0], [-156.0, -157.0, -158.0], [-171.0, -172.0, -173.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_URLN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:3,1:2,2:]
      ref=Data(numarray.array([[[[21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]]], [[[66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]]], [[[111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]]], [[[-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]]], [[[-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 1, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_RURN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[1:3,:2,1:4]
      ref=Data(numarray.array([[[[48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0]], [[63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0]]], [[[93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0]], [[108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0]], [[-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0]]], [[[-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0]], [[-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 2, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_RLCN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[1:3,2:,:]
      ref=Data(numarray.array([[[[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 1, 5, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_CCUN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:,:,:4]
      ref=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 3, 4, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_CLLN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:,2:,2:]
      ref=Data(numarray.array([[[[36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 1, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_CURN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:,:2,1:4]
      ref=Data(numarray.array([[[[3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0]]], [[[48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0]], [[63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0]]], [[[93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0]], [[108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]]], [[[138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0]], [[153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0]]], [[[-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0]], [[-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0]]], [[[-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0]], [[-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]]], [[[-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0]], [[-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 2, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PRPN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,1:2,2]
      ref=Data(numarray.array([[111.0, 112.0, 113.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-111.0, -112.0, -113.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_URRN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:3,1:2,1:4]
      ref=Data(numarray.array([[[[18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0]]], [[[63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0]]], [[[108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0]]], [[[-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0]]], [[[-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 1, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_LRRN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2:,1:2,1:4]
      ref=Data(numarray.array([[[[108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]]], [[[153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]]], [[[-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 1, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_URUN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:3,1:2,:4]
      ref=Data(numarray.array([[[[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0]]], [[[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0]]], [[[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0]]], [[[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0]]], [[[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 1, 4, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_LLLN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2:,2:,2:]
      ref=Data(numarray.array([[[[126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 1, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_LPRN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2:,1,1:4]
      ref=Data(numarray.array([[[108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]], [[153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]], [[-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_CPCN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:,1,:]
      ref=Data(numarray.array([[[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 5, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_CRCN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:,1:2,:]
      ref=Data(numarray.array([[[[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]]], [[[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]]], [[[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]]], [[[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]]], [[[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]]], [[[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]]], [[[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 1, 5, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_LPLN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2:,1,2:]
      ref=Data(numarray.array([[[111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_RCLN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[1:3,:,2:]
      ref=Data(numarray.array([[[[51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 3, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_CCCC(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:,:,:,:]
      ref=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 3, 5, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_LULN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2:,:2,2:]
      ref=Data(numarray.array([[[[96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]]], [[[141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]]], [[[-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 2, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PCUN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,:,:4]
      ref=Data(numarray.array([[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 4, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_LRPN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2:,1:2,2]
      ref=Data(numarray.array([[[111.0, 112.0, 113.0]], [[156.0, 157.0, 158.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-111.0, -112.0, -113.0]], [[-156.0, -157.0, -158.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 1, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_RUCN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[1:3,:2,:]
      ref=Data(numarray.array([[[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 2, 5, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_CRUN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:,1:2,:4]
      ref=Data(numarray.array([[[[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0]]], [[[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0]]], [[[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]]], [[[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0]]], [[[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0]]], [[[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]]], [[[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 1, 4, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_LPCN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2:,1,:]
      ref=Data(numarray.array([[[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 5, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_UPPN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:3,1,2]
      ref=Data(numarray.array([[21.0, 22.0, 23.0], [66.0, 67.0, 68.0], [111.0, 112.0, 113.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-21.0, -22.0, -23.0], [-66.0, -67.0, -68.0], [-111.0, -112.0, -113.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_CCRN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:,:,1:4]
      ref=Data(numarray.array([[[[3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0]], [[33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0]]], [[[48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0]], [[63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0]], [[78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0]]], [[[93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0]], [[108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]], [[123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0]]], [[[138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0]], [[153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0]], [[168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0]], [[-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0]]], [[[-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0]], [[-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0]], [[-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0]]], [[[-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0]], [[-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]], [[-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0]]], [[[-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0]], [[-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0]], [[-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 3, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PCCN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,:,:]
      ref=Data(numarray.array([[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 5, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_UUPN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:3,:2,2]
      ref=Data(numarray.array([[[6.0, 7.0, 8.0], [21.0, 22.0, 23.0]], [[51.0, 52.0, 53.0], [66.0, 67.0, 68.0]], [[96.0, 97.0, 98.0], [111.0, 112.0, 113.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-6.0, -7.0, -8.0], [-21.0, -22.0, -23.0]], [[-51.0, -52.0, -53.0], [-66.0, -67.0, -68.0]], [[-96.0, -97.0, -98.0], [-111.0, -112.0, -113.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 2, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_CCCR(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:,:,:,1:2]
      ref=Data(numarray.array([[[[1.0], [4.0], [7.0], [10.0], [13.0]], [[16.0], [19.0], [22.0], [25.0], [28.0]], [[31.0], [34.0], [37.0], [40.0], [43.0]]], [[[46.0], [49.0], [52.0], [55.0], [58.0]], [[61.0], [64.0], [67.0], [70.0], [73.0]], [[76.0], [79.0], [82.0], [85.0], [88.0]]], [[[91.0], [94.0], [97.0], [100.0], [103.0]], [[106.0], [109.0], [112.0], [115.0], [118.0]], [[121.0], [124.0], [127.0], [130.0], [133.0]]], [[[136.0], [139.0], [142.0], [145.0], [148.0]], [[151.0], [154.0], [157.0], [160.0], [163.0]], [[166.0], [169.0], [172.0], [175.0], [178.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-1.0], [-4.0], [-7.0], [-10.0], [-13.0]], [[-16.0], [-19.0], [-22.0], [-25.0], [-28.0]], [[-31.0], [-34.0], [-37.0], [-40.0], [-43.0]]], [[[-46.0], [-49.0], [-52.0], [-55.0], [-58.0]], [[-61.0], [-64.0], [-67.0], [-70.0], [-73.0]], [[-76.0], [-79.0], [-82.0], [-85.0], [-88.0]]], [[[-91.0], [-94.0], [-97.0], [-100.0], [-103.0]], [[-106.0], [-109.0], [-112.0], [-115.0], [-118.0]], [[-121.0], [-124.0], [-127.0], [-130.0], [-133.0]]], [[[-136.0], [-139.0], [-142.0], [-145.0], [-148.0]], [[-151.0], [-154.0], [-157.0], [-160.0], [-163.0]], [[-166.0], [-169.0], [-172.0], [-175.0], [-178.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 3, 5, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_UPLN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:3,1,2:]
      ref=Data(numarray.array([[[21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PPPP(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,1,2,1]
      ref=Data(112.0,self.functionspace)
      ref.setTaggedValue(1,-112.0)
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_UPRN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:3,1,1:4]
      ref=Data(numarray.array([[[18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0]], [[63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0]], [[108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0]], [[-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0]], [[-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PUCN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,:2,:]
      ref=Data(numarray.array([[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 5, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_ULPN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:3,2:,2]
      ref=Data(numarray.array([[[36.0, 37.0, 38.0]], [[81.0, 82.0, 83.0]], [[126.0, 127.0, 128.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-36.0, -37.0, -38.0]], [[-81.0, -82.0, -83.0]], [[-126.0, -127.0, -128.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 1, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PPLN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,1,2:]
      ref=Data(numarray.array([[111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_CLPN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:,2:,2]
      ref=Data(numarray.array([[[36.0, 37.0, 38.0]], [[81.0, 82.0, 83.0]], [[126.0, 127.0, 128.0]], [[171.0, 172.0, 173.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-36.0, -37.0, -38.0]], [[-81.0, -82.0, -83.0]], [[-126.0, -127.0, -128.0]], [[-171.0, -172.0, -173.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 1, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PURN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,:2,1:4]
      ref=Data(numarray.array([[[93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0]], [[108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0]], [[-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_LLLL(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2:,2:,2:,2:]
      ref=Data(numarray.array([[[[128.0], [131.0], [134.0]]], [[[173.0], [176.0], [179.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-128.0], [-131.0], [-134.0]]], [[[-173.0], [-176.0], [-179.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 1, 3, 1),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PPCN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,1,:]
      ref=Data(numarray.array([[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(5, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_RLPN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[1:3,2:,2]
      ref=Data(numarray.array([[[81.0, 82.0, 83.0]], [[126.0, 127.0, 128.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-81.0, -82.0, -83.0]], [[-126.0, -127.0, -128.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 1, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_CRPN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:,1:2,2]
      ref=Data(numarray.array([[[21.0, 22.0, 23.0]], [[66.0, 67.0, 68.0]], [[111.0, 112.0, 113.0]], [[156.0, 157.0, 158.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-21.0, -22.0, -23.0]], [[-66.0, -67.0, -68.0]], [[-111.0, -112.0, -113.0]], [[-156.0, -157.0, -158.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 1, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_CRLN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:,1:2,2:]
      ref=Data(numarray.array([[[[21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]]], [[[66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]]], [[[111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]]], [[[156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]]], [[[-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]]], [[[-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]]], [[[-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 1, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_RPRN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[1:3,1,1:4]
      ref=Data(numarray.array([[[63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0]], [[108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0]], [[-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_LPPN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2:,1,2]
      ref=Data(numarray.array([[111.0, 112.0, 113.0], [156.0, 157.0, 158.0]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[-111.0, -112.0, -113.0], [-156.0, -157.0, -158.0]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_CRRN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:,1:2,1:4]
      ref=Data(numarray.array([[[[18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0]]], [[[63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0]]], [[[108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]]], [[[153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0]]], [[[-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0]]], [[[-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]]], [[[-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 1, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PRRN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,1:2,1:4]
      ref=Data(numarray.array([[[108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(1, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_UCUN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:3,:,:4]
      ref=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 3, 4, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_RRRN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[1:3,1:2,1:4]
      ref=Data(numarray.array([[[[63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0]]], [[[108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0]]], [[[-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 1, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_LCLN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2:,:,2:]
      ref=Data(numarray.array([[[[96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 3, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PPPN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,1,2]
      ref=Data(numarray.array([111.0, 112.0, 113.0]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([-111.0, -112.0, -113.0]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3,),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_URPN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:3,1:2,2]
      ref=Data(numarray.array([[[21.0, 22.0, 23.0]], [[66.0, 67.0, 68.0]], [[111.0, 112.0, 113.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-21.0, -22.0, -23.0]], [[-66.0, -67.0, -68.0]], [[-111.0, -112.0, -113.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 1, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_CPUN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:,1,:4]
      ref=Data(numarray.array([[[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(4, 4, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_RRPN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[1:3,1:2,2]
      ref=Data(numarray.array([[[66.0, 67.0, 68.0]], [[111.0, 112.0, 113.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-66.0, -67.0, -68.0]], [[-111.0, -112.0, -113.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 1, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_LCCN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2:,:,:]
      ref=Data(numarray.array([[[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 3, 5, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PULN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,:2,2:]
      ref=Data(numarray.array([[[96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_PUUN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2,:2,:4]
      ref=Data(numarray.array([[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 4, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_RULN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[1:3,:2,2:]
      ref=Data(numarray.array([[[[51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]]], [[[96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]]], [[[-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 2, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_LCRN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[2:,:,1:4]
      ref=Data(numarray.array([[[[93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0]], [[108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]], [[123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0]]], [[[138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0]], [[153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0]], [[168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0]], [[-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]], [[-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0]]], [[[-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0]], [[-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0]], [[-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(2, 3, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
   #+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   def test_getslice_taggedData_rank4_UURN(self):
      arg=Data(numarray.array([[[[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0], [12.0, 13.0, 14.0]], [[15.0, 16.0, 17.0], [18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0], [27.0, 28.0, 29.0]], [[30.0, 31.0, 32.0], [33.0, 34.0, 35.0], [36.0, 37.0, 38.0], [39.0, 40.0, 41.0], [42.0, 43.0, 44.0]]], [[[45.0, 46.0, 47.0], [48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0], [57.0, 58.0, 59.0]], [[60.0, 61.0, 62.0], [63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0], [72.0, 73.0, 74.0]], [[75.0, 76.0, 77.0], [78.0, 79.0, 80.0], [81.0, 82.0, 83.0], [84.0, 85.0, 86.0], [87.0, 88.0, 89.0]]], [[[90.0, 91.0, 92.0], [93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0], [102.0, 103.0, 104.0]], [[105.0, 106.0, 107.0], [108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0], [117.0, 118.0, 119.0]], [[120.0, 121.0, 122.0], [123.0, 124.0, 125.0], [126.0, 127.0, 128.0], [129.0, 130.0, 131.0], [132.0, 133.0, 134.0]]], [[[135.0, 136.0, 137.0], [138.0, 139.0, 140.0], [141.0, 142.0, 143.0], [144.0, 145.0, 146.0], [147.0, 148.0, 149.0]], [[150.0, 151.0, 152.0], [153.0, 154.0, 155.0], [156.0, 157.0, 158.0], [159.0, 160.0, 161.0], [162.0, 163.0, 164.0]], [[165.0, 166.0, 167.0], [168.0, 169.0, 170.0], [171.0, 172.0, 173.0], [174.0, 175.0, 176.0], [177.0, 178.0, 179.0]]]]),self.functionspace)
      arg.setTaggedValue(1,numarray.array([[[[-0.0, -1.0, -2.0], [-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0], [-12.0, -13.0, -14.0]], [[-15.0, -16.0, -17.0], [-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0], [-27.0, -28.0, -29.0]], [[-30.0, -31.0, -32.0], [-33.0, -34.0, -35.0], [-36.0, -37.0, -38.0], [-39.0, -40.0, -41.0], [-42.0, -43.0, -44.0]]], [[[-45.0, -46.0, -47.0], [-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0], [-57.0, -58.0, -59.0]], [[-60.0, -61.0, -62.0], [-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0], [-72.0, -73.0, -74.0]], [[-75.0, -76.0, -77.0], [-78.0, -79.0, -80.0], [-81.0, -82.0, -83.0], [-84.0, -85.0, -86.0], [-87.0, -88.0, -89.0]]], [[[-90.0, -91.0, -92.0], [-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0], [-102.0, -103.0, -104.0]], [[-105.0, -106.0, -107.0], [-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0], [-117.0, -118.0, -119.0]], [[-120.0, -121.0, -122.0], [-123.0, -124.0, -125.0], [-126.0, -127.0, -128.0], [-129.0, -130.0, -131.0], [-132.0, -133.0, -134.0]]], [[[-135.0, -136.0, -137.0], [-138.0, -139.0, -140.0], [-141.0, -142.0, -143.0], [-144.0, -145.0, -146.0], [-147.0, -148.0, -149.0]], [[-150.0, -151.0, -152.0], [-153.0, -154.0, -155.0], [-156.0, -157.0, -158.0], [-159.0, -160.0, -161.0], [-162.0, -163.0, -164.0]], [[-165.0, -166.0, -167.0], [-168.0, -169.0, -170.0], [-171.0, -172.0, -173.0], [-174.0, -175.0, -176.0], [-177.0, -178.0, -179.0]]]]))
      res=arg[:3,:2,1:4]
      ref=Data(numarray.array([[[[3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]], [[18.0, 19.0, 20.0], [21.0, 22.0, 23.0], [24.0, 25.0, 26.0]]], [[[48.0, 49.0, 50.0], [51.0, 52.0, 53.0], [54.0, 55.0, 56.0]], [[63.0, 64.0, 65.0], [66.0, 67.0, 68.0], [69.0, 70.0, 71.0]]], [[[93.0, 94.0, 95.0], [96.0, 97.0, 98.0], [99.0, 100.0, 101.0]], [[108.0, 109.0, 110.0], [111.0, 112.0, 113.0], [114.0, 115.0, 116.0]]]]),self.functionspace)
      ref.setTaggedValue(1,numarray.array([[[[-3.0, -4.0, -5.0], [-6.0, -7.0, -8.0], [-9.0, -10.0, -11.0]], [[-18.0, -19.0, -20.0], [-21.0, -22.0, -23.0], [-24.0, -25.0, -26.0]]], [[[-48.0, -49.0, -50.0], [-51.0, -52.0, -53.0], [-54.0, -55.0, -56.0]], [[-63.0, -64.0, -65.0], [-66.0, -67.0, -68.0], [-69.0, -70.0, -71.0]]], [[[-93.0, -94.0, -95.0], [-96.0, -97.0, -98.0], [-99.0, -100.0, -101.0]], [[-108.0, -109.0, -110.0], [-111.0, -112.0, -113.0], [-114.0, -115.0, -116.0]]]]))
      self.failUnless(isinstance(res,Data),"wrong type of result.")
      self.failUnlessEqual(res.getShape(),(3, 2, 3, 3),"wrong shape of result.")
      self.failUnless(Lsup(res-ref)<=self.RES_TOL*Lsup(ref),"wrong result")
