
########################################################
#
# Copyright (c) 2003-2010 by University of Queensland
# Earth Systems Science Computational Center (ESSCC)
# http://www.uq.edu.au/esscc
#
# Primary Business: Queensland, Australia
# Licensed under the Open Software License version 3.0
# http://www.opensource.org/licenses/osl-3.0.php
#
########################################################

__copyright__="""Copyright (c) 2003-2010 by University of Queensland
Earth Systems Science Computational Center (ESSCC)
http://www.uq.edu.au/esscc
Primary Business: Queensland, Australia"""
__license__="""Licensed under the Open Software License version 3.0
http://www.opensource.org/licenses/osl-3.0.php"""
__url__="https://launchpad.net/escript-finley"

"""
Test suite for the escript.symbolic module

:var __author__: name of author
:var __copyright__: copyrights
:var __license__: licence agreement
:var __url__: url entry point on documentation
:var __version__: version
:var __date__: date of the version
"""

__author__="Cihan Altinay"

from esys.escript import *
import unittest
import numpy

class SymbolicTestCase(unittest.TestCase):

    # number of digits that have to match for results to be considered equal
    TOL_DIGITS=8

    def test_Evaluator(self):
        e=Evaluator()
        self.assertEqual(len(e), 0, "empty evaluator returns wrong length")
        self.assertEqual(e.evaluate(), (), "result of evaluate() not empty")

        x=Symbol('x')
        e=Evaluator(x*x, x**3)
        self.assertEqual(len(e), 2, "evaluator returns wrong length")
        self.assertEqual(e[0], x*x, "first expression wrong")
        self.assertEqual(e[1], x**3, "second expression wrong")

        f=e.addExpression(x**4)
        self.assertEqual(len(e), 3, "wrong length after addExpression()")
        self.assertEqual(e, f, "addExpression() did not return self")
        self.assertEqual(e[2], x**4, "third expression wrong")

        e+=x**5
        self.assertEqual(len(e), 4, "wrong length after += operator")
        self.assertEqual(e[3], x**5, "fourth expression wrong")

        self.assertRaises(RuntimeError, e.evaluate)
        f=e.subs(x=2)
        self.assertEqual(e, f, "subs() did not return self")
        self.assertEqual(e.evaluate(), (4,8,16,32), "wrong result after subs()")
        self.assertEqual(e(x=3), (9,27,81,243), "wrong result after __call__")

        xx=RandomData((), FunctionSpace())
        ref=[d.toListOfTuples() for d in (xx**2, xx**3, xx**4, xx**5)]
        res=e(x=xx)
        for d in res:
            self.assertTrue(isinstance(d, Data), "substituted expression not a Data object")
        res=[x.toListOfTuples() for x in res]
        self.assertEqual(res, ref, "wrong result after substitution with Data object")

        x=Symbol('x', (3, 2))
        e=Evaluator(x**2, x**3, x**4, x**5)
        xx=numpy.array([[8.1535333292557866, -8.5134220382048156], [4.693054181874059, 4.6853479302119148], [-1.4382727700106699, 8.2817155001503657]])
        ref=[d.tolist() for d in (xx**2, xx**3, xx**4, xx**5)]
        res=e(x=xx)
        for d in res:
            self.assertTrue(isinstance(d, numpy.ndarray), "substituted expression not a numpy array object")
        res=[x.tolist() for x in res]
        self.assertEqual(res, ref, "wrong result after substitution with Data object")

    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_acos_Symbol_rank0(self):
        shape=()
        x=Symbol('x', shape)
        y=acos(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array(0.55694769941)
        ref=acos(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_acos_Symbol_rank1(self):
        shape=(3,)
        x=Symbol('x', shape)
        y=acos(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([-0.53633846123112905, 0.53682157904894656, 0.11878120270719861])
        ref=acos(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_acos_Symbol_rank2(self):
        shape=(3, 4)
        x=Symbol('x', shape)
        y=acos(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[0.67577608048465754, 0.07800716285058984, -0.16443675856054507, -0.67132575616485002], [-0.65356903053899429, 0.32886318669623171, 0.011020511030880309, 0.37396682728488639], [0.85528109715063438, -0.11934424131387367, -0.089767400684405807, -0.57066330844968283]])
        ref=acos(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_acos_Symbol_rank3(self):
        shape=(2, 6, 6)
        x=Symbol('x', shape)
        y=acos(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[0.9313657632740111, -0.40674411662398446, 0.35697889797942128, -0.55238961213168292, 0.76785928954568572, 0.80164039595385228], [0.35909861327661985, 0.61674015087497858, -0.65622190019869753, 0.15627562708868603, 0.22550716904389478, -0.76426850677068914], [0.5925427702360575, -0.64497718908198709, 0.76816294784734196, 0.60269869559378386, 0.68435671345845606, -0.3656171096895815], [-0.59229131361446496, 0.47353373321571635, 0.59059077781837788, 0.8378155484161991, 0.59176696546179763, -0.06129932284830919], [-0.081755352642232326, -0.58471182924369747, 0.23938657341376857, -0.85285652041848059, -0.0012545013305105268, -0.41293265942026491], [-0.8168372433840394, 0.57932447785014052, 0.10042331110295577, 0.51823220783972279, -0.81222829957011999, -0.94597269081279967]], [[-0.7150575739212377, -0.26482534317871909, 0.51494366836363148, 0.81123450331678049, -0.18724464922208273, 0.063503788938006567], [-0.88782406414650517, -0.14521068788828195, -0.57232936829795023, 0.91365376025041312, -0.026689196686216166, -0.091287559982732303], [-0.27348100016683596, 0.0083484167230349904, -0.53336876486434304, -0.99147429203598603, -0.26579316990995094, -0.26745311079676837], [0.76039705457894491, 0.15080987880856389, 0.9247065970239412, 0.34414637816754179, -0.075242536748050926, 0.13491928375352358], [0.39270839076090658, -0.085532854929213142, -0.96754698615620671, 0.78304433210534752, -0.49442641969528323, 0.33843207063092362], [0.16217395896732856, -0.74679431675542851, 0.57086399218504447, 0.093039384070887632, -0.11151151831231476, -0.2526930027011256]]])
        ref=acos(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_acos_Symbol_rank4(self):
        shape=(6, 2, 5, 6)
        x=Symbol('x', shape)
        y=acos(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[-0.064708754139531921, -0.73559921606835155, -0.70157527113756535, -0.94456001168046844, 0.82188741565923285, 0.86794126322064646], [0.28325684687064157, 0.85497798548366633, 0.76615936288457132, -0.38030084497396821, -0.53065916475226071, 0.98381539415372754], [0.40359846688307099, -0.55281122961131235, -0.0847090329181166, 0.63692624394584496, 0.75398757536467564, -0.86620499736235024], [-0.53871563824165802, -0.69027078751922644, -0.24449937422231094, 0.7783424625371318, -0.87293363996126794, 0.72870128357511388], [0.43243748108387914, 0.92712034558248724, 0.080589265921705122, -0.34394914193921644, 0.34773586884274477, -0.28526864899985438]], [[-0.46610173857827553, -0.33224957920873632, -0.74725023139674662, -0.29757403464740495, 0.22262497965038297, -0.81641444600781821], [0.19981528664629344, -0.27794089147849177, 0.84267598447642977, -0.35591122372534811, 0.32837181371428725, 0.28104492075186016], [-0.12169539904522941, -0.98384081047537419, 0.34724093835256165, 0.98018687639402491, 0.48085935034449245, -0.62248241337628363], [0.19940725910496204, 0.24068196182201684, -0.57039424480355128, 0.09289337573717904, 0.72858497687222457, 0.98634707937820942], [0.073856619433472881, -0.6576861186056937, -0.29115904034457385, -0.69112405331866533, -0.68474177915021595, 0.37594640431519832]]], [[[-0.60631818994564934, -0.70707096766104671, -0.67958437683362227, -0.0990213122025978, 0.80435106243326304, 0.28786900286439709], [0.81582897941691446, -0.36031859159721091, -0.051248444161419382, -0.27042375526759943, -0.76283426750157846, -0.44522213282051282], [-0.47250753536037005, -0.83577160977741083, -0.35728207401263878, 0.93310986249062156, 0.6446868224119866, -0.93137366300821478], [0.049318144349842274, -0.36973458032661677, -0.46074047632495185, 0.19880898462779251, -0.04880771599339373, -0.55035266399904859], [0.39330581557947331, 0.38048344050621541, -0.7457978014019675, -0.49203066534202167, 0.87427919906431328, -0.63828157422283627]], [[0.78270472523854973, -0.37009878291546494, 0.30778101202707764, -0.70764173889612048, 0.63422949946870899, 0.13963462739941379], [0.68630466723521288, 0.08937996954699412, 0.37808906494803596, -0.92951342399750603, -0.92917280809213998, -0.39329720114756039], [0.010126343090714585, 0.1461222883387816, 0.90033433517952188, -0.31276767558680008, -0.71696626791201434, -0.042848248398834832], [-0.11157727500402403, -0.058036640460259692, 0.64435939172110146, 0.85159092672380088, -0.60789893864261968, -0.039239270692941197], [-0.18149345989893129, 0.13803996589345968, -0.63937531960275895, 0.95251304988424823, 0.22103051158874165, -0.83155511845832653]]], [[[-0.57487187099414361, 0.45572069581400987, -0.98428935271994211, -0.10446112094523374, -0.43497926783287633, 0.26052071610657168], [-0.59317511421833635, 0.30047543388900499, -0.50465388202340256, 0.36897089774595671, -0.2007155167961796, 0.22154208292514999], [-0.026026056899360883, 0.35046459556671183, 0.47518675958606771, -0.34084307934750879, 0.25943702287844217, -0.53019939943570149], [0.029702643144055241, 0.7355331276766599, 0.062845141749106492, -0.98668866192868543, -0.87514996061886019, 0.36240085609744943], [-0.3234572494978678, 0.28957587630075632, 0.8651585504391881, -0.4296693063950181, 0.89116483880043607, -0.67230623244259657]], [[0.2757384742069493, -0.75381011859838698, 0.96728718841346351, 0.47660223852923922, 0.069404033394140363, -0.98685001725030563], [0.44134991723531747, 0.2711146869889085, -0.7593193707357806, 0.10911791111620772, -0.4196712117689203, -0.19254282935510791], [0.35383165941236472, 0.3514383544882016, -0.16772213248081402, 0.73403156927611435, 0.5234094303937078, -0.23635244890479279], [0.42061280322909389, 0.72630088399151416, 0.71235083497718854, -0.92004289712623843, 0.038867268705457647, 0.96358885393015248], [-0.54631689351505108, -0.52307316181647479, 0.91953423663449474, -0.3952978682348669, 0.22203680521328439, -0.87947426291625219]]], [[[0.78462325828848822, -0.44279892135623777, -0.71883097374491567, 0.567218657053008, 0.61987081077960227, -0.034839420943603594], [-0.95641682874484313, -0.12712960221303082, -0.34914644315405585, -0.70895075849145628, -0.87574894432303529, 0.28497814300863245], [0.34033888818640112, -0.90004052570734383, -0.82873031190712387, -0.24284033554730522, -0.2080914693918976, -0.49911255262704701], [0.25956371768753228, -0.56506863762653547, 0.56753996932009598, 0.6459628765775105, -0.095636204119813772, 0.21934546148163769], [-0.53380256026155548, 0.40920723964375449, -0.085509697980793442, 0.1304396986042351, -0.062475922490457192, -0.51459786817443764]], [[-0.16239265789770685, 0.61288698052580903, -0.67993454328356662, 0.10691292187121682, -0.25284771202749057, -0.12872847415455002], [0.33937516357413267, 0.15083744639512942, 0.51107474742225811, -0.80963747190897384, -0.51981487235535662, -0.22023770251583619], [-0.34351401950554328, 0.98590893809858304, -0.94456180496635866, 0.20114931486980514, 0.070680370827551853, 0.89059416302654992], [-0.21755850677804101, 0.60431185893140715, 0.65902495075700851, -0.33036955266005341, 0.42844917396376037, 0.97548212040787097], [0.42460971554580196, -0.95332936805859458, -0.79294335701974439, -0.14176609968815201, 0.75325439881615841, -0.61586098647280063]]], [[[-0.082962948619836885, -0.76042806862539503, -0.54298920578190302, 0.58870432195101308, -0.11889616065870445, -0.7671929382742364], [-0.29061106430878691, -0.062746932465737482, 0.88938964124995845, 0.1291179782434615, -0.16113842269907042, 0.60167403688255794], [0.88153757978655256, 0.95380390835603679, 0.39611349730406675, -0.90357040886924711, 0.29832090476065831, -0.30928913560676619], [0.021113087967228106, 0.030981198913568875, 0.19928262277138131, -0.21342097071903421, -0.56874341164219433, -0.46707700574127742], [-0.24334589256908656, 0.26358329172884609, 0.4046098356504102, -0.73643777971554636, 0.75598498026257399, 0.79566653177142643]], [[0.72909445613439083, 0.13593149452441189, 0.66004700000051097, -0.083047233175469914, 0.50666177905736398, 0.93117786023335447], [-0.75784584461656768, 0.16289902459293759, 0.91805040903515267, 0.68820733797706013, 0.78592602149417234, 0.44285962753031516], [-0.48635447120246433, -0.33268515380643215, 0.042048147515149514, 0.81809651322389043, -0.01964434907991941, -0.082595319016289581], [-0.76984077784536997, -0.87204448702165327, -0.46943899190174476, -0.10745628934530238, 0.96821000494880272, -0.97461576289427332], [-0.2928182654525826, -0.67585286855633075, -0.73400239578659932, 0.063945584473272143, 0.78083148588640405, -0.97776188060042135]]], [[[-0.85370008131189179, -0.88596149707307625, -0.38578825926935134, 0.1423097916097571, -0.7920940968241641, -0.24076053729531499], [-0.67058703564536581, -0.56753519562219856, -0.96177795826834678, 0.58077443388672378, 0.11660581695260408, 0.64998572081357442], [-0.73507260850923517, 0.084443554494957773, -0.69788262386331645, -0.4909273583490239, 0.54054401129588503, 0.12667369975473064], [-0.63556204427779828, 0.58850548865867203, -0.34921596045412495, -0.82791492927457311, 0.28288758246669787, -0.5894151508813803], [0.15051017235895547, 0.89611376012410182, -0.44293884012542906, 0.8194222176123227, 0.89131891180279399, -0.13977699802976695]], [[0.28020496915438731, -0.072911030157432943, -0.71541137937293331, 0.73186002562893293, -0.47588305673008779, -0.070402845902211908], [0.59986490378907664, 0.30273470286021187, 0.012573891286977945, 0.86861233854357178, 0.94475886021299771, -0.91957561344982741], [0.60898116826024262, 0.37392704955865264, -0.69723349582501259, 0.3969256480754153, -0.26101683007901322, -0.58250737590982093], [-0.16087132133606774, -0.3406653786636169, 0.36246032708624787, -0.81933654999909256, 0.084163188527405008, -0.42784618464839252], [-0.75858124079811939, -0.084721911139000294, 0.39464765435449434, -0.2604255522559944, -0.48544297637042155, 0.36682125855259295]]]])
        ref=acos(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_asin_Symbol_rank0(self):
        shape=()
        x=Symbol('x', shape)
        y=asin(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array(0.0575134837697)
        ref=asin(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_asin_Symbol_rank1(self):
        shape=(1,)
        x=Symbol('x', shape)
        y=asin(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([-0.50647242625757549])
        ref=asin(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_asin_Symbol_rank2(self):
        shape=(5, 2)
        x=Symbol('x', shape)
        y=asin(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[-0.29670857317092625, 0.63804453793814764], [0.48767335686599345, 0.97209356077358477], [-0.84553487069146738, 0.46559340116154413], [-0.55117444618389166, 0.57822612990001065], [0.11380124743773168, 0.89935947426125273]])
        ref=asin(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_asin_Symbol_rank3(self):
        shape=(3, 5, 6)
        x=Symbol('x', shape)
        y=asin(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[-0.47028790811437959, -0.67288926285964501, 0.97621331590660754, 0.21080115129940458, -0.058725158935201138, -0.12867500241463348], [-0.82314592268211251, -0.81284933909801427, -0.31172885368049696, 0.35793510254050198, 0.55287136711044504, -0.81581594412479741], [-0.45878474609193454, 0.82188306473152939, 0.85258902969642736, -0.55745891613209686, -0.58696367232340707, -0.042456923438679794], [0.23144761765939736, -0.39046735708031766, 0.5342082703713249, 0.25575967993313431, 0.65749198255932484, 0.33823379566383416], [-0.94332529203841786, 0.76437707294690571, 0.62792792956278842, 0.6656957067017728, -0.67515607800948252, 0.66566715135148957]], [[0.22159337905818366, 0.47800559441378043, 0.15805741197512169, 0.12466985543857478, -0.15458378757689917, 0.78548241626645532], [-0.15211867625534969, -0.833134335215725, -0.10249253379622658, -0.22244517192607938, -0.64761985729970428, -0.43102514127588609], [0.37826592852159435, -0.12320235474344643, 0.3078284607197026, 0.9157107371171691, -0.87334836579884079, -0.89069819903225222], [0.8124932862038492, -0.9890642170106696, -0.97009862281898407, 0.060566184331444894, 0.5212078018908386, 0.46908773498427103], [0.99751368490203762, -0.2843508569507307, 0.70771983445054953, 0.11579630583525224, 0.2256672039692118, -0.42800377997301808]], [[-0.22185993312325847, -0.058173565206135036, -0.21845287189069684, 0.85273361910061052, -0.8062853183893155, -0.53263580851901504], [-0.020949293252047196, -0.82555708666121452, 0.83618490890254593, -0.58092030179167842, -0.42690991922982491, 0.17865448104121873], [-0.93198906114988112, 0.30025827204734301, -0.71653359700444552, -0.88277017764434995, -0.11453021763345883, -0.95521487810907746], [0.70679375207759709, 0.22931000298493487, -0.71307530825859278, -0.75290143362324846, -0.50792461124468935, 0.89477338965011355], [0.97425509819645995, 0.99994309138290616, -0.32523531170615105, 0.45595452562134553, 0.80300272640636039, -0.12618312092254191]]])
        ref=asin(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_asin_Symbol_rank4(self):
        shape=(3, 4, 1, 6)
        x=Symbol('x', shape)
        y=asin(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.60754245302975196, 0.0020029538225689869, -0.0010395919649250907, 0.90408717497401292, 0.44370970325368075, -0.93924804761780556]], [[0.55258112803035586, -0.18154804340853348, -0.11420892213135247, 0.44924033396119056, 0.21871439992683395, 0.17210031195721665]], [[0.48131748859705792, 0.027621989712713013, -0.36854954263574946, -0.42505925182162296, -0.5262966537838194, 0.38933183698937368]], [[0.085065645833357184, 0.018866995883265458, -0.52104897754649682, -0.42249458240860549, 0.65596139127887731, 0.54320238781336538]]], [[[-0.24978179403377943, -0.0042891207293693778, -0.5263702648433175, -0.79472598747417078, 0.46955460643586333, 0.5521518621690058]], [[-0.18927910709256479, -0.8252199103801845, -0.18200902838369282, -0.13219770825787314, 0.6216217701794875, 0.41865802701864485]], [[-0.93104757170780905, 0.38246348998805724, -0.94918328774059435, -0.69364592568173311, 0.031538853296116276, 0.53003255066472099]], [[-0.26565985791445135, 0.71685003200363639, -0.38673211582607059, -0.35620295341513519, -0.25174761583653038, -0.25488397111953809]]], [[[0.5707598556565745, -0.51980800583047193, 0.95833173633908419, -0.10620431572514, -0.71472913634412705, 0.056415415984334194]], [[0.81548250250827858, -0.37820795077677216, 0.91282512008585615, -0.32452791600741371, 0.86275504934451663, 0.39544492179522983]], [[-0.73317260611219859, 0.087866043339142275, 0.39827339727617717, -0.78918128795391573, 0.60690138527255111, 0.8813774132340757]], [[0.39353650858162026, -0.41208093256228295, 0.19084716076118813, -0.6764318551688151, -0.79079465780889735, 0.47735963112385793]]]])
        ref=asin(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_atan_Symbol_rank0(self):
        shape=()
        x=Symbol('x', shape)
        y=atan(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array(-0.383941715906)
        ref=atan(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_atan_Symbol_rank1(self):
        shape=(2,)
        x=Symbol('x', shape)
        y=atan(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([0.80874042715020056, -0.83316096335312162])
        ref=atan(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_atan_Symbol_rank2(self):
        shape=(5, 5)
        x=Symbol('x', shape)
        y=atan(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[-0.079112216435460514, -0.56135418088072275, -0.98997166702802009, 0.12687703431002162, -0.74812454122617811], [0.45437217517511042, -0.72634689075251146, 0.11686865863919071, 0.87319504291582639, -0.64728444258695239], [-0.5465508668816097, 0.28385216545465042, 0.90163612340949695, 0.28769716630093001, 0.7151574765683828], [0.12040670401760822, 0.87755420667364925, -0.58756635491511244, -0.51802506589615804, 0.07524774950265134], [-0.66251111019792885, 0.099286209585522478, -0.066672010999616393, 0.078435265909126972, 0.29273683198245948]])
        ref=atan(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_atan_Symbol_rank3(self):
        shape=(5, 5, 5)
        x=Symbol('x', shape)
        y=atan(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[-0.7810489680594741, 0.5552019863124027, -0.029946184662261066, 0.30291126565592763, 0.5249851684774689], [-0.054462102690683301, -0.42264427341942179, -0.28983002681455949, -0.48946375267729181, -0.47515812328607132], [-0.14135060918394249, 0.97348522256104486, -0.65635931487805932, 0.57301837593514704, -0.13559682757526548], [-0.29588458538485773, -0.21998350000962907, 0.9741962127512056, 0.36218843934105327, -0.38367588529499863], [-0.42821304499014512, 0.14867816552159785, -0.71493711508465974, 0.4375087740046868, 0.18590259088310268]], [[-0.5363684335786536, 0.64997868114927382, -0.33809325301334692, 0.7964410362123262, 0.25511970789555272], [0.63827161703669488, 0.86223851457745226, -0.15124256163676364, -0.23662128216067413, 0.73397028503445516], [-0.53284001619353116, -0.48784122202068425, -0.79026154186886721, 0.77461269317909487, -0.34022973824985048], [-0.38195064973560422, -0.07960781190047328, -0.76715677631843482, 0.44274688064207934, -0.91397324522825163], [0.85779581350985779, -0.43547714098475132, 0.91373263970487484, 0.17536159769338866, 0.26165596551157067]], [[-0.24133765863933787, 0.29063991087783414, 0.96150148086902654, -0.38737715458583377, -0.95738410075803526], [-0.57226633393336623, -0.50391613096102228, 0.12806544558717059, 0.11059724085635758, -0.6736713744768803], [0.12785398606888032, -0.5583359569302675, -0.91223105336594057, 0.18209171734226048, -0.99134678119601638], [0.6572161225793367, -0.58581301679006037, -0.37664979384945285, 0.0049817918121464189, 0.53948450539362902], [0.28951217932079154, 0.38254473725466287, 0.26249893604105146, 0.31607406341650179, 0.0731927100558869]], [[0.6356798543535378, -0.24770797618152396, -0.15883892045337666, -0.12465087431274724, 0.5860009562613917], [0.23108907912032262, 0.50967854381078403, 0.29788609996921234, 0.41307108130883119, -0.32583243560707387], [-0.86701339774070152, 0.38726319749063842, -0.61036947407033293, -0.83447670132744189, 0.2873030303951869], [0.2684874348910955, -0.88065334332182998, -0.064031130226149813, 0.87565986485119662, 0.71738925725877856], [-0.15017771992385631, -0.2173456725113061, 0.77231967987340933, -0.28400203342249153, 0.63652600113529845]], [[0.61931761389139051, -0.28247923804128217, -0.27496168180244207, 0.30743872516996018, 0.30754833781327262], [-0.7638790632737178, 0.38353391770828726, -0.71000080673172539, 0.29148634126661332, 0.33769179410965733], [-0.2214781547530611, -0.91876985253622689, 0.82733732287887007, 0.9418632385911605, 0.12822315100992232], [-0.42496896058919686, -0.55825667787637201, -0.25768410110541162, 0.66699271110522473, -0.72665124823898641], [0.39744956771454976, 0.65708903533028784, 0.88733074166903725, -0.65551899434303107, 0.1095115874297361]]])
        ref=atan(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_atan_Symbol_rank4(self):
        shape=(4, 4, 4, 4)
        x=Symbol('x', shape)
        y=atan(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.34290280603641876, 0.69646446447188781, 0.78069054812351668, 0.21858712199897146], [0.67727533027464304, -0.80913749509454247, -0.10091387266427465, 0.48823356525049033], [0.72950281233906322, -0.75275092775981745, -0.23025687639456427, 0.98630937020001364], [0.22048381230034075, -0.56325773464103124, -0.98404093715736773, -0.6603227181745861]], [[0.26720964685107695, -0.29688734916340653, 0.45778973101912568, 0.70779343177407861], [-0.16700766642895215, -0.89918590402964882, 0.93846435242113069, -0.70421641315837213], [0.70106555846625485, -0.67063373984830776, 0.097690941688788557, 0.37363083742477965], [-0.54073558982173897, 0.60401050434907466, -0.034380248692211568, -0.10009840642629508]], [[-0.93173877849625408, 0.73483665883853222, 0.49812450255321483, 0.47547609834926519], [-0.4393842944156785, 0.75850898434110303, -0.43663743950098732, 0.54782253427531358], [0.5957418588622363, 0.5514826566900799, -0.87412703674058534, 0.060940283526906169], [-0.2083145859536446, 0.47340840680272644, 0.56190125325497275, -0.89323288205981344]], [[-0.98040969588857441, 0.023271578196670806, 0.82196890435839953, -0.9492058529310583], [-0.43478154795007384, -0.56767172900814633, 0.88894259226539241, 0.43411899256269049], [-0.59349203356003133, 0.22881516887145503, 0.40495313991552617, -0.50816314697060028], [-0.42926446508946681, 0.75818660689180017, -0.57337917201880861, 0.18610543993694018]]], [[[-0.44205218436293703, -0.91396986956856718, 0.33070458898118238, 0.92053121423365369], [0.87512129930304927, -0.38815634648886599, -0.51960186519087959, -0.81646928843727862], [-0.0069590274621689208, 0.18423652421187731, 0.27673683073850208, 0.56438309300830514], [-0.30747248782598313, 0.50860848522667679, 0.77406849329254235, 0.31568125507772438]], [[0.97299829876791444, -0.77000328463917023, -0.47626224792262972, 0.9365782431569214], [0.069449334725619982, 0.55221537297070045, -0.52371624485381663, 0.13949257107767932], [0.047296828280015912, 0.31046447715832626, 0.37680974461551653, -0.28479671897599457], [0.24782204906012595, 0.96470934660089402, 0.14678066860249417, 0.87935976788242809]], [[-0.81492323304781666, 0.89144453451596917, 0.83595895804878029, -0.86001813567035623], [-0.25687184101193861, 0.44247760915117862, -0.57452237154653707, 0.3763521903203082], [-0.92905953689375487, -0.90723537828321499, -0.71619195743648145, 0.51626133194459767], [-0.39918795224757009, -0.55696174284968691, 0.55394434969834272, -0.42259280556182022]], [[-0.15539737673540976, -0.40554258409460364, 0.23013989197248153, 0.1168560173575659], [0.34958079388693819, -0.35168607892267945, 0.33077677727366828, 0.98687850782252351], [-0.36573245874861726, -0.16431535929758612, 0.63685426927789868, -0.98746457222630246], [-0.54455708610335618, 0.8790136994139528, 0.95983747174351097, -0.16664508673408474]]], [[[0.70949138842660786, 0.8460459146293251, 0.39547969624603185, -0.43523392965119645], [0.84435168753095691, -0.72423826132080493, 0.56193433624735034, -0.69908640073810213], [0.53424563354995169, -0.85757408218588682, 0.050708534417594153, 0.37269424463241507], [0.82535813500485555, -0.20691726378737707, -0.38562837362993485, 0.35109978245305262]], [[-0.15828242888380473, 0.49588086313246382, 0.56632617924782314, 0.48635215082879202], [-0.63520820786804566, 0.75061021408733319, -0.21598266412258504, 0.32098579387697224], [0.35042805928490028, 0.16501673429542829, 0.137909120299329, 0.000502782106896138], [-0.32210165945258251, 0.96354731581061714, 0.39471874848160327, 0.097829947158583508]], [[-0.13558904380036552, -0.87318619508469997, 0.11366467746216702, -0.23911737724129245], [0.11563088071511762, -0.62086516542864834, -0.3044364174938341, -0.56970012691056482], [-0.46412400101530471, -0.46184353035515469, -0.36840335475957842, 0.57198472117774779], [0.71869832764273656, -0.81441062900696282, -0.47043569346088332, 0.025043378323925669]], [[0.60685569038938092, -0.85973354707404348, -0.4323265155669116, -0.069738938025623698], [-0.060465227564384216, -0.74330706265106561, -0.27173969292114242, -0.30969477549310565], [0.50769978883517508, 0.12890604649613668, -0.34909171672412564, 0.7037728297587782], [-0.97044434390817602, 0.61877466663478731, -0.46106324150552824, 0.93494253500623015]]], [[[0.70116654585703819, 0.31107126083386683, 0.39109997053245138, 0.85688902263767797], [0.16055927662888214, -0.091475901248709635, -0.82352125806261656, 0.84206773069166352], [0.081929697236698962, -0.19517239748274218, -0.77851243029310946, 0.035013746609340979], [-0.48986778698408351, 0.30978387639869998, 0.52221943943699478, 0.85802503253047657]], [[-0.47989536918429865, -0.025649858245310853, 0.26378322896511186, -0.47856318945675835], [-0.89763767419511487, -0.87029897447725135, -0.57894984485733647, 0.66201559604171889], [0.24719610372353951, -0.74322838171494543, -0.67958591051471373, -0.3380428200228256], [0.89575150156783834, 0.27540529872701236, 0.030582456543022385, 0.95986233741527105]], [[-0.39503968394118139, -0.44488340444536423, 0.41498558099787286, -0.69705272712749178], [-0.56346116187082118, 0.70070052358524926, -0.95989490291309898, 0.10427933410450585], [-0.011164169307204208, 0.13727549444241083, -0.9876013203460603, 0.14226490447114903], [0.69258371278150532, 0.74204067560739939, 0.24765690586016609, 0.054170936301846773]], [[-0.86992278032451065, -0.66105396032294328, 0.34985328373613478, -0.96177321496092749], [-0.68464372068386314, -0.34156557863368153, 0.93273302673720782, 0.63423743331817151], [-0.018906896355298963, -0.81694280732444713, -0.84063712400943591, 0.74767667098991186], [0.75661214612319672, 0.0076011111597975578, 0.35173358659268072, -0.14798134369744642]]]])
        ref=atan(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_abs_Symbol_rank0(self):
        shape=()
        x=Symbol('x', shape)
        y=abs(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array(-0.936638695416)
        ref=abs(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_abs_Symbol_rank1(self):
        shape=(6,)
        x=Symbol('x', shape)
        y=abs(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([-0.10402404326638925, 0.43431089469982043, -0.88656246765036517, 0.78015226997382481, -0.48119786271284326, 0.87903152982484589])
        ref=abs(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_abs_Symbol_rank2(self):
        shape=(4, 6)
        x=Symbol('x', shape)
        y=abs(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[0.35757467037387247, 0.082875543911905103, 0.95704889792159387, 0.42001928160163637, 0.9102058492319125, -0.10810567325848774], [-0.76515448275148379, -0.78147093363217879, -0.26406184143386247, 0.5314996485347363, -0.68786423269650099, 0.86250994583107832], [0.92055232817955823, -0.15341711317018958, 0.51568909320822631, 0.79238263233117023, 0.76039428660524577, -0.055104357465338039], [0.41099105970210603, 0.62248024876662678, -0.95709511862746277, 0.65868935924305494, -0.26931899696276052, -0.2287950913828749]])
        ref=abs(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_abs_Symbol_rank3(self):
        shape=(4, 6, 6)
        x=Symbol('x', shape)
        y=abs(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[0.16687811319839563, 0.54299078664115563, -0.44859887051141767, -0.36539313365759574, 0.11364230842239453, 0.16321925340359966], [-0.36980443860674472, -0.63476194136763242, -0.83542002728175824, 0.93285195312168701, 0.65908731574814472, -0.67952809917578127], [-0.029664914010988364, -0.95561520697709357, -0.18246903907234713, 0.6880283935374254, 0.12070943021486791, 0.54914931419178603], [0.47468489749239273, -0.21012802300669575, 0.15869063364706903, 0.70095090705105312, 0.29663297884087569, -0.75637449073484619], [-0.43627397831787285, -0.015536850556908677, -0.2296234579712968, 0.4641163149829628, 0.81312391891534253, 0.46512977062395455], [-0.16122995207006507, 0.75440868041803499, -0.39591670269469392, 0.87897990682742311, -0.97595680612329416, 0.73573146822620483]], [[-0.13719167703373003, 0.56891943091320751, -0.95000035969056973, -0.051760133482456894, -0.88585321610908307, -0.051342277588692919], [0.99387524132172311, 0.150518857247391, -0.37305933003083802, 0.79793673034751067, -0.46382618998729774, -0.93863503135386783], [-0.044812681991393877, 0.013506211093427201, 0.47535167551086555, -0.14128360013200325, 0.62660414350376969, 0.30960309269423525], [-0.61128005712938416, 0.80564896876309611, 0.033126283143377622, -0.9309776793461968, -0.18167197546321523, 0.19931433719610836], [-0.82371248009001707, 0.87350937923220839, 0.10503977382133023, 0.31798940985911162, 0.59756367957379597, 0.96888504544364329], [-0.84189568853140351, 0.49949575844295002, 0.035414980067912438, 0.46751617183236593, 0.97960728184344648, 0.3051770267877072]], [[0.011186270909940621, -0.49594829753641401, 0.34798857192314481, 0.66597807049492763, 0.82802260821709761, -0.089022712445967711], [-0.5045173022822298, 0.67317969500529173, -0.31247078187051547, 0.25257407307332302, 0.55678951668813137, 0.081463074745823816], [0.26225288799409507, -0.54917738110751402, -0.35277691617823681, 0.015773947805651112, -0.31417397986809892, 0.30088793620120535], [0.72706642452825099, 0.83765585155798394, 0.38196885350691856, 0.50578103170860245, 0.36437984656475098, -0.67990937496495096], [0.025863590416313142, 0.98484158367076424, -0.68077173548821412, -0.20633483575261513, 0.62406597224974125, 0.029715091461679277], [0.53275233286537937, 0.36342366127929937, 0.11783043788420788, -0.06294356076969998, 0.10708088040980868, -0.2363455025898602]], [[0.039485010982840407, -0.9416906243326979, 0.19581066259670843, 0.076049429409880798, -0.7503624056841145, 0.87563966990917041], [0.075589907868268913, 0.527376951790542, 0.19578775978398233, 0.78895886433340623, 0.77763985380279577, 0.68369606091106139], [0.019865716374145581, -0.83304929739695632, -0.2038498203924004, -0.30329770264770861, 0.053348091370216677, 0.038680635898133975], [0.12659163621232072, -0.35567113834080932, 0.51331908436933293, 0.049868109681104222, 0.059440668868496527, 0.013630733835422459], [-0.8811626588096082, -0.79776194490579933, -0.38022487040948283, -0.37069977694976308, -0.94642283550314144, -0.93151913587780077], [0.50469744053914489, -0.88316010812831069, -0.2380155880278112, 0.15296208048718274, -0.42598040676333415, 0.79141844651293614]]])
        ref=abs(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_abs_Symbol_rank4(self):
        shape=(6, 6, 5, 5)
        x=Symbol('x', shape)
        y=abs(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.11155439587814553, -0.83570825800181647, 0.30905030514979881, 0.77966492636336815, 0.26404641022085751], [-0.78229926947026951, 0.18762977691235516, 0.27333918575561245, -0.46241050954311347, -0.53404539813208407], [-0.26477783906220931, -0.81222588561243292, 0.13269649191105204, -0.99148433440819628, 0.77905481900143214], [0.75189561821816642, -0.82157143496939167, -0.20748203231996709, -0.56851347406041652, 0.34595348346978594], [-0.33327766198851227, 0.38076888005069298, -0.2491857642727231, 0.86536672327506836, -0.15365638877614529]], [[0.71781766785252277, 0.72274484687069607, -0.15306394943064738, 0.3851181635046268, 0.88489136587566364], [-0.32458179238391427, 0.064896648625430542, -0.67516803942101666, -0.68235420287123905, 0.38108333220582713], [0.059608395216784293, -0.98383574851351163, 0.96620584778505725, -0.96955706816508447, -0.13796490436629516], [-0.64807441921835696, -0.58753530643398388, -0.72112670475117269, -0.076599627863638275, -0.05775342310976761], [0.96928826504415344, -0.71007471356984597, 0.67246811827987374, -0.60624546777971133, 0.70906462276006454]], [[0.37287046718677197, 0.58393710492621431, -0.85960992649700074, 0.34695349763603422, -0.51977660036338813], [0.95701388826269129, 0.16455917175588697, -0.69037614159132343, -0.18148578025343176, -0.30196132656378571], [0.58144903657489988, 0.2415232720158722, 0.74027390839543705, 0.71462890827785475, 0.6676610498099389], [-0.71978165169761277, 0.034132904630896466, 0.98338950580498929, -0.306102050953305, -0.3201470692815378], [-0.88379257424943192, 0.85175651254295337, -0.21825369110250237, 0.091534924936035322, -0.16827865718241619]], [[0.79644320352421394, 0.67520688354088865, -0.40366709778546195, 0.11084678468284159, 0.35138227363814822], [-0.63409767599601752, -0.41064393499197127, -0.69051922437177327, -0.97745154345490382, 0.76716420250629258], [-0.65355347334526592, 0.31115768941016775, -0.67572834758979905, 0.24177191461339231, -0.78386558878039225], [0.4392589983516666, 0.51751483333749637, 0.87971361849524077, -0.26163594699629056, -0.046809400341840224], [-0.72485054471878652, 0.52228496166083915, 0.76362640526383796, -0.10680121620328387, 0.76139592584658033]], [[0.78891191960367069, -0.99046451394804635, 0.67907169695016711, -0.48995778771912368, 0.96161409884053373], [0.98894204310120615, 0.8382033879768287, 0.22783129159357363, 0.99565217113108417, -0.3767921520827533], [0.91518524971290827, 0.48506534016852632, -0.49391946004894804, -0.27291748331670074, 0.2411710885324263], [-0.19421205054481039, -0.40209519988593367, -0.25435880048864101, 0.11130794913914932, 0.36064831009719289], [-0.96959041972743676, -0.80681962979960531, 0.58498355440016536, -0.17282191076598075, 0.2720775620751108]], [[-0.064141955041188359, -0.92636788286952543, -0.97657921311880092, 0.8825769719690002, 0.27288469598563925], [-0.79755720954708953, 0.09910731493791225, 0.89226255730052739, 0.26343774636013628, 0.18946774159118451], [0.20617125991345153, 0.89861730140206286, -0.73359702586274378, 0.34856560687880633, 0.19789476253800165], [0.27809242051447325, -0.17698061361738415, -0.52801629703643616, -0.12627175440217342, -0.9674288044271675], [0.71894026082045426, -0.073177395911905974, 0.84255871295935747, 0.34772216028371772, 0.68837562160396337]]], [[[-0.93940162629695712, -0.13184934095481338, -0.082023144975795548, -0.98392411664856794, 0.10519714054270946], [0.20669285653341452, 0.012562757142757786, 0.086786348941598312, -0.15429507553745703, -0.022195611912304791], [-0.37277746865831984, -0.65970886814023411, -0.82342155342835288, 0.6710605688097846, 0.7398947085184624], [0.051249479898737071, -0.61725894243272661, 0.95537299945722975, 0.64876015390775099, 0.064675255626812422], [0.87665523709974735, 0.47891151708349677, 0.025448183947456959, -0.500625526357799, -0.016265143589796915]], [[-0.82567827052292619, 0.48705109431561189, 0.56623209245428008, -0.27262789112337549, 0.76533945900407385], [0.33076398653588912, 0.82198288460951963, 0.097871104727800473, -0.60112572012625676, 0.19625764091089559], [0.32629923629148783, -0.071119526152071622, 0.56563488682172736, 0.65807488316765195, -0.26161374616144051], [0.3179058485310895, -0.72053846649468412, -0.1408327640975684, 0.62837759196874887, 0.69932039229536458], [-0.93925059994551852, -0.83233906006645397, 0.13462727994321644, 0.7917261555541244, -0.73139563914577033]], [[-0.036667105205934414, -0.24485816495886037, 0.323591522358327, -0.42057666267403904, 0.36170928669435298], [-0.11426060468884969, 0.28498204370689417, -0.97361383664143064, 0.9891531617668694, 0.34613261892069147], [-0.7410219449662272, 0.95905342580589581, -0.8023485771424439, -0.83711312282877115, 0.33255891977311269], [0.21429275226149236, -0.076230265785005802, 0.80553010716144313, -0.7972117365345015, 0.72127993942291746], [0.7329797914533791, 0.93978511021074462, -0.64321821751529185, 0.71921929476926372, 0.46528286829401666]], [[0.62488165444821653, -0.86249058477051754, 0.5569889656598277, -0.33084046431747516, -0.95635509922449713], [0.16246144925659967, 0.37919184042494036, 0.72440099352870302, -0.62565231545564659, -0.77118423233855737], [-0.16425133939541015, -0.25305047332165032, -0.042665024559153997, -0.55166935405955098, 0.099830832300739969], [-0.050339874360346037, 0.73574802092865532, -0.38003839362341729, -0.24417219552637381, -0.26652744212767621], [-0.72460168831431471, -0.8356865635378885, -0.67689524519813959, -0.63771840342494546, -0.44081553006252339]], [[0.59329645642091156, -0.051284546931833264, 0.82949093277626917, 0.7865045429440396, -0.57124995783317001], [0.86378782259213072, 0.80311564006903025, -0.8125803071418094, -0.24799334622872427, 0.64350444861130707], [-0.18942415001886448, -0.14291798817250667, 0.78680444076579148, 0.63355219601209156, 0.5433503280958436], [-0.61707114500717042, -0.13758092287722956, -0.038024199136998282, 0.98487066682831581, -0.70355036409082361], [0.9663298276402168, -0.2451975041518657, -0.10868067792536329, 0.15116933228372265, 0.31853638515230354]], [[-0.72867679693724274, 0.49552278261820915, -0.72803684494142562, 0.94830413868916552, 0.78778343010397922], [0.18554288280176556, -0.9246160805077992, 0.034154931637147001, 0.4344753420723344, -0.2038526850431357], [0.39359589409729479, -0.063356484751313946, -0.31639284190214312, -0.24344656107623797, 0.36415044972719457], [-0.45040897053883833, -0.87350531592867098, -0.67358247320439713, -0.41033040844650093, -0.56257279093729728], [-0.80422424723407193, -0.0090599864626925708, 0.88207206038608144, 0.34156498313420514, -0.097163315272309037]]], [[[0.97558325933899193, 0.43221781230685385, 0.21411657999992784, 0.080877851199139927, 0.083332911605763726], [0.33655998518017749, 9.4368478730233463e-05, -0.7923148830541491, -0.9523743826801867, -0.004412246630205896], [-0.93522995380799667, 0.97916992621537235, 0.36129372750421251, -0.59524381888832911, 0.53177016596491922], [-0.091562874557433283, 0.045976046969228079, -0.63440739613803676, -0.99079989775937194, 0.88714351219088661], [0.038960248915277385, -0.96831104755010222, 0.36598136773069645, -0.35295025419757464, 0.066349388885381]], [[-0.62394382294521922, -0.3120931071802755, -0.75710435793940523, -0.72965346575687806, 0.92289924433307302], [0.26881025745885445, 0.29935294441137983, -0.8165795865103298, 0.77946640447477056, -0.25358442284966931], [-0.62677497311873287, 0.81063680792217818, 0.84693996584904108, 0.8119009956255292, -0.64256179760276533], [0.077635977888019347, 0.19147782709154493, 0.91683247998220074, 0.3070938354630588, -0.65329683027926699], [-0.83748781889754009, -0.026929628568679531, -0.4723086105397456, 0.202753267700994, 0.3354821157412835]], [[-0.42031885442838113, 0.99806494754168074, -0.84405566711802482, -0.50347788389663606, -0.023114059511474716], [0.40662782363948091, 0.16519451399288321, -0.78053342208824872, 0.51544979615841835, -0.93363047022089574], [-0.21018059776256215, 0.9378031231400632, 0.97212584754565179, -0.3829128312010488, 0.86164234112137028], [-0.17609725777221152, -0.8031747786175083, -0.15230384509801187, 0.73825247132103256, 0.48362846132796333], [-0.80110314626997936, -0.22465042262737067, 0.90078274911658585, 0.51162426586649246, 0.035250192692244164]], [[-0.30031859895833257, 0.45492436720548834, 0.06005701683449538, -0.59819261476378038, 0.60925100565195933], [0.0042712686339025918, -0.29033798850640391, 0.21568603379361995, -0.58277546722149576, 0.41137519819422508], [-0.33939942167919357, -0.39765697380688625, 0.993280129651682, -0.55234831402540085, 0.13689676234525572], [-0.022857387280939889, 0.25679667988579569, 0.93176009998400833, -0.87452401046678507, 0.93039777361436871], [-0.0059152252302656638, 0.75245671320555996, 0.70199619094002741, 0.29082132325293597, 0.54292331343917333]], [[-0.81151614401630656, 0.73898374713194559, -0.14068229774281482, 0.78441318473682031, 0.85328100133352458], [0.25692622372279916, 0.21926479592441317, -0.030429719853546144, 0.84558103223647008, -0.12273082670847235], [0.30158849869521709, -0.46253587327766077, -0.44521480354402265, -0.081114137898851357, 0.19859218275139301], [-0.50135444795012152, -0.017260374572007242, 0.017994060723186767, -0.35391424719053965, 0.34674509011236143], [-0.72103128263178307, -0.60104219232750489, -0.15639018611991684, 0.071396531733930901, 0.78617558653068631]], [[0.89898903975917444, -0.5972524188858197, -0.3461296210622602, -0.22163882038237892, 0.30843336077972849], [-0.61751199350016606, -0.028295236292635861, 0.6499561032608181, -0.59336516737485634, 0.67085611290509406], [-0.007269193809439356, 0.77679299608869523, -0.27759381936568817, -0.26218156377823854, -0.34600795181261801], [0.52388309597523186, -0.83468013794825247, -0.88748787477314717, 0.1734178750408657, 0.19701855051295492], [0.91429283392234861, 0.3066278053783944, -0.58152677684745147, 0.3451074370231213, 0.44590584847803538]]], [[[0.27876878519859294, 0.72367050361484098, 0.4698579397812277, -0.55841126610754066, 0.45158966383148957], [-0.11725395745426059, 0.85466458410370594, -0.97587991383786998, -0.25274146938553055, -0.36931749154291138], [0.32702827505283305, 0.85962527249933141, -0.22722195341342677, 0.49080567493251959, 0.29081232772179755], [-0.031365995680363801, 0.8772783845140586, 0.67511377391665617, 0.14956247224369701, 0.61386384368623159], [-0.00020312198620486832, 0.27165895230830639, 0.099759882830644964, -0.85200068660739126, 0.46555604119064609]], [[0.71076103201418883, 0.072571931446371307, -0.29221505253297564, 0.43603081093921237, 0.49940058646169216], [0.85922412663934722, 0.11217974082313598, 0.42407753784404223, -0.3388085270281842, -0.54157116222426405], [0.69512142183931536, -0.37257427276443078, -0.82471388712120786, -0.70840666938244379, -0.63937369266508082], [-0.83473809428226065, -0.58250833463447149, 0.48042882149766641, -0.47531756174564066, 0.63375505486477479], [0.91708010103202486, -0.15870676248671622, 0.75382156546590728, -0.24392816496736547, 0.27928948631822714]], [[-0.22685931413751259, 0.64466947835952326, -0.38641691197085959, -0.4541812370772782, -0.28400830237487629], [0.77080272657585569, -0.10900354642230714, -0.10541639628454647, -0.3706832635655799, 0.26794524164612121], [0.12167971827197999, 0.25879563101596448, -0.19378713958699834, 0.2421776866850589, -0.41351586533140106], [-0.66247959615766816, -0.22816327304403816, -0.45127893987617274, 0.54893198160199774, -0.60199533978882136], [0.37970159116056457, 0.089735633632783696, -0.79554791423647431, 0.46158905647670023, -0.21589192566386162]], [[-0.01804870230386646, 0.10090492456530042, -0.61557886624311431, -0.39024489806182716, 0.32298854868380533], [-0.17538350279651538, -0.98664297014749125, 0.062420136548681615, -0.6305975848171903, 0.024083230640581821], [-0.76126018849071064, 0.054264189164386689, -0.78362844035012391, -0.82687262704480524, -0.51997774943801978], [-0.66775978786791468, -0.53077387453901914, -0.61847586284863376, 0.1537983414657742, 0.14649311858451797], [-0.81539736395216678, -0.73858306831358811, -0.74441198431187883, 0.11143921752176134, -0.82343612566629232]], [[-0.96563413398877973, -0.24180793195754946, 0.49855356160044551, -0.49979604090700902, -0.45557812819146992], [-0.52677117704892495, 0.4246434020825689, -0.064742601321815529, 0.070618692810830552, -0.45999173682404537], [0.1736376122828005, -0.52331817399602443, 0.38828966568771106, -0.25473083456771839, -0.0043396839063212234], [0.60922304648205317, 0.45808532610170172, -0.54585869700349843, -0.13507372944268803, -0.38274937856823099], [0.76552115562039869, 0.12470235671692254, 0.51082213964338186, 0.10041995638067913, -0.12255734300873322]], [[0.98981582417847913, 0.61546328640484949, 0.92628663344460915, -0.64577343156528988, -0.09409420950387748], [0.50771677867445941, -0.29463743330226944, 0.3340917358314901, 0.94682566732782281, 0.93550905398811524], [0.68554547851864878, -0.77697374844329103, 0.26267254560806763, -0.51155288061572168, -0.62048622829810696], [-0.73393225444326204, 0.84573410171702856, 0.48926453702158512, 0.01095688615492052, 0.57243112951067565], [0.28747512434121281, -0.063390498657096561, -0.67152276068577854, -0.24644660769058713, -0.19515131401864538]]], [[[-0.89330545729220323, 0.85456166096277153, -0.2837658719464784, 0.97941403905573443, 0.28627640147030076], [-0.072801167417636981, -0.23593102679631528, 0.88710668462128384, -0.12364507753109844, 0.78251626222878312], [0.95873518754103793, 0.62713439703904461, -0.4751460331202233, 0.67022231047587111, 0.48281758292812893], [-0.14223444507733918, 0.36495671992089029, -0.52073845466302693, -0.32922587498514821, -0.22193182518935228], [0.80380211265967372, -0.24655261690833674, -0.16778784062830154, 0.64815585119260222, -0.39767113432037249]], [[-0.6041949578273913, 0.44128649316672197, -0.61969217468565696, -0.010847582874290662, -0.72067111444923926], [-0.71199407089260691, -0.44595015412626893, -0.75186115042477097, -0.5962432315221986, -0.48496170655290172], [-0.20490845394646895, -0.45473165643911284, -0.34139187555098971, 0.97772022257361813, 0.76015261337750428], [-0.044341176164955032, -0.15756425628299087, -0.1803955965461379, -0.10688342727490219, 0.36340217371019712], [0.48001544368394367, 0.34918709008888338, 0.7048683647685352, -0.0067029562305260804, -0.44605697901379893]], [[-0.4754348258122636, -0.29182559848084177, 0.33364376207136925, -0.77273080498776947, -0.54294669443101462], [-0.476887235607381, -0.6856036673588497, 0.68282863924525494, 0.53311073477798421, 0.62238257947326958], [0.27593280347515914, 0.096868017949268914, 0.1432261130157213, -0.34201093170040453, -0.498093503082222], [0.7821654854465292, -0.30388690544068164, 0.15988154813489763, 0.30460224781485912, -0.35530775627295608], [0.10382460110637259, 0.71527414905485331, 0.59719575854504958, -0.5500497110713185, 0.67831325888295702]], [[0.19090844280993435, -0.81376018931323602, 0.50181876925612379, 0.043189683567784742, 0.90802900361433347], [0.93830810312910407, 0.32392812998637988, 0.95941030074864164, -0.38330133805752964, 0.2431929997337241], [-0.13929202271500341, 0.89118865517433776, 0.0021125027875521507, 0.096355997832220819, -0.040284128132394459], [-0.13135644086452247, 0.79573574993992602, 0.33573935695556267, -0.40341498455145941, -0.92731204408909162], [-0.56375338015060383, 0.031464097761710441, -0.42567629319318345, -0.20059512547827185, 0.66653147308797434]], [[0.058287379415089102, -0.20305634149886753, 0.4924234025644747, -0.49794766835493931, 0.49501290142275511], [0.93773935588568147, -0.20919520969101058, 0.44447331618016128, 0.49050579631110369, -0.014358051731832688], [-0.937505801941237, -0.98067289237294886, -0.65833947197742115, 0.86941225732294325, 0.82696023224553494], [0.51670167401749856, 0.89931717169253433, -0.55953605289514075, -0.21559585495442946, -0.98437418618372963], [-0.38060918950078904, 0.6229532203665944, -0.54682570043918455, 0.37921948903918357, 0.17831331250022586]], [[0.98531818379513103, -0.2636491898016966, -0.61319721049905107, -0.94170223633520234, 0.076745797499744306], [-0.64913932153784204, -0.71556451119638687, 0.32960906184577388, 0.079274441666167261, -0.45743527128518013], [0.17383641828154195, 0.80404032529125291, 0.30013617824418759, -0.12424109939468764, 0.30631449669555888], [-0.55221949689938077, -0.96280056399393343, -0.73277424713816708, -0.18000008419296987, -0.42373270151283782], [0.68672360287158773, 0.14302310963497367, -0.6264346738065234, 0.18331084231822792, 0.92446850115794299]]], [[[-0.86413778710434186, -0.52167576997527099, -0.69271883776191046, -0.56475279784373011, 0.55848641025633827], [-0.03333154448553044, 0.12777598437678583, 0.1637705900071742, -0.34285617180884653, 0.18919709448251854], [0.073180296340079165, 0.79538800127403064, -0.74526471948013939, -0.53430353253959617, 0.66202619657117134], [-0.66597862869914759, 0.5211713393766948, 0.099966742830234878, -0.49744314260924294, -0.4733581119959156], [0.97198659909185947, 0.36837892633726477, -0.3096491901033267, -0.33233743241903624, -0.145685457108089]], [[0.58851585329858103, -0.41392495532525508, -0.71167687101610788, -0.95795108448112298, -0.22636864994103756], [-0.59370903433153366, -0.31446479789839565, -0.75553497580525075, 0.9455140527104906, -0.98297193447703113], [-0.3508793757598041, -0.55636936972138162, 0.18524120631370145, -0.89504580014178514, 0.75586834121251845], [0.65170780694771158, 0.98881891065021366, -0.6042211096522474, -0.17009129015742386, 0.13314276193206354], [-0.8482795484932133, 0.79828802736090587, 0.67601244211790434, 0.3763927578754096, -0.25454596056818435]], [[-0.99021430767542284, 0.082261039454135654, 0.48933248290474296, -0.35119147482418822, -0.53648012710473103], [-0.11968188651940626, -0.86998771211831838, 0.8432300261296839, -0.67975448598163979, 0.9741710049928074], [-0.44998126309120923, -0.78893166807458681, 0.95555718883228025, 0.059926652007850301, 0.59471450848210927], [0.010918453097047198, -0.59782103218069937, 0.43407925063272135, -0.16261215126184259, -0.18162668513037583], [0.81825458520646599, -0.86612586558323934, -0.12450470041104467, 0.10841253952020313, -0.59249114039100159]], [[-0.76773167034181289, -0.97528433796565417, -0.97745540612602366, 0.23425809238652295, -0.4677495250164847], [-0.28065809730913505, 0.24747520387114164, 0.42369120548261785, 0.053504366397049585, 0.37118529757892493], [-0.66217499017977821, 0.59344324784191316, 0.16008022709893543, 0.76412574056113147, -0.2831276989682161], [-0.69089329933607568, 0.26449728994929544, -0.73290441308268828, 0.39585066464410912, -0.14896055840460098], [-0.43488626047227363, -0.90413811643480835, 0.3982448432334369, -0.043587963824976539, -0.26065562020056432]], [[-0.18703618824270274, -0.3192041252540323, -0.85409697345405799, -0.36972793323477693, 0.61066480595998107], [0.82615334717665734, 0.24453843406030118, -0.65404977989054069, -0.73061567637607694, 0.63664159602794168], [-0.022232495375366312, -0.063563345294932905, 0.34727204115716548, 0.7237530144693689, -0.9248289013701616], [-0.21697470015508791, 0.16493570415156644, -0.79688260520398657, 0.47671851797288589, -0.59806054489148708], [-0.97239222289093941, 0.42420186179373109, -0.18695663545058361, -0.97534066380653806, -0.19244403969498358]], [[0.94330671603718241, 0.48860106234421918, -0.61235331466650744, 0.60996184287997801, 0.59476574083334977], [-0.29612065332062398, -0.3638120700226628, 0.3111257222617998, -0.61274344649460155, -0.88051125267167762], [-0.53158462080103641, 0.89309325636674108, -0.12575510736897688, 0.59265450911238271, -0.11903548324747337], [-0.96168863702550156, 0.97745702492415565, 0.45696777642361663, -0.4042273312194451, 0.21571243524336126], [0.7620478780582427, 0.99277618819906066, -0.97808758035150478, 0.78928306418526395, -0.10674987212640152]]]])
        ref=abs(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_acosh_Symbol_rank0(self):
        shape=()
        x=Symbol('x', shape)
        y=acosh(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array(8.33432665091)
        ref=acosh(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_acosh_Symbol_rank1(self):
        shape=(2,)
        x=Symbol('x', shape)
        y=acosh(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([9.0128340467828068, 1.3718902793945249])
        ref=acosh(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_acosh_Symbol_rank2(self):
        shape=(2, 1)
        x=Symbol('x', shape)
        y=acosh(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[7.553750842366906], [6.937048981588946]])
        ref=acosh(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_acosh_Symbol_rank3(self):
        shape=(1, 4, 6)
        x=Symbol('x', shape)
        y=acosh(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[5.5308249805949483, 1.4699165743642939, 9.434327444936331, 1.2544845857272184, 6.7617834149886722, 8.4343138430179909], [3.547654928552038, 5.5021055889246631, 5.377658252485789, 5.8105784519413861, 8.0533435808276526, 9.9935573134100117], [7.7592876556223214, 8.9791483661733178, 2.1980891704643799, 6.1008409256704699, 1.6202832530216509, 5.3315302850844875], [4.628064837969573, 5.3457530210866784, 5.3242813372330682, 3.0140474460721247, 4.6455001677800283, 9.8479130739468026]]])
        ref=acosh(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_acosh_Symbol_rank4(self):
        shape=(3, 6, 2, 1)
        x=Symbol('x', shape)
        y=acosh(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[6.7547292228013145], [8.5635935852168004]], [[4.2423800895906947], [3.4788581921065198]], [[6.3884151399456472], [5.8979560297184737]], [[1.6077362035587761], [8.249800019236698]], [[2.8700573739949795], [7.9587095263136707]], [[7.8702671885207973], [8.9426792716399639]]], [[[8.1793602239730809], [3.7556505063510892]], [[2.4370272274112184], [7.4289177618542901]], [[2.421132291640288], [6.7576972218020064]], [[2.4199471079657258], [6.0289717034995807]], [[3.3628998247995963], [3.5399932100597091]], [[7.7396420264860391], [2.9668579961943302]]], [[[5.0794498552205996], [4.2397742168412993]], [[4.6837984927193395], [1.5330171437942979]], [[5.6887383250104451], [5.5343924396818984]], [[4.61669656391632], [6.974543763785392]], [[5.0124957495203066], [8.553805516316384]], [[6.2344663683977899], [8.343333819674033]]]])
        ref=acosh(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_asinh_Symbol_rank0(self):
        shape=()
        x=Symbol('x', shape)
        y=asinh(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array(-0.305160854789)
        ref=asinh(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_asinh_Symbol_rank1(self):
        shape=(5,)
        x=Symbol('x', shape)
        y=asinh(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([-0.90566130567458236, -0.65485408305469295, -0.9947131131655198, -0.41736566525102003, 0.51411202752974416])
        ref=asinh(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_asinh_Symbol_rank2(self):
        shape=(3, 3)
        x=Symbol('x', shape)
        y=asinh(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[0.051693176444845612, -0.56672278971138801, -0.52456556653203767], [0.95046634837627941, 0.31855117822251677, -0.54005348948910226], [-0.24559405974841653, 0.62146323558990058, -0.070457585321163529]])
        ref=asinh(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_asinh_Symbol_rank3(self):
        shape=(6, 1, 5)
        x=Symbol('x', shape)
        y=asinh(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[-0.099747309569801823, -0.85649821982787322, 0.95769055567664529, -0.48923559261248606, -0.43673023851597592]], [[-0.34336304221481129, -0.23292958897214211, -0.25259272877858741, -0.86762054215396622, 0.18246329985350096]], [[-0.64937190875559203, -0.9375483992821485, 0.99697101009171041, -0.1805994930306607, -0.85531933416326988]], [[0.5286263998553038, -0.55105746207607176, 0.73167650439283083, -0.51330780550973998, 0.93636724731868748]], [[-0.95808931524257424, -0.65328986543555723, -0.033317894945694038, 0.68643325054785254, -0.23602683901914334]], [[0.88716233794415245, -0.063533550024919672, -0.19336010575533136, 0.52830882899418707, 0.43554406685224523]]])
        ref=asinh(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_asinh_Symbol_rank4(self):
        shape=(6, 5, 1, 6)
        x=Symbol('x', shape)
        y=asinh(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[-0.35307061156966157, -0.70234401731545182, -0.21917497377831152, 0.36103239183750024, -0.97845657929315344, -0.88683274276598234]], [[0.19526505629657143, -0.86350963828254446, 0.36466574387967299, 0.33815468820189953, -0.088518490781789305, -0.98448631788214236]], [[0.21751533470883211, -0.38499009066891543, -0.56102916104162359, -0.61066400494888051, -0.70300555860421632, -0.9069221717453142]], [[0.75982635372502938, 0.79175754716678659, 0.21325395710657813, -0.012611527679127876, 0.88542760003569376, 0.37591061838254469]], [[-0.032778447579340897, 0.22746799954964381, -0.82041836190266659, 0.87088536171295594, 0.31159212254151258, -0.019918588670879034]]], [[[-0.69886019340442496, -0.57125505499663198, -0.25964502764880448, 0.33169516113012509, -0.27033781692687464, 0.69994305584860861]], [[0.55563995835379965, -0.93984397690490518, -0.6221841823381582, 0.54785344598670416, 0.71999849424369544, -0.52920419423577103]], [[0.20441940382748691, -0.14544055611851947, -0.16173533723804479, -0.53228780179955448, 0.68327397863787631, 0.50803332516837307]], [[-0.42413188051364892, -0.68927597082387138, 0.0027727611834111876, 0.55537694550998085, -0.60441328532456007, -0.49799585049208273]], [[0.022113459709550254, 0.3078917502612375, 0.9409020754782611, -0.22071952389935068, 0.55105374272570518, 0.45880690102283039]]], [[[0.41400205790401667, 0.51600565488107786, -0.3672050565124183, 0.39380450891369745, 0.48673933672655156, -0.99986441405168724]], [[-0.80392837155491592, 0.048209125067510517, -0.81542985403196733, 0.54180827210088367, -0.97909230074223252, 0.047769582518340625]], [[0.13119942927031158, 0.58183489486355278, -0.0060855184042900579, 0.091636878405012778, -0.43595190156114549, -0.36908289055036536]], [[-0.069240184987108044, -0.68441234289061414, 0.58985586631194797, 0.68817099069867216, -0.1532625757536803, 0.14390106199626218]], [[-0.1707555460989314, 0.66284569284101891, -0.65819894306612459, 0.69261469616641658, 0.90825588544149571, -0.60605403257544688]]], [[[0.046151720367192173, -0.058783465913183175, 0.59180720989283953, -0.40861380488406374, 0.67772551447921003, 0.67458038268545639]], [[0.59898140236334929, -0.037094070015828873, 0.47424605515766927, 0.0083513935147558893, -0.1298609088660132, -0.17591736235758249]], [[-0.29177772779172551, 0.5938857912189639, -0.038486695289547734, 0.29664347315775896, -0.65556980226360362, -0.16441189699728875]], [[-0.23148210936713176, 0.57558321408779878, 0.7696816595697682, -0.62767391330540456, -0.44266939322795618, -0.37234725826275916]], [[-0.72710482369767537, 0.58352805244329709, 0.089994750773425114, 0.4274623007390248, -0.88352482646470443, 0.6947147473082802]]], [[[0.7418097401474868, 0.059181358108569615, 0.58894768415997945, -0.58076452630925401, 0.31403319692070308, 0.34553756250796464]], [[-0.84165141432024781, -0.19756830819841498, 0.023048307732113305, 0.25486374659367983, 0.91690247220410437, -0.020580147562289541]], [[-0.81316433427978829, 0.69951876391338752, -0.83090926007453159, -0.8499355434676279, 0.45950364872770577, -0.42508989030507882]], [[0.13428521702412199, 0.85891234824892648, -0.47126176589500046, 0.05785351221075663, -0.09367770691161148, -0.036314419212584159]], [[-0.82543927087303892, 0.79857867240704605, -0.39466292239337353, -0.65653695697325043, -0.95950888115702937, -0.4103344010619705]]], [[[0.98749432660155767, 0.13420119315147572, 0.2827537759808727, 0.013490964462358868, 0.45865823828417618, 0.55625800220279187]], [[0.67602232720612854, 0.99007708748446399, -0.82995838328171878, 0.42496963066431337, 0.12709466392982316, 0.17550815586381407]], [[0.29851795320202101, -0.30791746177949575, -0.37994561463961785, -0.60039495416272692, 0.636230943001866, -0.37723957444435929]], [[0.32456060721487034, 0.82195785084497164, 0.88181074660611025, 0.39114286450275526, 0.69859336084752832, -0.5272452744657381]], [[0.80794181065284576, -0.70205449494118066, 0.52611215985687498, -0.087071461626660795, 0.76206206463978421, 0.87004983287007764]]]])
        ref=asinh(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_atanh_Symbol_rank0(self):
        shape=()
        x=Symbol('x', shape)
        y=atanh(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array(-0.30740188897)
        ref=atanh(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_atanh_Symbol_rank1(self):
        shape=(4,)
        x=Symbol('x', shape)
        y=atanh(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([-0.037695893945938419, 0.62526894857112092, -0.14608887353353239, 0.97281037663608805])
        ref=atanh(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_atanh_Symbol_rank2(self):
        shape=(2, 3)
        x=Symbol('x', shape)
        y=atanh(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[-0.48994866995165354, -0.87108789424614907, 0.92847135376392265], [-0.98521216658549604, 0.67177381591923191, -0.67163133834420785]])
        ref=atanh(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_atanh_Symbol_rank3(self):
        shape=(3, 5, 6)
        x=Symbol('x', shape)
        y=atanh(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[-0.92033364610268453, 0.99388006145189145, -0.41941966910330808, -0.93244149103745655, -0.4356371394204861, -0.6210775349477351], [-0.69708658000590629, -0.68952402062515028, 0.042183213576466372, -0.40694493457517789, 0.7849431864031553, -0.75929967130475995], [0.93318463264790141, -0.96483394364736808, 0.31819771987871293, 0.61455392016247434, 0.84692510597902926, -0.098599018203737732], [0.083009924486802777, 0.60303822610566926, 0.015327509418948893, 0.54747907352442038, 0.15533651912011903, -0.099246434130309868], [0.37648522142007579, 0.076873275313921186, -0.411446699875051, -0.25332874809693795, -0.86955467816835941, -0.11619315850304579]], [[0.0084955537723747643, -0.68975415308334398, 0.031559992543882975, 0.79932912673141487, 0.032151060813224497, 0.0048383061434784658], [0.40896612212240657, 0.79690534119603051, -0.24305081794953165, -0.3676461779381619, 0.80976551812475295, 0.12979372346717821], [-0.058360848635138352, 0.29130163650997765, -0.54520313967733935, -0.43251129184164472, 0.22438322462521221, 0.65955648973133307], [-0.13083263409806944, -0.32664445188126767, 0.032787622737061595, -0.46359947666468559, -0.40594638245796477, -0.84799501089934548], [0.78555791182288592, -0.74292882698659501, 0.77698664952565766, 0.66157228417909764, -0.92378911678710973, -0.85550735287992619]], [[0.51878802360275755, -0.48156168958134571, 0.0405181666818617, -0.77314298797897729, -0.35985352760272105, 0.50550081434188865], [0.67081221575966321, -0.39317172082181973, 0.63411778898656901, -0.42290978475273677, 0.69682184663234348, 0.41902937903112281], [-0.18033781727880616, 0.69648074381943736, -0.517085639311746, -0.35013944237370054, 0.88228172783971148, -0.77042333767678128], [-0.079801930980052171, -0.74713782921555372, 0.083476890705281637, -0.41116526607464521, 0.3494486432675985, -0.96933506651778156], [-0.095226946452347416, 0.33788300122952086, 0.50360443740645078, 0.033300398040883694, 0.21849620460283448, -0.89685769739426924]]])
        ref=atanh(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_atanh_Symbol_rank4(self):
        shape=(6, 2, 5, 4)
        x=Symbol('x', shape)
        y=atanh(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[-0.50595458161761031, -0.48012434240442681, -0.54189991532056436, 0.3575458345882756], [0.87181294201370618, 0.96132947469282026, 0.32250944237721391, -0.97639044584342427], [-0.64049473983415095, -0.80783293585467231, -0.38345805421535695, 0.0094834806491435053], [0.59607771803103682, -0.21974170332293697, -0.71658290905993738, 0.934419346207368], [0.21250209916191865, 0.81502491452342296, 0.22186221469875367, -0.16804038807150179]], [[-0.080861692941093022, 0.6764209123168361, 0.70820518808377897, 0.1899028184529945], [0.047522383668316515, -0.1560408724200355, -0.43972303594499662, -0.71627175247091635], [0.50356627540555698, 0.62081910068953428, -0.13091698799334206, 0.71219053794500597], [-0.085354535567049084, -0.002984296890181648, 0.96486237144308196, 0.37278697671976713], [-0.80936368614818055, 0.3285331392508275, -0.11982776888566349, 0.147056748494655]]], [[[-0.49075668167357178, 0.94389548152870839, -0.15872294290043243, -0.26530293739555799], [-0.48057327189098209, -0.84464342314672924, -0.83190065568740001, 0.65245685062068759], [0.84471336966670596, 0.0097716387289095152, -0.17480409446108625, 0.95632671039259431], [-0.69398470304983295, 0.47065276804430156, 0.65358119823831351, 0.1021394632177719], [-0.37803972936713182, -0.73012398023457559, -0.89035232194459346, -0.83284607907675956]], [[-0.46739362628883052, 0.52090225659394673, 0.24901521115430691, 0.71865331081516493], [0.36193494126626224, -0.4395229162287202, -0.39756606891392665, 0.16976393219612951], [-0.93374209020308485, 0.6222628840154123, -0.72269663340760371, -0.28798847385304938], [0.90804390092972742, -0.63530331103511939, 0.73593561865384283, 0.4318272666965044], [0.49713250901508932, -0.14295845495614024, -0.58005296884042301, -0.3336236557013279]]], [[[0.79132250568851292, -0.61789051385021998, -0.62476070800805239, 0.54075469432547507], [-0.16906437906710847, -0.66794690953585922, 0.94890785168424263, -0.015474324418853103], [-0.29889117144243227, 0.70477700609984262, 0.67561924135841323, -0.84709122901916833], [-0.51677646814724421, 0.50150888872188371, -0.4847530134338105, 0.99132929515189705], [-0.89407825481024261, -0.34113479971664384, -0.96823862820636397, 0.45021623575022085]], [[0.88088091470453223, 0.92948601871916847, -0.19076395514815436, -0.81679546833432748], [0.85617312152793246, -0.11226770391899987, 0.17668056661484743, -0.16750425667706259], [0.83399840485467647, -0.60941773402081134, -0.53720561600571393, 0.21986175631068883], [0.63026594889956189, 0.70962713876290873, 0.7594384700932999, 0.90682362718200205], [0.6244759019774655, 0.64144622787676275, 0.13793158314081788, 0.70839487664823397]]], [[[0.95486853181838827, -0.34403721994151648, -0.55331207398602111, 0.16535277047807262], [-0.2779941321896473, -0.84697151875629895, -0.18444077225224054, 0.45925255708781254], [0.263482180060294, 0.57955854743688695, -0.3668203958509324, -0.26006737287869552], [0.67218779452391719, -0.99515793504576644, -0.27320496958885099, -0.35169713718901696], [0.78948918692169645, 0.70805776255978969, -0.61579816940280696, -0.36920148785405527]], [[0.31813346029454825, -0.076326649422539194, -0.34470352930695425, -0.45309118055972597], [-0.46464282018087211, 0.57480355268930028, -0.89339925548515908, -0.11651297927551263], [-0.19040193641982106, -0.86005027194102346, 0.27110647359160578, 0.23056643773859853], [-0.50608063372784984, 0.96529143386638205, -0.74939371610390237, 0.24265446208357311], [0.10966746577523212, 0.65208129067904297, 0.53206632732956027, -0.9173351651692867]]], [[[0.87160044611572718, 0.070787761307107733, 0.44781323588500599, -0.75599903631107734], [-0.06486956834043367, 0.52696571728793185, 0.25090804590547156, -0.18281013491477482], [-0.25654448683208653, 0.41926591495378407, -0.52954384568371027, 0.6135280480217622], [0.036612144566758653, -0.19823012718558819, -0.2402787563130806, -0.40891498574442986], [0.10529083539605066, -0.39968334034362019, -0.1424510102905765, 0.37107738303166959]], [[-0.90302835286851546, 0.33480303513403697, 0.24870368543620591, 0.1555272885851926], [-0.89781074888955636, 0.33338913236325052, -0.98552471300554645, -0.26100742301099999], [0.7666163767488523, -0.35344941739447511, 0.59568351321727508, 0.93389576225863546], [-0.57932600138444368, -0.26678697551817909, -0.61137882986550984, 0.58027253851106719], [-0.40903034032133601, -0.84884546833297958, 0.56372466645224062, -0.82318292656559433]]], [[[-0.1178820541921819, -0.19405562793382547, -0.48743308550485365, -0.97540066244584844], [-0.29406987019157205, 0.23792585529590049, -0.92823196968412214, 0.61277403419149623], [0.95618528896302535, 0.14780603838364947, 0.77437657159224593, 0.64580150234615719], [0.97265391337397089, -0.43071480223735326, 0.53450130670411466, 0.61540570658953708], [-0.35385655175521835, -0.036370170080446851, 0.11720718108113992, -0.61563514335984504]], [[0.68823989059967472, 0.87864572153071752, -0.40335310844017602, 0.65960299419271728], [-0.2890169575309558, -0.042188654359988087, 0.70390836122978673, 0.62944626041251706], [-0.27987332288258782, -0.48190765229162391, -0.99279814238063357, 0.99031419386674924], [0.13435907977926309, -0.29047640203109859, -0.19391974197448847, 0.76118500795060928], [-0.99255389680333805, 0.63833573803280541, 0.8731834845878772, 0.99365950378349899]]]])
        ref=atanh(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_cos_Symbol_rank0(self):
        shape=()
        x=Symbol('x', shape)
        y=cos(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array(0.744313053414)
        ref=cos(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_cos_Symbol_rank1(self):
        shape=(2,)
        x=Symbol('x', shape)
        y=cos(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([-0.87032728164804363, 0.11374008045455075])
        ref=cos(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_cos_Symbol_rank2(self):
        shape=(3, 4)
        x=Symbol('x', shape)
        y=cos(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[0.40440557479481121, 0.48109336729498953, -0.69214590012470145, 0.94316796887954113], [-0.18477061237546843, 0.8169221444969943, 0.81239683394960571, 0.76308094638903867], [-0.04415691513832054, -0.94535006476653605, 0.48642571306477533, -0.81619555658206533]])
        ref=cos(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_cos_Symbol_rank3(self):
        shape=(3, 6, 6)
        x=Symbol('x', shape)
        y=cos(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[0.050830939270013253, -0.32532295006522594, 0.16985234505692848, -0.45372701511022706, 0.71380654136432109, -0.18771902696756082], [0.3413617005706262, 0.1939301785315668, 0.11930509433521519, 0.76345385913042119, -0.27375383729760605, -0.74735951851044935], [0.076028925907605682, 0.27071742352796746, 0.31630062694392613, 0.24553680807206435, 0.017502704678636016, -0.85592641810542514], [-0.081804155310240878, -0.2293916919445349, 0.18707383804290867, -0.36062913429328436, -0.78037998598948644, 0.99794599498745917], [-0.28177191638950894, 0.29429504769405201, 0.28844661160969953, 0.45858996531847063, -0.11657572600116728, -0.44669835924140378], [0.38131338175846219, 0.0059724582328131159, -0.32641416945274382, -0.53822066162485394, -0.2206480842603471, -0.29317687102531331]], [[-0.13081360670803321, -0.9657468143675465, 0.81203946014714679, -0.73358213801123506, -0.32002273769680811, -0.81260536639077308], [0.46010810725996332, -0.65803086228757857, 0.76580456418984411, -0.9789890981942142, -0.85795630094181163, 0.74465292109361014], [0.47671923728939913, 0.36062839353446807, 0.70735897564153349, -0.062707134287202315, 0.51417771069447493, -0.58323501462219607], [-0.8120926869397509, -0.83631123409016839, 0.52727304211122528, -0.33291776607484724, -0.4880680514758382, -0.4741732328864201], [-0.66048284801713941, -0.50907789201544573, 0.21895919612627179, -0.87541715256882946, 0.66024653727823734, 0.79055087481060471], [-0.35270823898426684, 0.75618434122650546, 0.10171155079879557, -0.53034870036175774, -0.71868561541777365, -0.54647152059687976]], [[0.9646286990412023, 0.37618615446213455, -0.62877956939523605, -0.27582306985953076, -0.99514527140199505, 0.83945547763216855], [0.25782129214313154, 0.29497006321385721, 0.64149883663690499, 0.91429427844291267, -0.42853580324366414, 0.7863903871297826], [0.76222765005258286, -0.04697992922695593, 0.10215695616790299, -0.6288057322124263, 0.72639944614772611, -0.60498735009686833], [-0.91861458853302014, 0.58417703366242724, 0.92424491033133949, -0.83820749729209387, -0.060495601844684499, -0.38933016458191672], [0.10796181563958185, 0.033546843096989409, -0.6441137674651829, 0.066504892248698377, -0.72690469719870077, 0.56098745873822287], [0.97582346986034829, 0.19462154113151242, 0.24175349681201519, -0.88105509471613663, 0.52248335924768674, 0.54757860357751276]]])
        ref=cos(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_cos_Symbol_rank4(self):
        shape=(6, 3, 3, 6)
        x=Symbol('x', shape)
        y=cos(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.90130764213380599, -0.3987458024207069, 0.43753960035756689, -0.87096776079254568, -0.6381515048782509, 0.52818156892138601], [0.060117109496389265, -0.37152732319635273, -0.82152519927311318, 0.7348505943465875, 0.91526601626205872, -0.66192735275312375], [0.4247802242122749, -0.61033245627272703, 0.86720071989130298, -0.58988042209986902, -0.53523568505976593, 0.13686036458278328]], [[0.33923293174530578, -0.76709446895195033, -0.15072829523481923, -0.47578836295648741, 0.19713486155029747, 0.10685622312061804], [0.47686465443879755, 0.72190081730519529, 0.063160538964780688, -0.7695313899924725, -0.83843240604395519, -0.24519992446274164], [0.3769419377077261, 0.12679063343481634, 0.89925489452009622, 0.22146365625957376, 0.51040582713515614, -0.15838712669446786]], [[0.048742292663935149, 0.42874107415583618, 0.45753318915841623, 0.53742554048514757, -0.7911887759151679, -0.66050909751848619], [0.97338344695601409, 0.79173118903288331, 0.51619466599452246, 0.034543730156339381, 0.94822574156045003, 0.26298449419533054], [-0.02652986106634625, -0.6860793931174396, -0.75546140130787776, 0.080649735469170647, 0.88523191060171769, 0.65795886110787394]]], [[[0.26981229709094667, -0.81497400207902682, -0.84671727048304057, 0.60261597414286117, 0.22835173019552157, -0.016273828247253208], [0.71909008599842617, 0.50631739790508923, -0.58513308721788859, 0.97676815443708565, 0.69326836772205613, 0.099617483463117162], [0.56247717180353507, 0.74415958645991087, 0.69933058111874336, -0.24296843432043147, -0.50595039440005229, 0.76358511477869784]], [[-0.36158695744226743, -0.014889441705109085, 0.63245934957020289, 0.26090388259239572, 0.89547176184827748, 0.5400078250481779], [0.74407086167123482, 0.57211090016210586, 0.84938266479999358, -0.7647577048106553, -0.30722520483570537, 0.37921401311435399], [0.3036932830547483, 0.91827388803721277, -0.96806787622028212, -0.83914775113563378, 0.37347312453401815, -0.43651632983547417]], [[0.26153352730345625, 0.74640866999307143, 0.038581980598738408, 0.93602414052355387, -0.82591317787693108, -0.55832661997326816], [0.66434432179938718, -0.0091209620279408821, 0.13589585799587223, 0.41241122318231005, -0.75271980315592923, -0.98362937176294785], [0.42199953242922139, 0.54779691779638973, -0.30513320675433087, -0.054582676041165401, 0.081757206126019222, -0.11680967552197408]]], [[[-0.93993915734366773, -0.36134235953934746, 0.050720802074974758, -0.47522738435585521, -0.3447062743317979, 0.33402208154508473], [0.14297379748708994, 0.752683846755831, -0.83219218100303927, 0.19067328012590146, -0.49936335670963961, -0.70311052609382307], [0.40035522085434083, 0.45098789307720044, -0.62210751455260138, 0.084800993027836613, -0.78332596098602347, 0.47619940634228652]], [[0.80950948951586765, 0.66663538777459652, 0.40195617664590433, -0.51355043955739665, 0.29264333009281374, 0.25247356480361804], [0.34066091476879534, -0.69373669367699642, -0.83033162749320533, 0.6714682548819888, -0.50631864812719152, -0.64789490347801859], [-0.43957423913649141, 0.46393526659048501, -0.43444065233104157, -0.25745629603113751, 0.087452173825961932, 0.49829571579454379]], [[0.70746506863339143, -0.98210277106766397, 0.94288430191577199, 0.67623122800889512, 0.62187518177783119, -0.28302424638184842], [-0.82157455997771178, 0.0076091454322362306, -0.63437444811479726, -0.090068418904809322, -0.65908942270294535, -0.53785389603275946], [-0.21515494144345393, -0.42233855220612981, 0.074973319092087376, 0.62606841330103569, 0.3513506009594296, -0.45451785873124106]]], [[[-0.73500731284133392, -0.08209094331524236, -0.85299167589577185, -0.60906595608971781, 0.48651918489478474, -0.99942255956408865], [-0.37687378878108846, -0.5904804429381969, -0.847737519196337, 0.51480435939832603, 0.17375778897441574, -0.77141871255874794], [0.31748009707810954, -0.91839906000681149, 0.58312103484410183, -0.94441904311386837, 0.7358843131742554, 0.17684929962725926]], [[-0.15991886969881008, -0.064523595231283482, 0.35939812595740261, 0.91417417621588593, 0.13287064601742071, 0.25548392778906392], [-0.388554208651406, 0.50138595060097391, -0.53842846203222416, -0.1119828811558683, 0.24453047069547851, 0.87997645522042323], [0.83757243850117624, 0.66840870802633101, 0.62320076199142371, -0.11631044150819725, -0.55311300826660559, -0.18693489799112761]], [[0.7182790090620832, 0.37158268878938516, -0.17003848010446831, -0.053742725158562044, 0.4164094581475426, -0.73132217977551961], [-0.063965043698682944, 0.015717507034008316, -0.52291776972817994, -0.49052724130933711, 0.46426540469355482, -0.1127261365549066], [0.97925656888408663, -0.819196236828865, 0.095591631291240819, 0.72328952360233711, -0.32487162573953232, 0.86284373689811567]]], [[[-0.2027814598631581, 0.67949292564702168, -0.60401437079640963, -0.74538532268084223, 0.5579729432152265, 0.75849102676092461], [-0.019307222401833135, -0.65549342771306507, -0.77233876148109704, 0.89902832360630591, -0.80680119495709079, -0.6405658772652949], [0.94014130102832483, 0.84306872077984196, 0.74800788316015976, 0.0060177474791682783, 0.43725773372525878, 0.34984797819528568]], [[0.94762400130394964, 0.88333082586130285, 0.14220697515329839, 0.79604665198582292, -0.85077316464406039, -0.44937629417352243], [0.83787005144811988, -0.19991403179860656, -0.58188033439558051, 0.11292590964521643, -0.76450749814531305, 0.067751672486419334], [-0.66254592802901957, 0.66448649280648087, 0.99594742653685153, -0.5755472873899814, -0.29480648963969092, -0.95539954185027387]], [[0.70076791457796528, 0.60030660682102432, 0.21214052747322154, 0.76342416049061756, 0.034063173129666557, -0.11733111138881558], [-0.54577914925516335, -0.3273219683667945, -0.65232106965500725, 0.77613545133360429, -0.019419777543767003, -0.70183548064713674], [-0.9414527394835901, -0.30075254640320148, 0.44952020653136926, 0.65042339474085686, -0.66077644624855636, -0.055775779731917163]]], [[[0.4116851957915868, 0.48460392698354915, -0.87832411361741336, -0.63667584369533681, 0.55660890519011175, -0.1862509514015136], [-0.93046503218253962, -0.34957207938656198, 0.61769304269603609, 0.92574017933184405, 0.70676336789471095, 0.088814076834122346], [-0.99497317655862028, -0.1075605435203264, -0.26444564277706517, -0.97685453170078174, -0.71022306695674087, -0.95667061517215468]], [[0.8829996687327597, -0.090941624626471596, -0.62187019552906464, 0.4358229560415654, -0.025857172985317423, -0.3425327120948467], [-0.4345921868101088, -0.25294389885728652, -0.11590349513867215, 0.71403376842926858, -0.12383088352167282, -0.31106072075959856], [-0.095515411521287064, -0.38909371128846226, 0.47375180785996074, -0.3303062624063875, 0.81550659004260839, 0.57986829294876041]], [[-0.37936204571308618, 0.69530465557018317, 0.39233885389717238, -0.58628754854679399, -0.82342883162217673, -0.84345490579231952], [-0.15905901646080567, 0.013874995473203366, 0.57618877843174854, 0.67869102393767622, 0.79958383289872814, 0.5796798096537954], [0.7887874366502079, -0.35953067764963786, 0.56541349919790629, 0.29904866210137504, 0.53708214043586899, 0.39766061906978112]]]])
        ref=cos(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_cosh_Symbol_rank0(self):
        shape=()
        x=Symbol('x', shape)
        y=cosh(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array(0.402108089169)
        ref=cosh(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_cosh_Symbol_rank1(self):
        shape=(3,)
        x=Symbol('x', shape)
        y=cosh(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([-0.67598720921227007, -0.49881014119885325, 0.2299699027667792])
        ref=cosh(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_cosh_Symbol_rank2(self):
        shape=(6, 6)
        x=Symbol('x', shape)
        y=cosh(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[0.89639309186613403, 0.72909659790266179, 0.34662230795430937, -0.71064041663998823, -0.77548621502705206, -0.58207982593263208], [-0.18463194776559, 0.053848226323171877, 0.83067893856903963, 0.43369159112750366, 0.69564729941949888, 0.59955421273446108], [0.87063238696805456, 0.040576236435829527, -0.43175629174862573, -0.024086430651321766, 0.33085278283250474, 0.3180318274923104], [0.24546629681187859, 0.9452888898399372, -0.27356287093192644, 0.57271572373925661, 0.87200819839683219, 0.59949284927717961], [-0.12867145218480447, -0.50066636596699032, 0.30852992931322243, -0.16513524813044667, -0.37315104409421629, -0.55462476134862726], [0.25280517728497376, -0.055220420147431115, 0.53623088293929477, 0.32583990189530665, 0.0039738091869052639, 0.98997804445228321]])
        ref=cosh(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_cosh_Symbol_rank3(self):
        shape=(3, 3, 4)
        x=Symbol('x', shape)
        y=cosh(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[-0.70239984268050648, 0.33088339398914712, 0.16660749245356654, -0.40924309490581967], [0.56607827906859787, 0.12011935947007091, 0.43846194223397128, 0.57649902388423713], [0.57869443180556446, 0.75117486662581556, -0.61169393602489452, -0.56391729859957307]], [[-0.46011438900062207, -0.90684939195868708, -0.47587299655961557, 0.19845111892158607], [-0.27546899095029165, 0.5922308894980024, -0.85023460166006748, 0.18704184430729609], [-0.098275784292758406, 0.33495056497229858, 0.88562922483537854, -0.75546256854041927]], [[0.27193737478971314, -0.49577400090702262, 0.67141717574833848, -0.047584588554963059], [0.051057570065553559, 0.44733262986405986, -0.7626774545685715, 0.91166081431175372], [0.019422710112758201, 0.4465486196061601, -0.34203256346098621, -0.99937332419806491]]])
        ref=cosh(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_cosh_Symbol_rank4(self):
        shape=(6, 2, 1, 5)
        x=Symbol('x', shape)
        y=cosh(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[-0.061743634236205658, 0.22946321456855268, 0.86703993320496897, -0.53316377059117404, 0.70331684372061032]], [[-0.27756894057414661, -0.35711600295974955, -0.12911087703504021, 0.53149199125798607, -0.92285042951248397]]], [[[-0.12593421524892623, -0.056150681569911098, 0.47031733087534233, -0.31812485273293611, -0.76828773826467311]], [[-0.33749793446147769, -0.16832814114339012, 0.40409250194453339, -0.24072992710319219, -0.16641694437351573]]], [[[0.66186076131742633, -0.1205345396673172, 0.30092337319162876, -0.46668878547542914, 0.14330008555380824]], [[-0.36798071219300144, -0.53483406087867502, -0.481909508870485, -0.37485353338074079, 0.97965580238649963]]], [[[-0.66084438709249937, 0.68016927142985151, 0.50202779102215245, -0.55718689524600862, 0.93459975027611919]], [[-0.21607697003893245, 0.087036431973694928, 0.41330747236124288, 0.015219834073604055, 0.2295926388227425]]], [[[0.028410338979888206, 0.86731928618197474, -0.28036076329250337, -0.057943420501337606, 0.63951697010863717]], [[0.18331478341365059, -0.23373557424842173, 0.66845576462458633, 0.58273200111117007, -0.89929604470738145]]], [[[0.31176460885074886, -0.64664533090752152, -0.83263233779065216, 0.27255663724984713, -0.79801387939557489]], [[-0.94804553428057359, -0.52812209760041373, 0.52161168477263287, -0.30795099737284959, 0.71037017671697722]]]])
        ref=cosh(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_exp_Symbol_rank0(self):
        shape=()
        x=Symbol('x', shape)
        y=exp(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array(0.868671218394)
        ref=exp(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_exp_Symbol_rank1(self):
        shape=(2,)
        x=Symbol('x', shape)
        y=exp(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([-0.90380593214520966, -0.62656449506193845])
        ref=exp(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_exp_Symbol_rank2(self):
        shape=(5, 4)
        x=Symbol('x', shape)
        y=exp(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[0.78397405312973145, 0.59035146388683657, 0.62875075822049786, -0.1413436731759623], [-0.30010491653212013, -0.21132080131130837, -0.67326575726351723, 0.41698950821260139], [-0.24041295766119131, 0.76668348248895501, -0.018825514566945589, -0.41610314307895813], [-0.43461869838916467, 0.094807733462043187, -0.58968332524080269, -0.49246760388896549], [-0.47978843847064634, -0.83371167570947136, 0.24758012112036609, -0.8703039249553608]])
        ref=exp(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_exp_Symbol_rank3(self):
        shape=(3, 4, 5)
        x=Symbol('x', shape)
        y=exp(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[-0.58620039755522835, 0.36337755869952582, 0.92402636794214077, -0.83808397422482428, 0.30844867196121051], [0.039632961579486592, -0.052586327191042725, 0.92325064629927223, 0.66552698512300368, -0.35876338482047077], [0.54859234585201255, 0.40306087586478512, -0.95300823467775619, 0.32774574587367655, 0.97494289618741492], [-0.55372884317737681, -0.16667034782612822, 0.22399017746557215, 0.59980611758558178, -0.92084056547030047]], [[-0.19801396240086078, -0.55759032847393497, -0.067395379931253885, 0.079775975516888309, 0.1020278924486353], [0.67184235851298935, 0.27021452130074142, 0.79724018749798109, -0.63587254284764305, 0.46886196775826972], [-0.60927074743760734, -0.17722591142501454, -0.044930720202142949, 0.89347221557975742, 0.37291227557287754], [0.40572712936777289, 0.79928706197880506, 0.14427602704618092, -0.021027222801917711, -0.60600423065638354]], [[-0.50421018881816559, -0.14002424681417569, -0.44295553334627735, -0.40249606939125493, 0.61408513492662786], [0.36349973330540086, -0.86190815382638197, -0.90195022929107038, 0.19370239768604347, 0.99010828753320501], [-0.46896987036159588, 0.9233909626371517, -0.46496527410702737, -0.64720412711975772, -0.92571146869488175], [-0.17464927078531245, 0.54362439780330996, 0.59197092274338603, -0.21537012837486436, 0.10635564448303847]]])
        ref=exp(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_exp_Symbol_rank4(self):
        shape=(6, 2, 6, 5)
        x=Symbol('x', shape)
        y=exp(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.99892598214714567, 0.99074005547977739, 0.76387176897573017, 0.87872031482820478, 0.42586937347640741], [-0.418701546627545, -0.76503610086086304, 0.55384836621382605, 0.0069135710367693726, -0.44002351829313691], [-0.77416892827447392, -0.25419115970574402, 0.40312387535662109, -0.8433593766502161, 0.58054744207671205], [-0.45431488878000081, -0.52304424139510663, -0.58428249707049784, -0.40041492442326665, 0.05085312176619694], [0.94859142540434949, 0.51156577882749921, -0.56257723432061812, 0.6038798980355462, -0.78634719531121333], [0.97134981541977861, 0.2705155983309353, -0.91287133451434199, 0.25898028431065656, -0.45492178665053107]], [[-0.86651654040558346, -0.23796606167688683, -0.90907494500989849, 0.28161973467102164, 0.49568307288099378], [0.45576969673964585, -0.28904458622533569, -0.59036745529393619, -0.89622174403991495, -0.036846157247919509], [-0.068810647720832119, -0.27759754129820835, -0.016944708998201552, -0.81824898991503403, 0.5978354093572511], [-0.58621896771589443, -0.90882779992269502, 0.49275875115929368, -0.8673301367813171, -0.46495595425466241], [0.23703597632279449, 0.23471628444579506, -0.18938191048648134, -0.43204118465780783, -0.4151435992331407], [0.73142781367336496, -0.73258543156187939, 0.10204643577852202, -0.07462101595704862, 0.96147105055417703]]], [[[-0.10374851421307718, 0.36988374323184026, -0.12559075506254591, 0.21124286270354586, -0.45435840482992651], [0.040644591913166828, 0.8865144651640402, 0.7158478820579488, 0.23510609444875374, -0.27275071457407729], [-0.40653126738833545, 0.016553644583680027, -0.054653580839174376, 0.43681397135733513, 0.2095205020314399], [-0.24614236784342491, -0.97825338514529858, -0.37226342883134622, 0.66167568078743977, -0.013374840103652863], [0.98196795789929836, 0.56377038072460617, 0.25813930530654328, 0.47492099206678917, 0.35972433449415231], [0.31617333424738225, -0.55001303877344587, -0.19085226185146675, -0.57430402686585502, 0.53831098488914675]], [[0.19555450324376955, 0.9506006381368679, 0.40598083505182836, 0.18594567228032965, -0.29045315072829503], [0.70720849753798265, -0.89119159629050615, 0.11813266404211054, 0.060727768945146199, 0.28153262443325966], [0.31590977240963181, 0.37787697042615931, -0.5069049168602946, -0.78351235771807182, -0.3525224289381268], [0.64705588679502002, 0.72249934391079718, 0.75599274213041689, -0.96879530861575569, -0.77927969173494938], [0.96630969769917385, 0.28015984115605241, -0.45553644347485855, 0.5645212050302979, 0.99635986389428655], [0.049649085168637752, 0.47542968795066964, -0.34760335808618503, 0.1567744581130619, -0.81133167739719703]]], [[[0.62584871514143248, 0.69872351016447376, 0.076683506047626082, -0.10502680974445, -0.2892164544023017], [0.0096339383502657139, -0.43507603838709996, 0.020184526766267696, 0.14174956933901672, 0.96754240181185458], [0.87057869650422437, 0.66923738316430614, 0.66946039098790266, -0.60647660304952367, -0.41184672707778325], [-0.44095348287591496, -0.56421029180212257, -0.95668038354106488, 0.60029538692703377, -0.37883387762711518], [-0.18312432498447695, -0.16706689191477375, 0.002654462764751564, 0.86870006885228124, 0.52560425660421073], [-0.053946658008284798, -0.62674153410514211, -0.18957326783217243, -0.027619954246946188, 0.74109518424227572]], [[-0.4511043059927331, -0.32663102920775011, 0.75442411953320598, -0.56747770272154763, -0.31104910112534223], [-0.038469538751558785, 0.39347992608554638, -0.67323096188016374, -0.9940226580375906, 0.81696177000497716], [-0.24284426863328745, 0.77053470795170331, -0.89340243979227751, -0.72052395695449567, 0.52995401965684086], [-0.090166604937540251, -0.060344234960793219, 0.26917922222077872, 0.3916960107330334, 0.4393204488002096], [0.26600539828612479, 0.99131733973571001, -0.20614243380621544, -0.65261221748317588, -0.93808249358610896], [-0.3458263680101572, -0.82648441266615325, -0.94130137702247785, -0.83114514681954943, -0.67439275072595928]]], [[[-0.9537478582033716, -0.46778725092049322, -0.010448215705561203, -0.19540803484328384, -0.53204924033616896], [-0.77361777564348633, -0.70549188223589088, -0.079293303491019484, -0.78193136298793098, 0.14821699943777245], [-0.83465015218220162, -0.47972277292372989, 0.24160360490655997, -0.76581346579060683, -0.27057221324884417], [0.36041693513037498, -0.56753544637363684, 0.52379510766188409, 0.056904074080126321, 0.70901801593409708], [-0.83157146425538686, 0.92155094618158029, 0.27423077731933354, 0.19992466263788367, -0.93791552263738609], [-0.97832523586956666, -0.19166899572469109, -0.27762345774008201, 0.89150581047711053, -0.26261757566597721]], [[0.71601027095252823, 0.34185994460838542, -0.7979754625517177, 0.20451240104371937, 0.88144318070992589], [-0.66944354370132486, -0.88564701326565221, -0.39161140936557581, 0.40125172052593072, -0.51370147498469509], [0.13860352410476318, -0.35380056962850137, -0.5902334371330924, 0.28420135920098977, -0.58833868837679382], [0.32218707893219234, 0.92742387401452708, -0.70855565145399169, 0.45308382374242551, -0.2814626579694266], [-0.57175590658235831, -0.099369921829138841, -0.031462233400973316, 0.22785502958140746, -0.11530865875602925], [0.25292042178771346, 0.90595538550572341, -0.87223376119078799, 0.049053363755885426, -0.40809698049839693]]], [[[0.89036534006332557, -0.93019081739752107, -0.68279824759509578, -0.17135016642764178, -0.09670623519047794], [0.099970796120361083, -0.09110559752716596, -0.075365693146379309, 0.21725594077504518, -0.3532053404788158], [-0.1265169993366746, 0.66744478658680007, 0.90756994762842136, -0.62822744656999996, 0.34148262899503656], [0.37270201582441653, -0.048938161484505249, -0.27913908220189643, 0.47903245717247844, 0.19370765019915326], [-0.27715000074199692, 0.63735868092599657, 0.54459640401184028, -0.83548845649900305, 0.23391907618606766], [-0.87934434427225527, -0.19443183763836669, -0.4817524481294666, -0.96405568608012571, -0.45019566308680403]], [[0.62929698383161536, 0.72746409972846293, -0.30580248722096259, -0.40119675704410618, -0.48724222433212327], [-0.63327247838121914, 0.25316020705323328, 0.35493720142992013, 0.51039213372672387, -0.21608498703314916], [0.00059892521596904835, 0.64256462882357912, -0.28605073619740407, -0.018883261588773292, -0.51216567896294252], [0.250884471473104, 0.9651989322537462, 0.86257649740321352, -0.71425913251830742, -0.8143342610938189], [0.38481942228424093, 0.67056559144784167, -0.20216680602478743, 0.83791286075167859, -0.70352409947539041], [-0.54484895017996315, 0.46506132351239859, 0.37631570295057926, -0.059740443013040601, 0.11574338099070913]]], [[[-0.47623377409215339, -0.73262274360392543, -0.13490358335245523, 0.51749666142433659, 0.41688836606618751], [0.48237672198694148, 0.61153331894097707, 0.44761255383225729, -0.45405812216107289, 0.33806739269218999], [0.98074396147916465, -0.2084328162963065, -0.015346524028609032, -0.82235709696022363, 0.28851960553817779], [-0.55288631855668946, 0.56831131085868791, 0.92686749753884201, -0.32530804098977928, -0.7472158615170259], [0.42952271242410145, -0.86425845331235496, -0.46461177379449214, -0.85644585390531724, -0.7513211548334553], [-0.58977229222444216, -0.40292180646414022, 0.63737605115349205, -0.083832829443432288, -0.15987768776744793]], [[0.71649321918585263, 0.10425486868579914, 0.93615867870324254, 0.4752087479232987, 0.65040627967723696], [0.44990563920442339, -0.3866770819507428, -0.31491158125408947, -0.26959214050638702, -0.17167258344834102], [-0.93496893608819143, 0.70387879270841403, -0.27852678218383731, -0.05521099116576611, -0.75726392507912976], [-0.63082457489514066, -0.74196685343675051, 0.43250483205861334, 0.07486604855246326, 0.45427828540779847], [0.96141347022493906, -0.77527378130451763, -0.76949790882106739, -0.14484556479579869, -0.25158749991359963], [-0.71295723928226806, 0.14499664357415831, -0.67828638747239167, -0.26477664845792082, 0.99191445989305338]]]])
        ref=exp(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_length_Symbol_rank0(self):
        shape=()
        x=Symbol('x', shape)
        y=length(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array(-0.0850861845093)
        ref=length(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_length_Symbol_rank1(self):
        shape=(1,)
        x=Symbol('x', shape)
        y=length(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([0.16265521862063004])
        ref=length(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_length_Symbol_rank2(self):
        shape=(6, 4)
        x=Symbol('x', shape)
        y=length(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[-0.052943848824303474, -0.89892923906978761, -0.66135854875188116, -0.73726496191456881], [0.75312590004513313, -0.81760794846437657, -0.15034875775916157, 0.27485527445898872], [-0.92365196196947941, -0.68511507747596201, 0.39028216982189545, -0.38250523763728905], [-0.68610050535936229, 0.69972962958134288, -0.92336114229590094, -0.25782995910905826], [-0.71059679967754041, 0.57854419678239744, -0.64403132121071827, 0.0047885613516003289], [-0.50874802052749191, -0.62209956795408039, -0.54567033751519345, 0.95588637061425152]])
        ref=length(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_length_Symbol_rank3(self):
        shape=(3, 5, 4)
        x=Symbol('x', shape)
        y=length(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[0.75614046384458922, -0.7970498802198851, -0.84966914182900322, 0.061650156275080636], [-0.52659700149031807, -0.68229512311137697, 0.27968575172680166, 0.89140187507329816], [-0.2594477426687638, 0.672991341023915, -0.071397548256503462, -0.22830304678315594], [0.57901934180242898, -0.46487468696648371, -0.66637654768880883, 0.19173801234591537], [-0.72994454574302048, -0.86088113314925963, 0.52244695915063755, 0.38704435676034743]], [[0.81248414404024949, 0.24994021107486097, -0.79916056958985715, -0.58139287932407302], [-0.0072530988668972896, 0.89495201559312076, -0.096430020769235458, 0.24899349370484103], [-0.94204636479712467, -0.6974358120395725, -0.52638195331000559, 0.20243282535855145], [0.3567469247913293, -0.7150729521209811, -0.7240326778924735, -0.99378025496362898], [-0.072743116961521359, 0.91019136488905095, 0.61240071136552143, -0.71313902783548433]], [[-0.74165520760405768, 0.89445492569606588, -0.7015260278845652, -0.42169465043710264], [0.12207796829634487, -0.5045347186205078, 0.22366845239104394, -0.34929167194958644], [-0.2132723695902512, 0.0060316155934456717, -0.94651911355423568, -0.090780075941495841], [0.46484104220262257, 0.68119790066609753, 0.27783882334114374, -0.47421092450998659], [-0.42575079790836123, -0.3180246028958007, -0.54383061445744763, -0.13424568927511604]]])
        ref=length(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_length_Symbol_rank4(self):
        shape=(4, 5, 1, 2)
        x=Symbol('x', shape)
        y=length(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.43391337168683752, -0.60465677985059063]], [[-0.055177440833841462, 0.9434530756470445]], [[-0.073435891790755603, -0.88462861316724228]], [[0.84832776482016903, 0.75612869959334961]], [[0.38756560802492723, -0.83040953095413483]]], [[[-0.70370600450900267, 0.27724640288667901]], [[-0.2381396200854522, 0.8949463357015599]], [[0.25664645951040632, -0.95818018759463341]], [[0.10661353595404566, -0.14324064717287577]], [[-0.36904066147714865, 0.5601361329549055]]], [[[0.9380886233005199, 0.369291340399311]], [[-0.51311825950722567, 0.65374411098057772]], [[-0.88619712161084374, -0.77450359542579061]], [[0.93890691560566286, 0.43101630915167677]], [[-0.072746071827342274, -0.38711750220817964]]], [[[-0.43010793153676441, -0.26376405447248574]], [[-0.74475269801009203, -0.11784853154247688]], [[0.38457877308017463, 0.21050899999232486]], [[0.17269051405915459, 0.22281671178151807]], [[-0.43258223318309152, 0.68688967521104427]]]])
        ref=length(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_log_Symbol_rank0(self):
        shape=()
        x=Symbol('x', shape)
        y=log(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array(0.933647132269)
        ref=log(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_log_Symbol_rank1(self):
        shape=(2,)
        x=Symbol('x', shape)
        y=log(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([0.11792061292161338, 0.01357918648343226])
        ref=log(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_log_Symbol_rank2(self):
        shape=(2, 2)
        x=Symbol('x', shape)
        y=log(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[0.96940703536799999, 0.26890808026192681], [0.49905387111493626, 0.82897583793055762]])
        ref=log(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_log_Symbol_rank3(self):
        shape=(1, 3, 2)
        x=Symbol('x', shape)
        y=log(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[0.10995093121514865, 0.62367460451891454], [0.21625862770736737, 0.56655589492104996], [0.87643553881147784, 0.8773528186209496]]])
        ref=log(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_log_Symbol_rank4(self):
        shape=(2, 2, 4, 3)
        x=Symbol('x', shape)
        y=log(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.23606913816015562, 0.56342076719137402, 0.7355680717663261], [0.87353804059814133, 0.063485902161437568, 0.10271601880941661], [0.69910106754486201, 0.58013165276339895, 0.59785507040371511], [0.73249771392271545, 0.94010183482258813, 0.89868933510338556]], [[0.032508796538927687, 0.73590785377602674, 0.15349607539756871], [0.36264001270000867, 0.36714564155514551, 0.41729575745727165], [0.94421837500544636, 0.18274769154072701, 0.68178342629196209], [0.17792389605939896, 0.73275446346331308, 0.81336989984543018]]], [[[0.88744177017241188, 0.85873629930321715, 0.97507712095240717], [0.084433269375262299, 0.15767258573918608, 0.89150470228155243], [0.083123333681785705, 0.041344575544608242, 0.26969215541405434], [0.52934016018314012, 0.8921888927497269, 0.29452686829524577]], [[0.2966879293794692, 0.68861065698170842, 0.22873908069549942], [0.39004287331871179, 0.93321789403503774, 0.28095086798977764], [0.48479875970916408, 0.0080870744933340122, 0.25722147686058128], [0.97747036312105429, 0.50422410526950479, 0.11611910077924759]]]])
        ref=log(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_log10_Symbol_rank0(self):
        shape=()
        x=Symbol('x', shape)
        y=log10(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array(0.347856708898)
        ref=log10(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_log10_Symbol_rank1(self):
        shape=(1,)
        x=Symbol('x', shape)
        y=log10(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([0.041435179881683326])
        ref=log10(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_log10_Symbol_rank2(self):
        shape=(6, 3)
        x=Symbol('x', shape)
        y=log10(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[0.99613533442834201, 0.4683193206346935, 0.024821451397177174], [0.88167219799107521, 0.31599217147679737, 0.39303509135374604], [0.44887007561917169, 0.27332757622653436, 0.79270337442892291], [0.34239186333303406, 0.19323987804499065, 0.78415869153051831], [0.49054112456004362, 0.22352684577211168, 0.50058310573313347], [0.69929979685310217, 0.74132037078258828, 0.22229562390649693]])
        ref=log10(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_log10_Symbol_rank3(self):
        shape=(4, 4, 4)
        x=Symbol('x', shape)
        y=log10(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[0.006201015687615663, 0.44678418936240016, 0.11393045931762491, 0.14767106517447737], [0.99213395140538863, 0.096701362888215625, 0.080137720753376884, 0.59608969607795803], [0.1649740794847262, 0.17903608781911573, 0.10397487301044916, 0.30005418924408089], [0.57574138095591965, 0.23573768445109666, 0.35364904618770332, 0.42096530998573722]], [[0.72024561052575187, 0.33804080960621907, 0.57653102401096301, 0.7248843873550429], [0.85606455589325414, 0.62016418922318639, 0.4462615181120112, 0.71201191262301711], [0.67680508742469314, 0.85371893356278916, 0.16073018156721397, 0.73575727855696882], [0.43810529714808255, 0.86137706008496795, 0.17135123369957361, 0.27987373944402261]], [[0.12494546604463141, 0.82711569965951537, 0.46782996355314155, 0.4583135033088287], [0.70313230830271423, 0.12411986989392909, 0.026019821690750122, 0.9917446071884779], [0.37601769346192093, 0.056416043973086194, 0.24486536731342401, 0.9094207101114351], [0.80775593784039168, 0.76640871892364171, 0.082564461225778651, 0.9909219110346047]], [[0.55762087607518296, 0.11434716213635954, 0.11905256803251851, 0.97885479463982328], [0.67505546020807117, 0.10600480609003216, 0.43806458676964533, 0.18697697012647163], [0.89314124452818988, 0.5750637566686152, 0.71777337905908223, 0.59664839059582098], [0.8095993172662197, 0.65975557340855095, 0.14346222032468003, 0.24007947476801927]]])
        ref=log10(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_log10_Symbol_rank4(self):
        shape=(3, 4, 2, 5)
        x=Symbol('x', shape)
        y=log10(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.12630161878201962, 0.89996556713466591, 0.42786410383579931, 0.83565099350193972, 0.23144752409353553], [0.63962046133823292, 0.8572118529562921, 0.53601185908417859, 0.80535070709505263, 0.30629645207333567]], [[0.96252692319747057, 0.61636453715308437, 0.9480055409457937, 0.25333186178369593, 0.77550344001781157], [0.88550002502802183, 0.9361825771824589, 0.9511182682228605, 0.45184724029617362, 0.64513242672505311]], [[0.49022318290716882, 0.67729168375482041, 0.67631866095446724, 0.46955272976375906, 0.43279848677707577], [0.44242855558558336, 0.68549315295593105, 0.21151455499941452, 0.92290659870445335, 0.14492879817497295]], [[0.13070104049127251, 0.5838089990213452, 0.85816616301035931, 0.86073825457507935, 0.30629314746448877], [0.18323133014441795, 0.086424016332063647, 0.51109084748982037, 0.14245719077571772, 0.28372277013247482]]], [[[0.92105799399164645, 0.90852184208317122, 0.62502604284418739, 0.60271676417111852, 0.19111882573039229], [0.55971788121314858, 0.17485836905254604, 0.18665908062080372, 0.97277265942183933, 0.39506681809633704]], [[0.28205102866253629, 0.72047971630703367, 0.59542884327703238, 0.028041473326696154, 0.16511304563801688], [0.26616654001893381, 0.11870377320527892, 0.39091028504731939, 0.72929439594289502, 0.99080367868098185]], [[0.4330126389822252, 0.34927934897176249, 0.019153599599201598, 0.35264646448457682, 0.66267409670050215], [0.1318303855854428, 0.51823124807672216, 0.31930637393164318, 0.87276276928129937, 0.96900874428805384]], [[0.6730434280285108, 0.44616363447621921, 0.80718331352467687, 0.33019814492634059, 0.96814664924725213], [0.69711513756553101, 0.61710998804286898, 0.023240676334383981, 0.66628263347643346, 0.87564497317581491]]], [[[0.73235461132842761, 0.19731111317567052, 0.85110861781426062, 0.58145787666529214, 0.15054576056195623], [0.3274978042735095, 0.61783337742911271, 0.28384540496239763, 0.2965507103116356, 0.49025440461936642]], [[0.62547415454012301, 0.63983950006797385, 0.1583721566198486, 0.97796734220753079, 0.062392453625810584], [0.30290499227719081, 0.60125638913706314, 0.68557052839218402, 0.24726734150914698, 0.0086339578708469755]], [[0.74371133586238303, 0.47226364511152663, 0.75521616147072423, 0.92612196316882089, 0.82411652724054285], [0.74492714349044797, 0.86746177592359086, 0.61548078178806054, 0.26189309903691826, 0.026071866810553734]], [[0.4989960042228434, 0.031616803663848669, 0.41784801493723323, 0.093906620459975887, 0.50268668408573935], [0.36854161209937919, 0.79104449277469147, 0.22654446087230118, 0.9504670330223175, 0.0088543116805742672]]]])
        ref=log10(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_sign_Symbol_rank0(self):
        shape=()
        x=Symbol('x', shape)
        y=sign(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array(0.283463886196)
        ref=sign(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_sign_Symbol_rank1(self):
        shape=(3,)
        x=Symbol('x', shape)
        y=sign(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([-0.65206839399319771, 0.16123474894522061, 0.31321443083699041])
        ref=sign(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_sign_Symbol_rank2(self):
        shape=(6, 5)
        x=Symbol('x', shape)
        y=sign(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[0.88946847522358374, 0.60573063296197827, 0.27581900236821921, -0.90138529031484982, 0.15992371094620927], [0.13580313247911491, -0.24716831488142144, 0.74871398327860583, -0.19051451047160928, -0.71631489968178808], [0.35746825856779618, 0.74078012214831768, 0.17591453625719744, 0.8158168087943416, -0.58006166321948216], [0.64170016038862854, -0.95652114189516135, -0.2993781902644026, 0.87735101371959523, -0.31205467318388114], [-0.13629598275355348, 0.87638106543296845, -0.035515856688235647, 0.56818498937810524, -0.32184575724151343], [0.73652802160731357, 0.41007052372594077, -0.24653081237167784, 0.93471365778353666, 0.96929716156982693]])
        ref=sign(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_sign_Symbol_rank3(self):
        shape=(6, 1, 5)
        x=Symbol('x', shape)
        y=sign(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[0.12488461619160152, 0.6189256105793064, 0.81731285483651273, 0.057575667673535502, -0.27302024435862116]], [[-0.55747663690651539, 0.67347250923053026, 0.41508716292191572, 0.34438889816834739, 0.82610683849987576]], [[0.13646072589729075, 0.83489005146350359, -0.81436951708774119, 0.27781036711871465, 0.3991299374279853]], [[0.21375415399811049, -0.63387380014580308, -0.89542549288314599, -0.70675150643338536, -0.64199992430266595]], [[-0.911036556223497, 0.58205837805508076, 0.80164541166189185, -0.67139474244321518, -0.62623961848882659]], [[0.98097840038593898, -0.082926027295865623, 0.1127891656366844, -0.72349077652818106, -0.39436533830849907]]])
        ref=sign(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_sign_Symbol_rank4(self):
        shape=(3, 2, 2, 6)
        x=Symbol('x', shape)
        y=sign(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[-0.88468163251123477, 0.54686693847726175, -0.92320346917053242, 0.78631937221296133, -0.60049132528830529, -0.55265402952790943], [0.53446032202249838, -0.39200963826857449, 0.33247037649691924, 0.79544188664086501, 0.12786248981090997, 0.10523282129499889]], [[0.61258137823621728, -0.89208402152089916, -0.050266914569775611, 0.66900760863608366, 0.63214120871880009, -0.13229885576062506], [0.48184964559024124, 0.087184524958812792, -0.0913268841923911, 0.12665859184636252, -0.78657021543206396, 0.22224173140648817]]], [[[0.33210018626561033, 0.60046207421334574, -0.22716651660805054, 0.6959962401375881, -0.34989442874686771, 0.79820234467951101], [0.19478385839209311, 0.34025166496158743, 0.50781583462850755, -0.68619443174886974, 0.93993273918610476, 0.16862424968148226]], [[-0.29439704342602258, -0.18724048547741856, -0.45916276219721763, -0.091683389584340969, -0.19608978710515679, -0.7964053837696512], [-0.50466497982036196, 0.64079454842159334, -0.79562973298907091, -0.26029213543357077, -0.59329778773248676, -0.2665482276917952]]], [[[-0.48130653789868072, -0.15460459987523367, -0.032036098984846273, -0.35128489317393452, 0.049926793333450625, 0.91512584187491841], [-0.97147039658359602, -0.65743216796947723, -0.98973579088744801, -0.88028686952088853, -0.19036086304104227, -0.046471908881588808]], [[-0.685691683739164, -0.64336976756447606, 0.20036584817567049, -0.93764648998417721, -0.14459089331036989, -0.75280746874026083], [-0.9844449907702093, 0.84495017441043818, -0.60223422426517903, -0.73337110581481935, 0.048300049957334057, 0.48775355162559775]]]])
        ref=sign(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_sin_Symbol_rank0(self):
        shape=()
        x=Symbol('x', shape)
        y=sin(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array(0.806494816755)
        ref=sin(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_sin_Symbol_rank1(self):
        shape=(2,)
        x=Symbol('x', shape)
        y=sin(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([-0.14217393239488274, 0.98785912943947607])
        ref=sin(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_sin_Symbol_rank2(self):
        shape=(6, 5)
        x=Symbol('x', shape)
        y=sin(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[0.53225674215323204, -0.68998376717542764, 0.84868457441180278, 0.48342746462391273, 0.17564955429610674], [0.55367478552571137, -0.78765901356387413, -0.8732643145100536, -0.5600371146458607, -0.25676236704470257], [-0.32231949333211896, 0.67537878999101131, -0.090980870608313502, 0.062022771742478611, 0.11278565839899102], [0.95718861664077748, -0.30494396387697376, -0.11645270873242297, -0.52320089827656258, -0.71003572457652964], [0.19128373204429105, -0.06553710150373826, 0.83023287176575522, 0.54557000559044178, 0.022071814829973446], [0.46052084118436776, -0.97764454609480933, -0.12302854399484375, -0.69757955006782657, 0.74012456453125886]])
        ref=sin(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_sin_Symbol_rank3(self):
        shape=(4, 5, 2)
        x=Symbol('x', shape)
        y=sin(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[0.24822193694009465, 0.44324891470959193], [0.25153283214214817, 0.1404613671415087], [0.078333702673272887, -0.39690151889957992], [0.89336829293650521, 0.58031734746220742], [0.4900946171670495, 0.33925702973631777]], [[0.84719425537273696, 0.90048690210002746], [-0.29633596989846511, 0.99757982896602404], [0.8467018261563708, -0.048232109499655618], [-0.67605995795458962, 0.222995756141255], [-0.47168879782172213, 0.54043652948644394]], [[0.29927490968719028, 0.18037839091270191], [0.86077415013686176, 0.62740915158555932], [-0.15579711665760687, -0.087383115973965531], [-0.90421931073758954, -0.47497114414024533], [0.025825625246484352, -0.73630134715961315]], [[-0.95157739871582803, 0.28999808727686438], [0.54347507342953794, 0.35277854141980125], [-0.11330223698164588, 0.36600752673467118], [-0.14861072232300576, -0.67729500099083562], [-0.31329081546740145, 0.78565204313586534]]])
        ref=sin(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_sin_Symbol_rank4(self):
        shape=(1, 2, 4, 3)
        x=Symbol('x', shape)
        y=sin(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[-0.8867015005019121, 0.09130938354044682, 0.92879957810002045], [0.94814781525533065, 0.51668915657752112, 0.36419539008571666], [0.97373776118387068, -0.67878659983133161, -0.70032553538612241], [-0.81394051819612101, -0.0083280562696625982, 0.8733202307122645]], [[0.39097293980210224, 0.58544622088287457, -0.58342843522771459], [0.7301553738025337, -0.89109655451046144, -0.83359606042469192], [0.078436468813519067, -0.8855103441253307, -0.99253480515722781], [0.33545884627727718, 0.087738967766399112, 0.72900775198552026]]]])
        ref=sin(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_sinh_Symbol_rank0(self):
        shape=()
        x=Symbol('x', shape)
        y=sinh(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array(-0.331554413612)
        ref=sinh(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_sinh_Symbol_rank1(self):
        shape=(5,)
        x=Symbol('x', shape)
        y=sinh(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([-0.3053529162492914, -0.78017560186562696, -0.93342129385563477, -0.10131598115050711, 0.39330397208564793])
        ref=sinh(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_sinh_Symbol_rank2(self):
        shape=(1, 4)
        x=Symbol('x', shape)
        y=sinh(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[-0.38237732203172126, -0.55716472432383513, 0.026788427519585767, 0.65437689135115829]])
        ref=sinh(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_sinh_Symbol_rank3(self):
        shape=(1, 4, 3)
        x=Symbol('x', shape)
        y=sinh(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[-0.081110017760090525, -0.61386338824980435, -0.44322727115584404], [-0.1383002034650449, -0.60650452780637698, 0.39548715338297247], [-0.01856371117805633, 0.4968247233952412, -0.28195526666504778], [-0.49929933637022583, 0.64395058941351802, -0.94266710031397016]]])
        ref=sinh(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_sinh_Symbol_rank4(self):
        shape=(5, 2, 5, 6)
        x=Symbol('x', shape)
        y=sinh(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.43882669357943427, 0.10328282246831444, 0.64960275146936564, 0.23024110897586469, -0.44908755757789409, 0.236968013762338], [0.27575410276805656, 0.22472977038763897, 0.20526996862022551, 0.33941794759212507, 0.98046152178253654, 0.19184527848563637], [-0.8042423489731072, -0.10462264882909023, 0.49528872848968208, -0.62927275980586117, -0.41483700956105585, 0.98739265029963996], [0.51494400234783333, 0.70839810802096781, 0.72184141680583336, -0.95372448212767424, 0.59905028145913941, -0.54332072168996826], [0.23809081343561478, 0.35120670692286415, 0.50295899965885016, -0.19331314191057847, -0.3717320350230322, 0.66330287250223274]], [[0.7342226979017572, 0.10340753905504574, -0.1480789370010156, 0.56801961069810503, -0.75117099921009989, 0.18392002163889787], [-0.35053941569940772, 0.30877287733153125, 0.080952916029684463, 0.50935555022917578, 0.54952646654099513, -0.76914561892960198], [-0.95921388984505063, -0.35491997450632606, -0.56996125939420073, -0.3011568029301257, -0.60397025573818053, 0.76762761779426092], [0.89000022668951773, -0.23410218933315008, 0.30384508903724239, -0.39213632654672881, -0.62998002223313421, 0.82577362735204329], [-0.46458976005833286, 0.052794172992126187, 0.20567475802508528, -0.1329275100142131, 0.66406468229778803, 0.25138985582508089]]], [[[-0.99240817414124693, -0.18510730665105912, 0.43763073044873857, -0.57335605216547747, 0.49995833515783095, 0.64039747704390315], [-0.23822501431410315, 0.54824513333397307, -0.65236158639278496, -0.24888604686359672, 0.51698477524568043, -0.45073123862350584], [-0.49956517947575452, 0.97618112281667302, 0.16234544737689949, -0.42575675612930164, -0.3797684474279206, 0.91342076568702146], [0.032905888238467851, 0.36098371345848834, -0.53539200235021234, -0.25860071269316198, 0.4939047737229374, -0.43898276363865096], [0.84985581832986834, -0.33526812975156517, -0.64639167522558072, 0.19795136296970006, -0.94791419981984393, 0.8608277140547036]], [[-0.83505340588281718, 0.95916518455496469, -0.28962110056720336, -0.57710674386264849, 0.64659386519547413, 0.61006163511572331], [-0.71722304724963681, 0.2399839181560699, 0.60883136789783454, -0.52625706526781002, -0.58977296606778107, 0.60651799551253283], [-0.092865341267572177, 0.1808706356060179, 0.57379396990025655, -0.44800437849006514, 0.43436390279457471, 0.069821885057861355], [-0.45866641969877797, 0.073423971971385393, -0.91916012134924929, -0.14371158970924913, 0.12650637655764063, 0.41949523803526167], [-0.16249695382867402, 0.54343832521984869, -0.27150191477396501, -0.70720770655593368, 0.73012244133363091, 0.48200524546831347]]], [[[0.14051555052239584, 0.068685178417353443, -0.63209077205364594, -0.25469845942084723, 0.69653348115906266, 0.18298338450665574], [-0.45378403194132932, -0.50768390372974803, 0.14147901088140769, -0.95370972601137516, 0.0010717481920834437, -0.8277077976242746], [0.096767094825636724, 0.23120876113510058, -0.077810429896721267, -0.31436446927299477, -0.0024680072837244271, 0.36386771694199238], [0.57445016315892783, 0.38932381359760648, 0.33537169376028864, -0.032127364338354614, 0.83928736707680485, -0.84814295801457074], [-0.96161550856334665, -0.51598304960450281, 0.78264941017017708, 0.31645269870291903, -0.95224749591556401, -0.44707647210992651]], [[0.89963568108709357, 0.92622380845038577, 0.324976841049194, -0.40309130398802639, 0.32916288680527273, 0.091630446131983456], [-0.97312897646438068, -0.096211189571948186, -0.21959652246609784, -0.16571702008699063, 0.92006917324691306, 0.22366149577001448], [-0.18733557240291798, 0.33531831728503625, -0.35422464084056182, 0.69667812569709664, 0.26396570854498203, 0.95669062865555232], [0.84876961864794542, 0.79249936339962579, 0.83473013506265903, 0.76474546722972891, 0.07713103251627107, -0.89823562202733398], [-0.52018690611640772, 0.5174728094772012, -0.77227167120387508, 0.99271630771937902, -0.41223288162895888, -0.24442047718999027]]], [[[-0.32361574747647714, 0.81995361746060325, -0.12230280810166305, -0.52917945359511331, 0.17521483495045298, 0.31938310243794565], [0.36089632717507869, -0.30276737149979649, -0.29388077306946747, 0.2481460794501138, 0.76132294200623241, 0.67850279313504225], [-0.22828000065777365, -0.27018716464652281, -0.49121596518502719, -0.83733491161314944, 0.62275130677031343, -0.77593702798632203], [0.3671187973442267, 0.20077385258283553, 0.15469295267129657, -0.41198141650257414, 0.47250078191960454, -0.90773131568231946], [-0.49278928850502379, 0.99395699886665012, 0.42426333721302245, 0.94490417019432216, -0.84154085311461713, 0.61225735328558639]], [[-0.53838341008728885, -0.19889850014600685, 0.78551680521033718, -0.72528328293653233, 0.35387389562237126, 0.76618770529281233], [0.73593157267729303, -0.093280754186395143, -0.94598773880603648, 0.30184845201099564, -0.55192839465686339, -0.55314176684546812], [-0.069319186450431003, -0.34846128951234756, -0.035534102171722148, 0.80991061185957425, -0.63423383121369548, 0.17612646461258197], [0.77672752351153052, -0.69325933254394023, -0.76082288979630186, 0.61134868832854239, -0.96677254387836631, -0.053956585109321331], [0.24420783988176042, -0.96635016252449857, -0.76141533064692268, 0.83573310980105564, 0.48527918281051874, 0.66940527732713639]]], [[[-0.016056819708793579, 0.05846564777572727, 0.15382201003795282, -0.77323335366925239, 0.26344340421912826, 0.20419390916838442], [0.096386288975591761, 0.10303361060009042, 0.5435628606532934, 0.81626036916225009, 0.87755498312375724, 0.43695961077954815], [0.3529532389445833, -0.24938866723774411, 0.85829827162343042, 0.51877324901443322, -0.56515654392821202, -0.70070979640802866], [-0.98674675104937593, -0.079516974601082646, 0.92262600789785387, 0.25785405107861781, -0.53054775860423375, 0.26557881460186383], [-0.58610461614109277, 0.77394001645663746, 0.073960951904489924, 0.95570337141849171, 0.44490106702072163, -0.62402158681407305]], [[-0.56319673268175818, -0.27626244901632191, 0.39032403922220937, 0.72527473091644601, -0.096833362196748318, -0.46134881399913241], [0.23733352894982018, 0.99927215082753262, -0.97128036672383944, -0.4724667257239048, 0.74392211358098903, -0.36014367071114628], [-0.73597441701035748, 0.43624964134381816, -0.7390955605045455, -0.40953687871499178, -0.45218870613448559, 0.97465237874657351], [-0.88902517569426265, -0.088406896409418678, -0.04987338649640205, -0.98143819739671434, -0.047189500198992818, -0.74972817013366444], [0.80140223281065714, 0.6182003516473471, 0.7492002957505739, -0.29373320137457726, 0.47218345679351037, 0.47796707647370762]]]])
        ref=sinh(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_sqrt_Symbol_rank0(self):
        shape=()
        x=Symbol('x', shape)
        y=sqrt(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array(0.324754721187)
        ref=sqrt(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_sqrt_Symbol_rank1(self):
        shape=(4,)
        x=Symbol('x', shape)
        y=sqrt(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([0.26765040678341656, 0.3670450357457814, 0.69625872066949546, 0.20660457878994687])
        ref=sqrt(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_sqrt_Symbol_rank2(self):
        shape=(6, 5)
        x=Symbol('x', shape)
        y=sqrt(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[0.39123344388578152, 0.77925870517465323, 0.81623659466290022, 0.12292660142884382, 0.9566707586441916], [0.29000447581476985, 0.38464635072721609, 0.57924289966184273, 0.31131191936027958, 0.95911423129493878], [0.85833016474457213, 0.11640473799511308, 0.42653779443263717, 0.43959782523188329, 0.374879056191043], [0.80564150338609053, 0.55545292124627588, 0.99471232891452244, 0.49832333085839509, 0.52017131224963786], [0.14394178787944423, 0.82967265755312047, 0.8678088666738597, 0.92372546207662254, 0.74985872169491541], [0.96103757190914707, 0.24109533933857896, 0.94424788590672748, 0.29272372275813874, 0.17199419761767942]])
        ref=sqrt(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_sqrt_Symbol_rank3(self):
        shape=(1, 6, 3)
        x=Symbol('x', shape)
        y=sqrt(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[0.006956941817839235, 0.29305982046215495, 0.93320915199121557], [0.93126622200125386, 0.45072320950811529, 0.57387646451660779], [0.72434228872747741, 0.052142552639607653, 0.93903764376119325], [0.33089502563435591, 0.11339428485719194, 0.18116785713131234], [0.66134066764255994, 0.3916991362196971, 0.73782436057543899], [0.86297287075424189, 0.94344810257283318, 0.27367944724197735]]])
        ref=sqrt(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_sqrt_Symbol_rank4(self):
        shape=(4, 5, 6, 5)
        x=Symbol('x', shape)
        y=sqrt(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.55285492440574346, 0.12272346421938074, 0.19809396758149922, 0.67563062021988296, 0.67819572129598971], [0.50280495937824543, 0.19040156891583793, 0.04451067860262492, 0.67460872086977541, 0.44505281493221172], [0.1903318039998888, 0.41627350239471794, 0.25849619931511836, 0.65713026293291621, 0.86054540958496362], [0.43488260556157321, 0.53096076820345173, 0.52418070767052793, 0.47023812013538502, 0.50124299423405727], [0.44298194441721872, 0.58501579242875479, 0.52466011793638245, 0.40957892657450568, 0.50168987300141155], [0.075078619118925549, 0.82278287951399975, 0.14070153523377504, 0.51856125272219789, 0.19626780135687982]], [[0.89005739734755895, 0.75645442133347718, 0.31581744176190285, 0.60581329421168384, 0.71971278721687537], [0.63084595673894672, 0.97223912394898171, 0.76383167696681031, 0.96300275765324816, 0.23427465724513785], [0.53420972515275111, 0.44967637928701754, 0.11331199490504062, 0.62534307168822856, 0.83010604586092429], [0.60697120450339503, 0.70165718295391744, 0.6963045619946997, 0.27651195621349911, 0.40470093262855655], [0.7665088742781434, 0.84019683664239575, 0.30756798072314007, 0.65882676010542107, 0.42701976897813299], [0.03992494531691948, 0.70036622106918811, 0.10378974220587422, 0.6883671495399416, 0.8051906140183438]], [[0.99143973319057321, 0.7249984147539883, 0.54149103357365902, 0.10783120197533347, 0.97075036364341882], [0.81791193163033216, 0.50010243155047673, 0.73665907801513852, 0.68906867683412198, 0.13914788314910242], [0.19732409837636466, 0.48185513366399635, 0.17094637292200798, 0.021340043804290665, 0.54646478557656042], [0.75197911240393089, 0.7313284812230938, 0.61170514580562296, 0.66442064050366323, 0.142246040820176], [0.23520285530330076, 0.63924045879403901, 0.11726750346026893, 0.54883881498541753, 0.91426185183741604], [0.93631011726573998, 0.0185817733152841, 0.96133443589010914, 0.85298475679123364, 0.96881610347253755]], [[0.45717466610244539, 0.13973837278938117, 0.028321023772876819, 0.45151126687218279, 0.87996786479253597], [0.51181134445738008, 0.91664515660277657, 0.8711313226781785, 0.19796978611718952, 0.4342094218132192], [0.63294016274943521, 0.44500412521936483, 0.32095577843772194, 0.28975016578014323, 0.39415187962921183], [0.17323750096228452, 0.92275442417946529, 0.89524793104477973, 0.19933379431262599, 0.87450721530204489], [0.95617000972686739, 0.59862648702369436, 0.40572614976291399, 0.26215060541026614, 0.032604602318369369], [0.50286544842892777, 0.56698748582321368, 0.77525055648935304, 0.92806964806507641, 0.55601353856636826]], [[0.78690936272061662, 0.094472311253335328, 0.20200644008963209, 0.30464108375591914, 0.43930278146561275], [0.679773534180102, 0.71813417858669659, 0.24236953206257839, 0.61100097141709797, 0.56777474519615623], [0.0095199796167556583, 0.94539663777177863, 0.4788075506551448, 0.50279535075344139, 0.39169893439131109], [0.5589868267516459, 0.95510645932366611, 0.98429028624649961, 0.69783665543605189, 0.75641833167224237], [0.16264979652924594, 0.56092613094525801, 0.56151990693690879, 0.28733522372846776, 0.42279278130525011], [0.13116952178535568, 0.53045981668470032, 0.24860564448906131, 0.53784408374176595, 0.32270358468096727]]], [[[0.37911131657385766, 0.68814408512489944, 0.59426706658053596, 0.65030728980799801, 0.49497680076744388], [0.69849961271456085, 0.19286345224320167, 0.18114249676525918, 0.57430816174712607, 0.006044527705213687], [0.28148378769108728, 0.4525207442615844, 0.63263311972014658, 0.31181887461037849, 0.72602573090722688], [0.20072723368710421, 0.77224544804322903, 0.54391891216775368, 0.30033594405410757, 0.21739003547546987], [0.30674883930208485, 0.76468667958622538, 0.36986980632220423, 0.14405179038713334, 0.29665806516029991], [0.10856555222095954, 0.77829531844601618, 0.75486401654950597, 0.51920979596057093, 0.79072030486040035]], [[0.91673281367929982, 0.80060756439277048, 0.24804971460149161, 0.64767498652658728, 0.8103361562491056], [0.95668875950077115, 0.49224455242555587, 0.069073987956172922, 0.27888934729357229, 0.29715966662087467], [0.71544168889661852, 0.15052398804879608, 0.83829619923392251, 0.5160258275245887, 0.036750807746295244], [0.79495083467398098, 0.069178879222830503, 0.74764005719955939, 0.66963739731033123, 0.53360050458079689], [0.62534121322332892, 0.27047062749192929, 0.084118215341789648, 0.37383332313288753, 0.77964211142608986], [0.18044340598049036, 0.33414685030260649, 0.44566818859718516, 0.72393118752265861, 0.42735370331799549]], [[0.4268803548294634, 0.24817120111778379, 0.12645007420528653, 0.85861644771869028, 0.0083288559684939756], [0.69794114912338368, 0.49247898252941136, 0.16226215916277564, 0.86803043021745419, 0.091357939070778271], [0.21597347239310838, 0.91256858783472938, 0.81042502780584647, 0.28643269019514384, 0.19134919615064572], [0.37036877008945357, 0.46284691378661447, 0.077276230604462537, 0.13270844844927487, 0.8636255866901914], [0.46219292790232336, 0.020892426422982058, 0.6786532414899521, 0.65564581704796998, 0.75684195869666593], [0.91317174832955716, 0.2236897749504434, 0.54155823407878134, 0.51752528752505611, 0.18632782756953437]], [[0.66937820737832043, 0.64793803152642515, 0.92369132814024235, 0.56664527855577207, 0.74424791457164763], [0.53649755150751488, 0.042680001948998458, 0.60056154502067971, 0.82193992105377633, 0.66020161624970763], [0.55396341277218764, 0.043719679352173801, 0.64216199879896607, 0.50712638731391635, 0.36563132256071795], [0.075580580838256806, 0.74318861082390897, 0.75826916553948887, 0.52873045857699019, 0.42324253436074766], [0.10482768441057788, 0.41801794012233473, 0.49655011327871657, 0.40256180145053122, 0.32905789183980128], [0.77034277281473618, 0.8322021701862713, 0.16212329012853999, 0.71878735162984686, 0.94372589280665897]], [[0.64070101133896162, 0.93456323310944911, 0.56979743163865737, 0.017891232679781321, 0.40012339763846994], [0.8718714334972415, 0.56360823772777768, 0.52764608244609545, 0.38231732960691656, 0.22333934717457837], [0.90903342229026107, 0.7976115927597931, 0.85089965527783928, 0.3874547104610303, 0.65527303810485071], [0.32766893602173286, 0.058210756284301057, 0.51861584518977788, 0.94337195896994541, 0.17035972533879851], [0.34750774986739608, 0.8788648873913546, 0.045860238859674607, 0.15574352207329156, 0.065986201662222688], [0.99416863365597585, 0.28677443200727926, 0.66332017016923694, 0.12988430934045059, 0.6710709144744087]]], [[[0.47130967877340124, 0.54556716340943123, 0.52571205290424294, 0.42958145759406918, 0.24928622795648847], [0.75544044515982711, 0.048729589278721508, 0.49366586083954067, 0.78313338746474148, 0.74033724400120837], [0.12628001241383269, 0.80730428989306313, 0.6935357151584336, 0.91793483934408915, 0.46346827962108339], [0.92023200109674164, 0.56898149527329178, 0.69859935951646035, 0.51020774574677463, 0.19276291590604566], [0.18245287864733251, 0.50392192133904312, 0.60129876694933171, 0.52894853154415045, 0.098245180230596252], [0.12087398747235856, 0.95251208021655376, 0.81672320847322744, 0.058994977700454254, 0.76315156741920109]], [[0.07563973642515931, 0.76152111149588686, 0.083779496080239046, 0.2752433860683412, 0.61098551191138628], [0.8848842963384308, 0.36782294182700093, 0.93530563734367056, 0.4127456365688823, 0.47155411473949815], [0.25976136094906688, 0.34034136194074971, 0.44577265913307917, 0.86524059832837963, 0.73105542595504169], [0.81310742454100049, 0.20173973196857398, 0.64154520306729679, 0.72221614121010413, 0.3588151800636159], [0.10859288526616995, 0.51892863416592716, 0.48473895237876896, 0.86742593491959286, 0.39022670963868367], [0.50338182197612691, 0.4969457826840562, 0.80656446987505725, 0.12254426719497624, 0.53771101720712799]], [[0.48594265867394359, 0.28490946743828816, 0.59902090014061904, 0.011092916359254024, 0.44491468446271176], [0.52649931432718367, 0.43310609091052898, 0.12027077267283615, 0.7996261768256594, 0.95060255711711039], [0.760955180126205, 0.22001564710737986, 0.9359947987106112, 0.40531804451578801, 0.44173861096542832], [0.71400893927026288, 0.88543395178869899, 0.83496449122977889, 0.4247264466626518, 0.94363179783472273], [0.036240679610319626, 0.6716127543267103, 0.0678550574175526, 0.5412790648931276, 0.17591101486431049], [0.03659774832101137, 0.30023860664002777, 0.84845281021808516, 0.13514802709294227, 0.72313158717929038]], [[0.78359103745818082, 0.52937691541016418, 0.82467016599788301, 0.27963664482426365, 0.02543866279484408], [0.4146290803842021, 0.17668974597769183, 0.66733827473072671, 0.87717042290343283, 0.55864053463632046], [0.77109867354027373, 0.27004527882091789, 0.10551234184999081, 0.12926419679756762, 0.53155154887116551], [0.014891074565827833, 0.19092272523170006, 0.42961429182301569, 0.06954710771177397, 0.88203836199389851], [0.23939104863945371, 0.35402799385561678, 0.59078891700771219, 0.29689283122728782, 0.92667785743441999], [0.65457885959430095, 0.0072033926110202096, 0.39745189518696689, 0.2224741059460501, 0.57902548991666314]], [[0.1291495204517713, 0.42505931174684775, 0.15994918002572189, 0.62402640758634487, 0.34657141334922192], [0.73211599712569997, 0.49401940364794739, 0.36995691848591583, 0.369084296351879, 0.97090326829339169], [0.75876321540952141, 0.84447544172242273, 0.88263174226002339, 0.86536292299069195, 0.29011426626974823], [0.38683705549875602, 0.0046150930931951883, 0.44779143235224739, 0.84666514514703406, 0.6984081051707961], [0.9154101980296161, 0.37022043916095615, 0.80066709173520956, 0.57764494429328239, 0.70137815571497064], [0.13582441582943128, 0.76433686009888224, 0.55481172570212378, 0.86065956322024684, 0.058751389799687526]]], [[[0.59700651439631713, 0.37900624083826639, 0.4383950958398467, 0.62708482910601393, 0.79684982847683605], [0.25744365023162696, 0.87076909453037987, 0.76100993184277321, 0.098781437724697385, 0.059971529596641315], [0.67910636852601536, 0.082662204786920324, 0.65296802875534332, 0.50192247609098961, 0.45449598142485825], [0.91180916905274256, 0.3976084571989893, 0.96157860372179649, 0.37001533804714204, 0.13777544869517189], [0.23969545416096427, 0.15455866686662689, 0.68781060114832182, 0.62316492031167003, 0.34037529483144702], [0.10365144292652706, 0.26090369924082346, 0.20458360582808255, 0.19016578889385127, 0.59343597825449268]], [[0.54913491311703455, 0.28137392413057039, 0.59146349215875149, 0.739668667511864, 0.79475964498951723], [0.18481901031012893, 0.29325244735946554, 0.21330516126356647, 0.152604987204638, 0.69362599490043197], [0.42931391588102163, 0.99602833978342087, 0.26274094305084528, 0.34749128792610795, 0.10636626128140947], [0.39805615850371456, 0.17577666447179729, 0.70710210465115342, 0.061734001915777714, 0.40061737810054976], [0.22073162600902863, 0.5807149467961219, 0.074854664456721398, 0.78432163548433997, 0.19717720993474341], [0.51114322470912221, 0.79750168195866711, 0.58006197645054802, 0.24472886192346954, 0.57135921547676471]], [[0.72827510180405153, 0.95702447576331839, 0.22751787296867787, 0.11780172663929089, 0.60226771693512715], [0.96388626642307007, 0.14422548546049452, 0.74658095641866307, 0.43116731264172736, 0.23105498423239834], [0.039045576321047659, 0.41751724395179579, 0.56511281663024804, 0.65709153190187242, 0.064652283408664468], [0.75648109580620915, 0.8320409186846216, 0.99841918470667423, 0.36247538149515934, 0.39704846851212583], [0.98928540046633107, 0.89294223301975795, 0.8173569975906716, 0.71367892691783363, 0.82770146425993141], [0.080488051038823949, 0.43135717256400774, 0.68501705768086874, 0.59644775911512371, 0.24622163877490622]], [[0.073492675775364114, 0.32543713604663815, 0.90821182975443915, 0.41006503608209699, 0.83843414388657711], [0.41570579143758013, 0.43925478909657256, 0.93984319679959138, 0.72781014381492981, 0.46411963156024127], [0.78595820579692532, 0.34919346886774105, 0.33397884712690529, 0.94987594148808951, 0.4984996944028528], [0.25306085809636969, 0.88761651548439569, 0.96737836098015773, 0.89196063152205218, 0.86115472659397985], [0.35980052598383894, 0.97922617876481088, 0.30517620063196904, 0.86080848916655051, 0.41122497124921231], [0.9758010467213889, 0.59647496871665551, 0.81577906936325706, 0.66660746496263967, 0.69792587311654375]], [[0.64739575677351535, 0.67643037334681344, 0.4803202913823712, 0.84496483489538887, 0.52443417916472379], [0.11167446937854819, 0.87944703980505334, 0.014492079577805073, 0.29270382595446975, 0.41524938874287931], [0.42049768623106221, 0.1710237855228286, 0.71531637398216819, 0.57298612799994886, 0.42981138551832365], [0.05551893331378821, 0.8855402324130679, 0.55463233287312597, 0.99108105873351537, 0.23226978900715345], [0.11045838710289069, 0.43061809865794887, 0.40680473711890197, 0.3581737566378369, 0.87575657668564455], [0.83245157242836543, 0.29173332668606278, 0.8291135410185313, 0.49424282955872978, 0.6898978370358525]]]])
        ref=sqrt(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_tan_Symbol_rank0(self):
        shape=()
        x=Symbol('x', shape)
        y=tan(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array(0.209431554652)
        ref=tan(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_tan_Symbol_rank1(self):
        shape=(6,)
        x=Symbol('x', shape)
        y=tan(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([0.087459774368441545, -0.88362288797089894, -0.54141058334280379, 0.44445104551816317, -0.20598166278729702, 0.68758381229809062])
        ref=tan(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_tan_Symbol_rank2(self):
        shape=(4, 2)
        x=Symbol('x', shape)
        y=tan(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[0.46244835934413642, -0.60213655324014148], [-0.614826816992045, -0.78435323722775196], [0.79124199720985944, 0.73024320439185098], [0.45160570625779739, 0.62738382412832805]])
        ref=tan(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_tan_Symbol_rank3(self):
        shape=(2, 1, 5)
        x=Symbol('x', shape)
        y=tan(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[-0.37949327463382065, 0.97777493210736099, -0.66970147362567456, -0.42239025073075576, -0.53033755445058306]], [[0.57247188863347498, -0.8990533608911957, 0.047681221330614143, -0.014696168429957357, 0.40184951938025848]]])
        ref=tan(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_tan_Symbol_rank4(self):
        shape=(3, 3, 4, 5)
        x=Symbol('x', shape)
        y=tan(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.016523868628697702, -0.48434049208294239, -0.56647991631922334, -0.84831626392976212, 0.51502679792223138], [-0.60570805853789511, 0.037722830986585576, 0.96989229884818595, -0.20230137231148526, -0.47784990773149083], [0.13592059169019821, -0.20149754586470636, 0.48171767818369982, 0.21960272689160543, 0.21877165002873245], [-0.13934254900260679, 0.30257948731520812, 0.88764119574498257, -0.096532573578287817, 0.72601896867517945]], [[-0.62174630323546154, 0.88222676409748235, 0.56498613392288366, -0.97820629783913327, 0.63108058329898298], [-0.77746977497481651, 0.4180248039804233, 0.18838813888814809, 0.87588596660917895, 0.24791700301521358], [-0.29494128890981175, 0.25481870772884085, -0.049896899566068464, 0.39284871429459778, -0.87714468356817532], [-0.70518206792335225, -0.62906775964089645, 0.9013363710777782, 0.39204287929397696, -0.56388639366879589]], [[-0.063128617158787259, -0.24816146231876623, 0.91928772670118497, 0.32368275530493307, 0.37445544897257022], [0.20519262449423969, -0.63876427366981914, 0.20149475988318688, 0.76984861095210921, -0.94064159955540871], [0.41838839953481766, -0.64857075496824024, 0.11861207036725796, 0.4300943982511034, -0.89375563929746482], [-0.74094699423662158, 0.34122989373523493, 0.57379304083431704, -0.090694314588586566, 0.61867811344828572]]], [[[-0.76535300013881291, -0.90254398019038939, 0.88550970827858566, -0.15239018540377836, -0.042461205838450589], [0.027734698700162319, 0.78432037486314821, -0.54537461825168121, 0.33208868259748137, 0.70137585916999634], [-0.46812345713659886, 0.99685229144667753, -0.15080600423579549, 0.33827818315688374, -0.92970522388393162], [-0.51329322549139578, 0.50356793850319836, -0.98109639608445565, 0.089231102505273441, 0.87806674212546576]], [[0.91837396348565803, -0.5874205454607575, -0.31454032819420719, -0.3950175126433022, -0.8338964066472947], [-0.12213078919735332, 0.22455947519186492, -0.2603419245094698, 0.7692864880244592, 0.8959035965351152], [0.8853681803370903, -0.85348466701042724, -0.51106497109989402, 0.022811537184894926, 0.30919168506411343], [-0.34445259067825229, -0.39729749709780648, -0.89633094607723685, 0.59090722985808086, 0.78862377201359002]], [[-0.90004490380479019, 0.81922126411896268, 0.55395134262610179, -0.32172924988048934, 0.12580584070235323], [-0.65435443482541489, -0.027830814722005659, 0.023038353227855746, -0.95478648041454361, -0.76834909511218052], [-0.54015543531580601, 0.55484250948900682, -0.7766293710211476, -0.89159810705019282, 0.56087264784917612], [0.096027187660024493, 0.25994465807604938, -0.27738713834370676, -0.64688839309231483, -0.2803770450874703]]], [[[0.9143648453151807, 0.27798366188429013, -0.72302339747965116, -0.29818641119607414, 0.6355549949917414], [0.35449455389651319, 0.16702398513117589, -0.26594743792438158, -0.10142534797754998, -0.026247979607276317], [-0.53144279316320109, 0.31428042708281922, 0.75212378470042451, -0.24652504145251619, 0.89858823981516234], [-0.18595877691109153, 0.048758658389440823, 0.30749542860004198, -0.27457046073349134, 0.26278559983322136]], [[-0.17996741282847539, 0.78020335085726367, -0.69683327825391062, -0.27132269074593207, 0.78982789141886678], [0.15423943345644875, 0.055001356625384856, 0.81474689695595326, 0.17411703478818796, -0.53447205466406023], [-0.20967779302208989, 0.49105909194915998, -0.032841509796083246, -0.7963541588730163, -0.9173065936725755], [-0.4494655161405634, 0.97613962051343117, 0.84356459146059204, -0.83054692320876922, 0.73243126006409964]], [[-0.15175209363706155, -0.50413450514478253, 0.87306192753381739, -0.43928328987109144, -0.7170121622054384], [-0.79315793580940563, 0.39543398442409394, -0.87602622732764845, 0.9969736877248867, -0.79950316251025022], [-0.44653947999442334, 0.97771130232405645, 0.12985556243026863, 0.90499036232453745, 0.020864326387190157], [0.65229720363292976, 0.10402546217032915, 0.38524481591731763, -0.80725593164399068, -0.59227904096566952]]]])
        ref=tan(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_tanh_Symbol_rank0(self):
        shape=()
        x=Symbol('x', shape)
        y=tanh(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array(0.0895031360188)
        ref=tanh(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_tanh_Symbol_rank1(self):
        shape=(4,)
        x=Symbol('x', shape)
        y=tanh(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([-0.03942823196209555, 0.44240619348950116, 0.60903701416297173, -0.6322868753747255])
        ref=tanh(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_tanh_Symbol_rank2(self):
        shape=(2, 3)
        x=Symbol('x', shape)
        y=tanh(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[0.48033344694283575, -0.77316270562335232, 0.1961889804438488], [-0.38302772872530122, -0.15416061092058331, -0.095255143613632409]])
        ref=tanh(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_tanh_Symbol_rank3(self):
        shape=(5, 6, 2)
        x=Symbol('x', shape)
        y=tanh(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[-0.48991993613930673, 0.45148833883670503], [0.17986679483825152, -0.56148640444768749], [0.10846503544539554, 0.78439681273383721], [-0.81950414727643861, 0.89292033850565677], [-0.26788254352267682, -0.99424607225283146], [-0.72115470268903992, -0.916918517052697]], [[0.15313022995148162, 0.097958948605906704], [0.19075616748722357, -0.62006956355006304], [-0.85292852041937417, 0.76781326742253952], [0.53495974911605249, 0.091942821722821533], [0.36183570233097928, 0.67994198720392429], [0.53794800022545264, 0.22863201815005563]], [[-0.90240208421951174, 0.051089929924245769], [-0.6997052834174422, -0.20292449300013593], [-0.96942219664880169, 0.89059411138718425], [0.53332392617514546, -0.10937060992151393], [0.86334193486358779, 0.95366437684189753], [-0.8780230272610865, -0.041804960655301482]], [[0.018383009908785608, 0.50371792592114373], [-0.73648479510637088, -0.70349105225638353], [0.96134123460371401, 0.12315467759090271], [0.16700366796927502, -0.5952708699611462], [0.97114278652713559, -0.089945196008888839], [-0.3758037187357437, -0.2719325141576876]], [[0.79517266942638698, 0.37550983871905541], [-0.35080975429947814, -0.90336326812446832], [0.87769377191771714, 0.73681429937417375], [0.33458594823211474, 0.25832474340863998], [0.2841368287368391, -0.084636954922058916], [0.31403006670409295, 0.14061625585097515]]])
        ref=tanh(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_tanh_Symbol_rank4(self):
        shape=(4, 2, 3, 6)
        x=Symbol('x', shape)
        y=tanh(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.2007647147286189, -0.36779568268162932, 0.880954622296934, 0.11541479547181877, -0.76825576891361358, 0.43277202041394669], [0.20646951501409405, -0.84710271899542078, -0.71725722417498328, -0.59091677659736797, 0.12974922177419401, 0.072285882570669591], [0.55013338476453444, -0.66003988686493464, 0.68024731477206424, 0.37807441598125413, -0.34484336898064627, 0.54929116942719181]], [[0.42075442335530022, 0.24353754710239639, 0.35394349912855905, -0.21087905587080691, 0.98309916334374758, -0.11450682735555273], [0.32288463099681919, 0.33374973031198785, -0.40914670185158131, 0.46492834573223352, 0.35753507374893201, -0.28646087447145585], [0.84084631077844207, 0.77799147060731944, 0.78012785917464145, 0.79613219845230376, -0.98003444169991716, 0.69924675827076688]]], [[[-0.2001417236884242, 0.065071808801404174, 0.92387374650596965, -0.45855948087890708, 0.81462751243620324, 0.60324364129474017], [-0.46212754053958682, 0.90238397776050516, -0.99191128914335169, 0.59751667404250752, 0.55219251789461632, 0.23551110389285901], [0.35430522224769279, 0.096151151599375595, 0.37405526115221499, 0.48612293463219336, 0.61822611771390723, -0.94492862031250158]], [[-0.53047952235644336, 0.63117915760144316, 0.84907360954501998, 0.67453434005440638, 0.15307060620124235, 0.21096044583112872], [0.44866045532141596, -0.001041113712782149, 0.84681263112002569, 0.4189244083383199, -0.77187833709672971, -0.21181739011218448], [-0.65462029434690749, -0.19357931410568918, -0.82682241038266868, 0.27264466788297459, 0.83010481702092709, 0.64367422330717838]]], [[[0.87595588770865773, 0.78750815313190858, -0.57922806165604235, -0.18522770307877301, -0.31119908807705121, -0.13800629222649352], [0.7184218918449834, -0.34124220274873829, 0.37676089153054271, 0.25302442165966443, -0.50961581925437116, -0.11141267929901577], [-0.71707858159475713, -0.86407459730107194, -0.42374296346995255, -0.00015208210731265659, 0.85517772348987764, -0.51204311661644142]], [[0.874931179775567, -0.30957304077351444, -0.92597849655351583, -0.69141259803864719, -0.85742794186797089, -0.64035703491468543], [0.071273068413866714, 0.46314458240149148, 0.98467863226088359, -0.73552963118678538, 0.11450842678195161, -0.93182013540578845], [0.5519987259922956, -0.79089354035141546, 0.65437613380649018, 0.38825397666353756, -0.1601975042636048, 0.4286722033514625]]], [[[-0.26856159155699832, -0.94551077955781682, 0.86813413987711474, 0.042529627473033127, -0.75647779316943486, -0.81067824671501265], [-0.5963317202758982, -0.24890871116683733, -0.4436730009024108, -0.2198565350290751, 0.81871629610911323, -0.74018647665858794], [0.59825558206525264, -0.059987682496943862, 0.63747538233351508, -0.86392286028856513, 0.85231486533151246, -0.52901183525618189]], [[-0.49123452391065214, -0.1819402513408297, -0.61197036737502519, -0.436799042370968, -0.86899938773157404, 0.44238068210007198], [-0.83843992459355254, 0.88702051617583533, 0.5126132034738895, -0.84819069018036308, 0.10394330451336775, 0.23808964820547085], [-0.12869221874563452, -0.38871894816463581, 0.78588401644225581, -0.16049662523574693, -0.053721106849557998, 0.29849404342019392]]]])
        ref=tanh(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_whereNegative_Symbol_rank0(self):
        shape=()
        x=Symbol('x', shape)
        y=whereNegative(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array(0.42853508447)
        ref=whereNegative(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_whereNegative_Symbol_rank1(self):
        shape=(5,)
        x=Symbol('x', shape)
        y=whereNegative(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([0.43206110009376641, 0.83634861958611206, 0.87015009415460853, 0.47086778120574446, 0.31148046825032227])
        ref=whereNegative(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_whereNegative_Symbol_rank2(self):
        shape=(2, 6)
        x=Symbol('x', shape)
        y=whereNegative(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[-0.81249813695208406, 0.10556352084573217, 0.76087363813661968, 0.1995897867335239, -0.41823964667714253, 0.084370240248581752], [-0.079285320543472038, 0.68610571499419648, 0.56132146277708261, -0.67996452779248551, -0.30597087355198527, -0.068654586350014979]])
        ref=whereNegative(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_whereNegative_Symbol_rank3(self):
        shape=(2, 2, 6)
        x=Symbol('x', shape)
        y=whereNegative(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[-0.42201050805511531, 0.91355722702134279, -0.38070726582073999, -0.47440470954619673, -0.27932183900562246, 0.655128733945751], [-0.70864695882139039, -0.49362620091925735, -0.94285609595558895, 0.07528161581922066, -0.23667084443873487, -0.20591133999003119]], [[-0.0070020137163211427, -0.13295550812161605, -0.1553252023755074, -0.72679957022776964, -0.78415523731564152, -0.99691814151295755], [0.35203944647300811, 0.71977435737852047, 0.20131111743625252, 0.07351798956752531, 0.98539556854451815, -0.51145325110369733]]])
        ref=whereNegative(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_whereNegative_Symbol_rank4(self):
        shape=(5, 6, 3, 3)
        x=Symbol('x', shape)
        y=whereNegative(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[-0.245671131496906, 0.4848173617341609, -0.91936491012953603], [-0.73670296561619453, 0.30637743152787156, -0.20819138407059024], [-0.94672400180105232, 0.68027510852755513, 0.94519681296569935]], [[-0.2437922381642037, 0.47305859737257028, -0.6780587098993236], [-0.20227463811849367, 0.83180287352045301, 0.92064217765210499], [-0.39599046381166447, 0.24130853076489212, -0.67174997758170218]], [[-0.15309840986997814, -0.01632114748174418, 0.45997259930066026], [0.62809994454410556, 0.55128728808913863, -0.92264683187110008], [-0.61500967402752904, -0.99495870545746445, 0.18099454919626035]], [[0.445189156412654, 0.25169006757571633, 0.85243689442834247], [-0.22620813584364741, -0.39668037238409437, -0.86665865871895376], [0.62798374459861894, 0.29066747251335467, -0.16345331480731806]], [[-0.9799649489903195, 0.56560455207561922, -0.19286372982454303], [-0.8461325895977434, -0.18717926693755516, -0.067885080791339369], [0.40264648307733175, 0.6729051950296987, -0.46080798478773288]], [[-0.074614772993127021, -0.34092919242572428, -0.11072227592069117], [0.18903451798528703, -0.28128236641662641, -0.99495364270906328], [0.40440864709575508, -0.35219083975644128, -0.4575557314165366]]], [[[0.97394989689484857, 0.15019962657241215, -0.49731364397014799], [-0.10126386942722498, 0.77142383095597222, -0.38740411186299628], [-0.79331445642953957, 0.94206088726851478, 0.13907383192925549]], [[0.89783659296286489, 0.41210734704064445, -0.079165707498179083], [0.44108687006413949, 0.33239557183757285, -0.037656993643554459], [-0.82314643008837818, 0.48313939226926172, 0.87831283723780906]], [[-0.00115239459151395, -0.67213055269665767, 0.36297363042924768], [0.63321118021951173, 0.99953214952552027, -0.85765926949885007], [-0.38054559563577617, 0.70260867347068756, -0.35265598334392245]], [[-0.28671501078575168, 0.90992094336582308, 0.59907970770425578], [0.6831238758973277, -0.7067834615094819, -0.37277489178006018], [0.42496081838956479, -0.37453255931968266, -0.08178890238972758]], [[0.44587724077395396, -0.36694098161312461, -0.44044245786997194], [0.15804325280455922, -0.18156638367899225, -0.80205747778748249], [0.095277402247099463, 0.28041822387798354, -0.51378557743693931]], [[-0.99166825226627453, -0.083598690856507396, 0.63729493096657275], [-0.58861379670915071, -0.81698368681230527, -0.64675408403668011], [0.051905480731319509, -0.68251723183167212, -0.0067693110774600385]]], [[[-0.44509438815374525, 0.59972174459227112, -0.77831781776733711], [0.76911675976261251, -0.45087716010119183, 0.46114208431575832], [0.92669053365900389, -0.70666679726792725, 0.26620964917056611]], [[0.78843307945692143, 0.77604643540176776, 0.32660920770664004], [0.79070732664929166, 0.15885227363672771, -0.79859724957395839], [0.50640311031214003, -0.66666980363870398, -0.59740831937545491]], [[-0.78890850525466094, 0.69368754414836209, -0.97947773077448441], [0.20448502323163797, 0.99635971801535472, 0.58791400014415074], [0.32145420766361799, -0.13151318406555967, -0.38256931614446987]], [[0.2817511546532494, -0.32151893652812191, -0.73166480999721362], [0.27522764916220144, 0.81123534064756919, -0.26965837854381869], [0.82889693179224011, 0.28871806497673913, 0.58050886769071752]], [[-0.030141470978212404, 0.86430401580301086, -0.94067539423860569], [-0.0084447588775293791, 0.28987060069958992, -0.07273765994828274], [0.38718059843314423, -0.13677491924282115, -0.69882665166732028]], [[-0.10936826145160494, -0.085742421345417652, -0.59508514038877114], [0.32971245312496489, 0.97689252540128235, -0.85079908192818188], [-0.26864988977196136, 0.41006858827689885, 0.010033459866110483]]], [[[0.056024945222296729, -0.38941460302055053, -0.39730264647503999], [0.34993021833604265, 0.67299620879864408, 0.31774013558579939], [0.94477002361107032, 0.35493043567408167, -0.20346381377400213]], [[-0.39592815784416313, -0.63141397392576626, -0.62461175958254733], [0.35176555437612933, 0.11073593023635997, -0.45194900149513262], [0.53918155704705528, 0.52004902125188979, -0.73160204180776911]], [[0.27018530034293176, -0.66383884017086237, 0.57792755007922469], [0.17991645429291614, -0.28817104618296274, 0.41533122344870965], [0.80589526432643921, -0.3103008950265127, -0.49865435333636832]], [[0.56494023285174344, 0.57129166627215855, -0.7419472189943277], [-0.7259373054444811, 0.4185258558841769, 0.71143387050402374], [-0.058856704944132199, 0.73860442844522511, -0.39474006178420429]], [[-0.75987232756584078, -0.60068657588644303, 0.81596182811193119], [0.19261305271948403, -0.40050743334695538, 0.56051499644839398], [-0.25871601483851259, -0.73364388854161788, -0.66590689918899737]], [[-0.42243032346384113, 0.24524983314780191, 0.52345129902387444], [0.59084094221967365, 0.0474142782864444, -0.42093554761686502], [0.5093987882590203, 0.26230170061322156, -0.41546677782545127]]], [[[-0.27587563062988774, 0.18788423954774736, 0.75207992228260578], [0.038134600966506893, -0.85205831305854818, 0.35141090531460883], [-0.78742647494855911, -0.55988984350461313, 0.84542148072873613]], [[0.033663116058496367, -0.91310199741275389, 0.84415898368714393], [0.26863032696363365, -0.084379608446330856, 0.82194629148019271], [-0.66487247773086144, -0.42622270743777735, 0.48856166682036051]], [[-0.85121925736392057, -0.81917330584124226, 0.93775723883517448], [-0.32013856425169362, 0.4479007006665201, -0.7680194615612761], [-0.63009082841841635, -0.17490113582300149, -0.059314073704885617]], [[-0.09186329491498868, 0.06059696140697568, -0.11156067469398678], [-0.86041659936124204, -0.43955964486536581, 0.25068034331854339], [0.28067276850427603, 0.29340855065077664, -0.29629771765619095]], [[0.91299141637445902, 0.077174125399852134, 0.4807684035910802], [-0.58707634264984754, 0.5599540512743868, 0.68509801379647839], [-0.60254581502500648, -0.74765196577437831, -0.31197391415193954]], [[-0.0014273874539123543, 0.76198232231447038, 0.63758515096227697], [0.68621977456885586, 0.91822118622789373, 0.98806114562455116], [0.22417448614072288, -0.92392405251876708, -0.8268352629089748]]]])
        ref=whereNegative(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_whereNonNegative_Symbol_rank0(self):
        shape=()
        x=Symbol('x', shape)
        y=whereNonNegative(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array(0.77488583754)
        ref=whereNonNegative(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_whereNonNegative_Symbol_rank1(self):
        shape=(1,)
        x=Symbol('x', shape)
        y=whereNonNegative(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([0.7548683063954309])
        ref=whereNonNegative(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_whereNonNegative_Symbol_rank2(self):
        shape=(6, 3)
        x=Symbol('x', shape)
        y=whereNonNegative(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[0.19478398248770867, -0.93605929486367789, -0.84633027353070611], [-0.4247714504246447, -0.88358187229559326, 0.64571786910507467], [-0.60678756789374488, 0.42408078501979829, -0.34091291498061405], [-0.18719514528889158, 0.50162922306307389, -0.87142114251914782], [-0.52961791066475605, 0.51877436445966141, -0.25484192861052279], [-0.95553918566448681, 0.84050933290833729, -0.30872468784517459]])
        ref=whereNonNegative(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_whereNonNegative_Symbol_rank3(self):
        shape=(1, 6, 2)
        x=Symbol('x', shape)
        y=whereNonNegative(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[0.92793402042789674, 0.19137994701669525], [-0.12290272635493027, -0.47511962017468679], [-0.81978174526750069, -0.45606354990500186], [-0.17468598506647148, -0.61225289617779977], [-0.2979127663698713, 0.30798369311660379], [-0.24004186558525364, 0.70492056047663931]]])
        ref=whereNonNegative(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_whereNonNegative_Symbol_rank4(self):
        shape=(1, 2, 3, 6)
        x=Symbol('x', shape)
        y=whereNonNegative(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.19734181862560329, -0.52364459371933481, 0.35215586074023397, 0.60580509552026074, 0.24481949837513084, 0.42619903364126466], [0.54009896704139226, 0.34876258512578562, 0.70713076787851237, -0.4468693048395378, -0.82894104467113139, -0.47127533691251555], [-0.32835632548722149, 0.55468182353139994, 0.35942750685844604, 0.0035727412636350486, -0.072578508993385915, 0.96352468136139335]], [[-0.1702924892712645, 0.32118929524770712, -0.480017764097592, 0.49260088888686826, -0.090655833037053046, -0.46886667927894043], [-0.35350201592628316, -0.13239195422038219, 0.83849922332385751, -0.71829010357812018, 0.090086797135722874, 0.60611096639549022], [-0.072000052233159195, 0.58940921488168918, 0.34780442090328156, 0.52827809640276047, -0.67098831990477681, -0.089667492445145047]]]])
        ref=whereNonNegative(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_whereNonPositive_Symbol_rank0(self):
        shape=()
        x=Symbol('x', shape)
        y=whereNonPositive(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array(-0.102464280555)
        ref=whereNonPositive(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_whereNonPositive_Symbol_rank1(self):
        shape=(3,)
        x=Symbol('x', shape)
        y=whereNonPositive(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([-0.95382088265311138, -0.96389371039650662, -0.79881781125607798])
        ref=whereNonPositive(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_whereNonPositive_Symbol_rank2(self):
        shape=(5, 6)
        x=Symbol('x', shape)
        y=whereNonPositive(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[-0.4689748842557151, 0.31999432660294569, 0.048853179002233738, -0.61079159873333611, -0.70769652049051812, -0.52856709767107568], [0.34276151301270774, -0.41079876845527963, 0.58744575508554475, 0.92829380017187324, 0.30756384351974964, -0.61816838813359376], [0.32029406085918244, 0.57883929167198889, 0.8488456656073804, -0.85409841050130897, 0.32437270883785496, 0.049896352519669396], [-0.41173159047049812, -0.24328749336373212, 0.00075111933658655872, -0.45378552056860522, 0.45823861108763753, -0.85503296969429399], [0.7622192746656411, 0.082388003753710581, 0.50159399017908468, 0.76333048056620934, -0.83291014593033652, 0.16927429726214571]])
        ref=whereNonPositive(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_whereNonPositive_Symbol_rank3(self):
        shape=(6, 5, 6)
        x=Symbol('x', shape)
        y=whereNonPositive(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[0.17541726143216452, 0.35262910590012964, -0.35203643502297055, -0.57104898718493247, -0.65140555333817107, 0.11813999804072606], [-0.59086197843010924, -0.16994850533687123, 0.66371513890314082, -0.65086390115528636, -0.97556995170362626, -0.52163982977838841], [0.35716329385726553, 0.73075540421821317, 0.83884992212603149, 0.23827314651932441, -0.47433689311379812, 0.29896402622381735], [0.10746617573756434, 0.73735573050101144, -0.33356391942832042, 0.56623720748084461, 0.67712467116210195, 0.99918543890853284], [-0.6164602492587683, 0.4073928768062316, 0.81620900363798232, -0.73167152001582147, -0.2832862003563752, -0.5299751176862566]], [[-0.43061335413378088, -0.11760337326877468, -0.68317414754850114, 0.17362548294805191, 0.44409406342568825, 0.65773264922591546], [-0.89577403202889605, -0.75871242083243318, -0.28304875601216817, -0.57679548815524884, 0.98651268690290084, 0.19385734528951915], [-0.31681925026375368, 0.56581438508533055, -0.28754223115580491, 0.18468794024421253, 0.6439676898633877, -0.032985553430847636], [-0.85140456936442122, 0.70156243621983139, 0.46630095812450967, -0.9582348565504748, -0.51410089456059649, 0.8566801726464599], [-0.96458111991460505, -0.049967320484441524, 0.9023401724743525, 0.81961243322000188, 0.6346670910525023, 0.42599118500368394]], [[-0.076727382318347415, -0.81800847638621055, -0.57099460250987644, -0.81056349418702367, 0.04420829951705274, 0.63854285509858721], [-0.66749267649204258, 0.98290190040963932, -0.19261228802599328, -0.38627399578160881, 0.46322818731317383, -0.93277185532220286], [-0.64309739073485273, -0.082315624606597027, 0.14060667032277063, 0.013993374197078357, -0.63585543524189014, -0.53545596072683121], [0.20426957620323138, -0.76764107467269982, -0.37592191346124659, -0.68468793925918603, 0.82733072521206541, -0.047703751791761118], [-0.2130935090034225, 0.13922334099894162, -0.65137390765911451, -0.50163248288444939, 0.82124571841631622, -0.24317404326505443]], [[0.76432003916322278, -0.26533448903182877, -0.42443566070217131, 0.56868384572339448, 0.1836447373650012, 0.5515025847096815], [0.70556277497720665, -0.71341244471734222, 0.98005834047731755, -0.58472299690262575, -0.63249198948154728, 0.34262185895984865], [0.15131184016122035, -0.004898872142147459, -0.20787662279877717, 0.38650824967200537, 0.49307567127879381, 0.74455747542124073], [0.056872832820261454, -0.39324294651403857, 0.10463980149985019, -0.82222790420381497, 0.89602110313279404, -0.13682766968635085], [0.57886347034519536, 0.015612529741620307, 0.46979107716417667, -0.69915713149963232, -0.94141705848161217, 0.51172003075890249]], [[0.13994015088803247, 0.9495577675024871, -0.95399373731312243, 0.32284860726437792, -0.60793604479145924, -0.22899652627637068], [0.5439511903170875, 0.086674973972199254, -0.59230299250620444, -0.85806468277714809, 0.88589272490118098, 0.25697097099821287], [-0.16985426679104187, -0.68456414308055225, 0.49363954383170894, -0.72518723992826017, -0.75071699315624563, -0.60343111170074737], [-0.88284691450313835, 0.48157929411889056, 0.25385764322464843, -0.36567009870755451, 0.82109550952800658, 0.8181336594784776], [-0.71144361101683185, -0.79934533707854949, -0.65911703240588215, 0.27393210430393311, -0.70714285227992013, 0.12160486488241706]], [[-0.04064403590320298, -0.1068248351554193, 0.35396785533305919, -0.3886446143142972, -0.60949749651272667, -0.98929819029769961], [-0.31090195753211614, -0.40709998765838207, -0.037831324138178912, 0.98229536275850049, -0.64095296868589591, -0.44315741185474677], [-0.47756101404167217, 0.73262283430657749, -0.96077095823093339, -0.36253687088383657, -0.063363324193753678, 0.65669342374856088], [-0.092402409738372215, 0.18228583947610799, -0.80392502564474766, 0.75408287032155252, 0.37608210847184331, 0.40302972148290261], [0.99691487848251104, 0.27330456447773854, -0.94620806942126778, 0.57384716771331146, 0.32729139245662364, 0.65522373477071838]]])
        ref=whereNonPositive(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_whereNonPositive_Symbol_rank4(self):
        shape=(6, 1, 4, 3)
        x=Symbol('x', shape)
        y=whereNonPositive(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.86892418874895827, -0.23120088101180936, -0.81810043536144872], [-0.5161211329426374, -0.15204947416975467, 0.6728139691527053], [-0.12978405702520845, -0.9132685546273942, 0.83669156087841201], [-0.040493245163691016, -0.29011153889075514, -0.69621052435943986]]], [[[-0.090170536982016047, 0.46425316748668655, 0.75426228550506713], [-0.20426807333107355, -0.86280386337926585, -0.9446893635005813], [-0.25458258942475842, -0.8671050321973246, -0.21903768747194041], [-0.98304907694419597, 0.37731719882209336, -0.3973389083409351]]], [[[-0.65494070010692518, 0.56471498675554432, 0.35416087723833534], [-0.54704672320820058, -0.75419314654176861, 0.91574502605747465], [-0.43509061379474012, 0.14790895676767124, -0.26854727709358994], [-0.13404261277644292, -0.74539126632580932, 0.86931705278354365]]], [[[0.90677848946440132, 0.30316514230273839, -0.14953558864890248], [-0.60840121453891527, -0.98032585004965345, 0.41704143846437147], [0.25374300723929366, -0.080373008718369388, 0.53642976760702576], [0.60710874527380465, -0.63637136772021052, 0.78760481864547338]]], [[[-0.18480576598954368, -0.80721046414870345, 0.79011040825075529], [-0.49570735524281906, 0.85741936884162251, 0.75002534625409423], [-0.24569603857294631, 0.46409165720769874, 0.069976430763303954], [0.31478123453138607, 0.87412820914357336, -0.88160637973467204]]], [[[0.96054588453725542, 0.4545582745686203, 0.088149449756248055], [0.26975839161044712, 0.8474373884478601, -0.91916065397418856], [-0.53972106184863455, -0.29030756942647584, 0.79324278454162589], [-0.76150661183265167, 0.48106983719118857, -0.22318600907394481]]]])
        ref=whereNonPositive(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_whereNonZero_Symbol_rank0(self):
        shape=()
        x=Symbol('x', shape)
        y=whereNonZero(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array(-0.168715220752)
        ref=whereNonZero(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_whereNonZero_Symbol_rank1(self):
        shape=(3,)
        x=Symbol('x', shape)
        y=whereNonZero(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([0.67214522673504362, 0.59034125552219896, 0.68027422973414486])
        ref=whereNonZero(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_whereNonZero_Symbol_rank2(self):
        shape=(1, 1)
        x=Symbol('x', shape)
        y=whereNonZero(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[0.62899144379887484]])
        ref=whereNonZero(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_whereNonZero_Symbol_rank3(self):
        shape=(4, 1, 1)
        x=Symbol('x', shape)
        y=whereNonZero(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[0.3722989625644606]], [[-0.65711064503090899]], [[-0.6606231553067885]], [[-0.14267241003179532]]])
        ref=whereNonZero(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_whereNonZero_Symbol_rank4(self):
        shape=(6, 1, 4, 5)
        x=Symbol('x', shape)
        y=whereNonZero(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[-0.68752514411297549, -0.84441677265736481, 0.32839284189702456, -0.17514823094739085, -0.69422346557101489], [0.13489479460534626, 0.34100442669511533, -0.3471407881047246, 0.96579318439768413, 0.25624438169834129], [0.22485841327167222, -0.2617461396355456, -0.3700175940797934, -0.040768269976656057, -0.011483032696096407], [0.80466766620814112, -0.14527970462061157, -0.6650852220140111, -0.49558590611310582, 0.19118701283908757]]], [[[-0.60455381295990973, 0.11301077127658354, -0.87046646481258771, -0.36468414124510828, -0.91522920154568665], [0.17664467912658077, 0.71962059026111058, 0.13329002735641438, 0.95622376255600217, 0.30608319587387456], [0.27207686169023937, -0.54412565402231472, 0.92608732489048151, -0.94336136069619858, -0.80659824395522484], [0.72245626736149071, 0.45160043557769747, 0.73484559188162435, -0.65518512947106866, -0.75184331242555924]]], [[[0.44443146121988719, 0.16197775053888464, -0.46153705341053031, -0.46939547518872016, 0.55388068830222781], [0.49796677338698592, 0.72188283974719702, 0.55826250507014863, -0.83189054567464438, 0.69828221267744794], [-0.62034639606889397, -0.14286060387121324, 0.67911323328496809, -0.5158594485696375, 0.49812075781918153], [-0.73530393146003226, -0.93801959648384692, 0.51890871967798424, -0.76411385478874982, 0.12031413737656949]]], [[[-0.58226025064350395, -0.29691624448325693, -0.14844288100485215, 0.79283896927207498, -0.14621424418146001], [-0.78739106662807767, 0.92521892294528763, -0.43195661849481826, -0.88060557942258599, -0.4449792293197139], [0.069852660445831605, -0.40495148810269588, -0.062219693893593941, -0.5853131392724682, -0.16316917979600531], [-0.93016390894379053, -0.02715797687956556, 0.90580082782980176, -0.89216032119782707, -0.67083359520314212]]], [[[-0.72565546586608143, 0.34892346656577589, 0.25449144865817575, 0.35639264625167177, 0.32808054176517332], [-0.1070638815607392, -0.81419525771067058, 0.3039473141055975, -0.8824598647558024, -0.89971488541747457], [-0.17953276257417872, 0.71195811554210864, -0.41000884650314529, 0.49173673765836745, 0.62310139391879638], [-0.9811299534507627, 0.08634885223906319, 0.13732837755352612, 0.0016736869265219223, -0.63529778641493806]]], [[[-0.90285046602560115, 0.1010041676214426, -0.91083048526899968, 0.75953834102302031, 0.11245973522159236], [0.41160960274597236, -0.023473395509007622, 0.24014494704687372, -0.27610446555581447, 0.14803341465744202], [-0.55168644049871074, -0.59976136455882201, 0.60267836754844395, 0.43159820690095407, 0.95281360733651566], [0.22277555792574577, 0.6512549281873814, 0.7171031303778439, -0.21591202122822306, -0.19673641981743217]]]])
        ref=whereNonZero(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_wherePositive_Symbol_rank0(self):
        shape=()
        x=Symbol('x', shape)
        y=wherePositive(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array(-0.438191294237)
        ref=wherePositive(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_wherePositive_Symbol_rank1(self):
        shape=(4,)
        x=Symbol('x', shape)
        y=wherePositive(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([-0.061119050423196875, 0.18870279905524701, 0.1436583757190053, 0.48174341199174253])
        ref=wherePositive(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_wherePositive_Symbol_rank2(self):
        shape=(1, 6)
        x=Symbol('x', shape)
        y=wherePositive(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[-0.74907853682610415, 0.70271824955068607, 0.5861160479339973, 0.22062036216974312, 0.77349615351516143, -0.49091068998967713]])
        ref=wherePositive(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_wherePositive_Symbol_rank3(self):
        shape=(6, 2, 2)
        x=Symbol('x', shape)
        y=wherePositive(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[0.16731464344521862, -0.17864720551445346], [-0.8270952775505922, -0.61333485272283372]], [[0.64169592731433145, 0.15839184052793565], [0.9886094548313562, 0.77102467542292241]], [[-0.89011713871072362, 0.69743244207046429], [-0.055929906619226477, 0.80927779891383089]], [[0.16301241615577289, -0.26406095513492711], [0.64380958344085748, -0.22880522246315449]], [[0.93796122963786899, 0.80122563540866332], [-0.3467389962727232, -0.60231261909950495]], [[-0.23155020616958089, 0.81744153146452692], [-0.64772868300967423, 0.33451537750216009]]])
        ref=wherePositive(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_wherePositive_Symbol_rank4(self):
        shape=(4, 3, 6, 3)
        x=Symbol('x', shape)
        y=wherePositive(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.055451386333695396, 0.89878562827109221, -0.19867116389378392], [-0.70098805273405262, -0.81615396204931145, 0.48831486424769754], [-0.086269826117491011, 0.41460276861454948, -0.097279309641456813], [0.49953009841402718, -0.0088387700999010832, 0.32542524738014333], [0.21372901624086937, 0.74095206463279828, 0.80488983604732556], [-0.14868321283205566, 0.61985302495856165, 0.072059718809681206]], [[0.8020196818858969, -0.023513052630552478, -0.66916755172853515], [0.3183178901338739, 0.97845950368722723, 0.096978590386210151], [-0.46655818119385239, -0.8843041343204614, -0.080655095117058595], [-0.28560669936687444, -0.061326741742632196, -0.92428545745178092], [0.27360632867241508, 0.27472621954707166, 0.48411021022293332], [-0.61916715534853273, -0.29108706706100573, 0.93436970308823764]], [[-0.24372349298194962, -0.75934172957201329, 0.47086491759050753], [0.14559760896749241, 0.5041759171642608, 0.3741419736484235], [-0.018955427918418977, 0.64872653091455379, 0.49853852228029694], [-0.36484648002399034, 0.84714379914832527, 0.32387543159219367], [-0.47009052148289587, 0.12802106563697979, 0.50758689707780613], [0.23613478887281292, -0.43956249301109285, 0.95090353777048287]]], [[[0.75428774100307194, -0.50142307884608228, -0.57924723174983628], [0.26044912492521122, -0.3168935265082331, -0.81880292149452716], [0.66868137575466902, 0.76276820194726747, 0.28770760098553039], [0.17020212746727292, 0.88630849625979158, 0.6757273712060925], [-0.48325108341145162, 0.87734183732476412, -0.1731096042452569], [0.067733416313086714, 0.17711739970981633, -0.082093298925675073]], [[0.36473060444701577, 0.6735369555110009, -0.97973486356110917], [-0.50748667186375385, 0.64840650386764276, 0.43417217434324784], [-0.79813995714905128, -0.8072658843772782, 0.7171897111603136], [0.88322163438251677, 0.15215586271598136, -0.23833192142045179], [0.87954391763974749, -0.76855865745487706, 0.78303305751757657], [0.63612295785285111, 0.57152482744776845, -0.3184565782347033]], [[-0.75986472914779779, 0.21050922289720431, 0.75455602570538582], [-0.12573550321000759, 0.10320445751475682, -0.156904290163145], [-0.10272105388966457, 0.53912922251759965, -0.48115009025207645], [-0.91522819245321241, 0.0022769763996275394, 0.31023459297273659], [0.13862005081661843, 0.08353682070897972, 0.71241053483261085], [-0.081552859261407429, -0.72913795938321457, -0.92399841364738444]]], [[[-0.80073612255811466, 0.90023781259515867, 0.18795076273064959], [-0.15098768504151905, -0.71587516139369067, -0.97229362396511898], [-0.10460627019384461, -0.81398827712712207, -0.72071537854031442], [-0.79039626903543736, 0.32938072901008031, -0.42403258263222443], [-0.072249097024825737, 0.60656128517591212, 0.55639281464617385], [0.097095558964957807, 0.26800580385345762, 0.050339463039562826]], [[0.27341344802274614, 0.37748736227872026, -0.94022589056166872], [-0.19592297086959154, -0.96456324163504115, 0.82027547812482715], [-0.7978893156305471, 0.10714447854399856, -0.87251983009416434], [0.44994796640012202, -0.45826231032314624, 0.046109896346812285], [0.74434934493546856, 0.99630098885288576, -0.32240205923272525], [-0.75525269336550638, -0.38156251751929715, 0.40686328767844615]], [[0.25121450488940944, 0.095025106933026793, -0.54889227845689326], [-0.68491442623067167, 0.14609375856215312, 0.38942779106736847], [0.3684198937909442, -0.35598153405570088, 0.68645545935119689], [-0.21634446477697078, 0.9549341376185041, -0.68951887465902373], [-0.73645536973894155, 0.79439981514408831, 0.1019715432003141], [0.50282092964417324, 0.55344837314143747, -0.57480909488630072]]], [[[-0.77369165207660417, -0.050781418851808757, 0.84133823622641724], [0.23118181916689262, 0.58318709783274625, -0.89720323915692046], [-0.72968397048827982, 0.26797584583394607, -0.80844602436573698], [-0.34058787194765761, 0.68679545136641207, -0.8407428602832423], [0.83332875673862761, -0.95443882456064411, -0.76615157930939803], [-0.71754412803028478, -0.61272567682120616, 0.49092557311668372]], [[0.100380461986467, -0.90065800891235126, -0.50710382562763168], [0.95205111565239253, 0.58541623420612865, -0.63065569519750486], [0.37672706224571617, -0.87166500881191067, 0.92874069224413835], [0.24595010051738653, 0.9652664998916618, -0.91810087714490574], [-0.046120949813266199, 0.25725398770160712, 0.46812403578116468], [0.33958363259969571, 0.47634620985208342, -0.96021247823518152]], [[-0.61479946542394037, 0.93295168797186556, 0.9771456700083776], [0.50737574708560818, 0.22046878256535241, -0.85026809155612026], [0.42214506026559917, -0.75488447489201649, 0.55138951162832184], [0.099123722845680717, -0.83047607239238519, -0.48083862540357614], [0.052989029976337809, 0.39607961061145969, 0.24230060458482239], [0.98476711544636553, 0.99175665281140835, 0.25832816841557493]]]])
        ref=wherePositive(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_whereZero_Symbol_rank0(self):
        shape=()
        x=Symbol('x', shape)
        y=whereZero(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array(-0.914655410713)
        ref=whereZero(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_whereZero_Symbol_rank1(self):
        shape=(2,)
        x=Symbol('x', shape)
        y=whereZero(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([0.83350248064124721, 0.84948125815913711])
        ref=whereZero(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_whereZero_Symbol_rank2(self):
        shape=(3, 1)
        x=Symbol('x', shape)
        y=whereZero(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[-0.60626761247736805], [0.77652921645480166], [-0.76210550233804675]])
        ref=whereZero(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_whereZero_Symbol_rank3(self):
        shape=(1, 3, 4)
        x=Symbol('x', shape)
        y=whereZero(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[-0.1073829236469277, 0.50676851501167364, -0.9190724930346732, -0.49399901446544536], [-0.059983475970388556, -0.83113557658399873, 0.89164686111330393, 0.58420714368192961], [-0.42051431808211293, -0.21141282208656165, -0.60808773180879694, -0.99093834090495259]]])
        ref=whereZero(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_whereZero_Symbol_rank4(self):
        shape=(5, 3, 3, 5)
        x=Symbol('x', shape)
        y=whereZero(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[-0.83941105579479025, 0.83278498836019055, -0.83931406450244972, 0.41638492994463072, 0.28537236982054504], [0.18718765648204405, -0.74789718798579496, 0.19239037721712737, -0.090757888250690311, -0.96163283937395927], [0.82082263512265774, -0.32293940783490349, 0.61049219892499296, 0.21307702000752093, -0.95894435377397125]], [[0.54990366221992515, -0.3994029053508048, 0.24783365952983316, 0.2642526494329529, 0.77658453229920488], [0.23931270439468655, -0.81238160012493688, 0.93304758447236136, -0.43974291715591174, 0.029384577459990124], [-0.81293375267384715, -0.0090004740230413827, 0.24376389105645235, 0.43389325504466747, 0.65516516394358093]], [[0.89192211093210139, 0.83594505542276298, 0.4060386326320673, -0.65996385963318938, 0.98290241216573127], [-0.74454083575055963, -0.96073579602972647, -0.67010326424137534, -0.9608744201352124, -0.35834040401887046], [0.022404972507800824, 0.22619310837371209, -0.3258984643197671, 0.39282495194682143, 0.82290203535385631]]], [[[0.95169485622865824, -0.34187340688458301, -0.78634864812898697, 0.78621921448070853, -0.13914665920755009], [0.88521977418554143, 0.55726732825673397, -0.95340364052828708, 0.82069194976074811, 0.38745840024448719], [-0.76885850257501742, -0.49226684310649071, 0.6310199990860017, -0.59583969586067465, 0.55756756306026878]], [[-0.85885654411032109, -0.79583136717720326, -0.79340486893741269, 0.99328206775748651, -0.44075717496503608], [0.32926693076625302, 0.41277527634847666, -0.47697767966410676, -0.8105362717713398, 0.8576921346689097], [0.26689367367859895, 0.77198921162324186, -0.60834607009876041, -0.83582808129702402, -0.8525450137388848]], [[0.095170043895564493, 0.7010339057900381, -0.093557875980226024, -0.28586534872883851, 0.55395495836868913], [-0.13985693504355812, -0.33249916089632325, 0.66595874035187053, 0.58384792124849083, 0.54115231442295686], [-0.36710978951894369, -0.77757522531643741, -0.020861454148379588, 0.12969569039154405, -0.72628725778733183]]], [[[0.82351649169873231, 0.13015494828114971, -0.44296139490860753, -0.68827714876326107, 0.3288222641264642], [-0.99657968335497404, 0.13046485345226722, 0.43525087799916506, -0.6210943850203352, 0.2687646832906172], [-0.012695809929800461, 0.28422795982808302, 0.56772679923353531, -0.35989840912198257, 0.37478650363443067]], [[0.16934997437182919, 0.029983786381820421, -0.51674661838124236, 0.75169645874701696, 0.20820931855512215], [-0.26557333575614472, -0.82954675835021585, -0.99256133708028038, 0.87665986069271762, 0.46990836998576579], [-0.66416500902048492, -0.057123491058536313, 0.020348747941931311, -0.23940287477631927, 0.06800036625603223]], [[-0.54887547103075307, -0.43143653788240721, 0.22237120905582275, 0.50468750714936905, -0.96922177862701475], [-0.69839643700957543, -0.85141929956868823, 0.18562649498691886, 0.31707067021778723, 0.25973546346148368], [0.71759598239126388, -0.079911259575809579, -0.0050189748344666718, 0.25687114462746874, -0.62198300355098368]]], [[[0.62757167218486587, 0.48367013066744624, -0.23984893253197392, 0.86469509213374462, 0.09509690274755167], [0.75113631336658071, -0.45669942800704466, -0.44245971970549491, 0.73571049558108381, 0.89906745172433733], [0.62281184561528313, 0.42638158602419396, 0.71490244295846428, 0.7950843786813917, -0.48739932182514534]], [[0.71371537367370919, 0.20799265266122169, -0.17576487910096494, -0.82181555778746795, -0.88846688971097443], [-0.31704935577377569, -0.37414397080354411, -0.15519161168030515, 0.33587422769291675, -0.53147899282721989], [-0.26540632156885735, 0.53443064050314137, -0.88441809562462081, 0.92737740838766558, 0.044870314957567992]], [[0.77244531169491282, -0.073579326393350186, 0.28541550718315922, -0.57795688396949441, 0.92173537252621274], [-0.3791271474397242, 0.4795809544549916, 0.39383814213200119, 0.24726499289903225, 0.6514007953440164], [0.41672222910880308, -0.92912982735620564, 0.12818977320921832, -0.075621939107357816, -0.063990459133624222]]], [[[-0.17065891291838353, 0.81076843444649893, 0.91986331092950446, -0.71209547606213053, 0.34159024021396545], [-0.89945581946651876, -0.97577700957389757, -0.60630665987942289, -0.31657511133249905, -0.51638421362661235], [0.83577387702667671, 0.14412341267182027, -0.42457645365187568, -0.7755954079447438, 0.38513195890441398]], [[0.45222276683442364, 0.4325216049771643, 0.30087243854729384, -0.83842852191512485, 0.70895818547876543], [0.54675500994016013, -0.68090177708980293, -0.40390877479911391, -0.62417972846075376, 0.10583718272497822], [0.53914946682369735, 0.75021954178784167, 0.59715225404113004, -0.96942708129718813, -0.36542539284260145]], [[-0.5533989730027038, -0.21203071042942456, -0.29419727270995488, -0.017520885386318685, 0.47664809921429763], [0.28559071489952248, -0.039546034825929777, -0.23967818885059078, -0.64787678117720171, -0.20512680015329687], [-0.84875152788331043, 0.59766508383440864, 0.3915519838963033, -0.56505692655198025, 0.31532780507689262]]]])
        ref=whereZero(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")

    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_nonsymmetric_Symbol_rank2(self):
        shape=(1, 1)
        x=Symbol('x', shape)
        y=nonsymmetric(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[-0.81231668287111436]])
        ref=nonsymmetric(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_nonsymmetric_Symbol_rank4(self):
        shape=(5, 6, 5, 6)
        x=Symbol('x', shape)
        y=nonsymmetric(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[-0.87611381274896494, 0.64084908360843329, 0.94971251072772067, 0.15496952997452684, 0.068460260139867168, 0.11264684315944873], [0.73979629158557469, 0.80828078666893277, 0.69921713970335597, -0.14749070685347099, 0.7441521893365024, 0.61548151079953128], [-0.52810391671544132, 0.75268599232938005, 0.57099525595282419, 0.78455694374665219, 0.27027013026661817, -0.39006842741665948], [0.70566615543150912, -0.96110664185626815, -0.59956372616677189, 0.47552547539045631, 0.38013232187569734, 0.17081466188492245], [-0.97157201678990956, 0.43229949178208393, 0.2143034754119153, -0.16330988760006049, 0.56783537173895171, 0.84762036160156362]], [[0.084427924914955099, 0.58687163761251071, 0.048623960448611836, -0.6143433562928553, 0.83889139190041662, 0.11462546478479418], [0.87264716105891837, -0.72471161960490527, 0.65683669832772429, 0.48369518937375466, 0.49267031558890362, -0.70139524332654912], [0.50978042080358854, -0.54237404263272282, -0.36439070925769457, 0.74861475912008779, 0.54265600745686404, -0.57080040007909405], [0.27495061607322802, 0.3857639219903386, -0.013728392180178961, -0.38798005297873916, 0.034099960777301375, -0.2933169525447914], [-0.14325729599190917, -0.45034435650037352, -0.90140040912365649, 0.73346057167497691, -0.73635328815941725, -0.040202543638502952]], [[-0.0064177036510466579, 0.72335334254458417, -0.57187664768558988, 0.54747431198206087, -0.78468789412090056, 0.28316807338596583], [-0.7012810789431656, 0.056420440089278046, 0.25612197762738509, -0.46803354940034181, -0.25411765275565301, -0.50291154394448623], [0.8746544829878069, -0.79984251020281438, 0.23838147427605416, -0.3478411828200445, -0.93707530927374449, 0.22835053727961774], [0.83188765942559861, -0.75576363553855774, -0.43319595555336887, -0.35368473485377483, 0.058032610015694264, -0.63261298821224865], [-0.13182912933606583, 0.88270252189898146, -0.55608536138433573, -0.055458565563316631, -0.98074797953836224, -0.33368578435335006]], [[-0.65037196792974283, 0.95989776572693231, -0.7363456508877968, 0.51358219390705195, 0.094487645971377265, -0.76354846635518392], [-0.38546353716757276, -0.91503384821396483, 0.42418979630392872, 0.84706987816207602, 0.37907656604193551, 0.24441124806121484], [0.43290516677160307, -0.19172804785493747, 0.43475129167612891, -0.13493232398335908, 0.21147130694799365, -0.65559946788913548], [0.68696189365091231, -0.037695405275463667, 0.40309879322198294, 0.9930415020193617, 0.39019048417347668, -0.74659256237646643], [0.028681875548546731, -0.34594450482122929, -0.83384588229923984, -0.0090384081706393893, -0.18473385897240169, -0.07015301293647247]], [[0.18679937053209339, -0.70641913582105698, -0.2885047136862553, 0.025447470385290272, -0.60451536925890492, -0.088116242491905972], [0.77554202276267326, -0.6957432935398602, -0.6072043758002692, -0.81845106964517367, -0.013489119028041063, -0.77651672487138979], [0.016331675637332621, 0.84488313852201191, -0.23827606021037862, 0.77096010793201231, -0.72207076553668803, -0.27745990797087927], [-0.82025136799805565, -0.62153620483800665, 0.78934339289970268, 0.90843441071559772, 0.19444035161605333, -0.51808534523291261], [0.89251058043090437, -0.51113448814442153, -0.75148759096619222, 0.79074127373529257, 0.62045925984014794, -0.70044796146071575]], [[0.82284718847205651, -0.59167277293910181, 0.85926870816682466, 0.69949338482497736, -0.85092650233379707, 0.96064173776846062], [-0.41965402128561569, -0.71707129474841391, -0.81439218292545856, 0.28959167219270343, 0.35283448394849426, 0.28734860586747679], [0.26930701073879471, -0.68236156895709699, 0.97802995167740825, 0.56898242707065649, -0.95371774729358605, -0.49238960528695319], [0.0028815519190936723, 0.25573403649043525, 0.50398375067739498, -0.86368459856760049, 0.95880132246760219, 0.71778420562947387], [-0.2007835536468352, -0.50039904674810542, 0.58116162587360187, 0.43408510241775078, -0.4818614385883877, 0.10161453292730882]]], [[[0.75032365142867663, -0.94597876002107162, 0.27812743743538415, 0.41895904607669254, 0.8862004211643042, 0.60288071371596286], [-0.57677959402362622, -0.76256330554800167, -0.79311165066956546, -0.41353759746760366, 0.060239587681902629, 0.91483752675619767], [-0.2465034079242252, -0.27862287433414701, 0.16272598061047083, 0.19538302362518856, -0.358039287052351, 0.30052746727274537], [0.0438043124170584, 0.66074409636709297, 0.36516083952029388, 0.47034778976641012, 0.66119091858463919, -0.77417430386497621], [0.61226557988771568, -0.46560569392529727, -0.16413985983618673, 0.60576512415240114, -0.20150908463341133, 0.13921226992406299]], [[-0.21269028193523898, -0.85655383793183759, 0.12951362106345798, -0.98106966855968292, 0.65675081572674809, 0.37851323917381663], [0.6915579733554571, -0.52217595873092715, -0.32685216128891748, 0.62218975188600023, 0.96554033639297066, 0.63852427547139667], [0.2199197865643836, -0.52631350348362749, 0.11636499386388222, 0.7179518117421877, -0.051479894193612319, -0.26229965739986461], [0.83191068523243494, -0.63195835463630523, 0.99676341886077702, -0.18403398213792532, -0.64641438965799747, -0.79988159027913963], [-0.26018824191835144, -0.95458908718043634, 0.099209264672524444, 0.70706710742929846, -0.44425602284242016, 0.89924783632714966]], [[0.60711516997766801, -0.65173739927053265, -0.12180936688473643, -0.99718800009773445, 0.93156499341563714, 0.16522802930170921], [0.74080775869445481, -0.44441964539836687, -0.45974566791069438, -0.38641020281447003, -0.10164202185872884, -0.43813698004408841], [-0.21317824673019792, 0.12556318930443422, 0.28361897841805961, 0.11600501248777406, 0.047850152773347032, -0.32171253784140208], [-0.99935809926111707, -0.51605525163232757, 0.18237424166425753, 0.029838344764782754, 0.51254217007650205, 0.25319067623762126], [-0.87622067250260405, -0.8481128356804708, 0.45137459717779294, -0.12151480629236855, 0.71459163492889521, -0.084412959501667606]], [[-0.17191338811000101, -0.59295021564672545, 0.73343504758381961, -0.93984029618435616, 0.46945185680752255, -0.15272787556538292], [-0.73491812492016217, -0.39939133671541005, -0.54208423990018506, -0.60312043376004976, 0.68182347495961282, 0.81611758353879971], [0.1717358200148178, 0.066884838463589169, 0.40114383552456001, 0.58227195559263256, -0.73399292795915572, 0.62894475778402503], [0.99186469042308523, -0.4021865130176252, 0.072158837042100243, 0.28404445558623892, -0.2105234483077838, -0.42675299612200135], [-0.94985696068432945, -0.2990858315510474, 0.98650857570993389, -0.0030509919576788835, 0.52451481773108166, 0.039355544042572355]], [[0.81153397640763281, -0.23537161708943022, -0.08284671403641708, 0.70339125550572001, -0.15450167302977236, 0.90536889643217067], [0.15244340143333934, -0.63771380922325749, -0.33150964726198273, 0.39826030299859738, 0.88124420590269414, -0.28495340018593951], [-0.44217851423139654, -0.63855768155987658, 0.93150688556859418, -0.69168931122851829, -0.15885216337278596, -0.9723047883421061], [0.59699511459221632, -0.5217502494096371, -0.29410330404937812, 0.88131468491175768, 0.70243622344394896, -0.32349433543567474], [-0.28418568077289086, -0.34235787482968005, -0.21463559272753563, 0.064871283868694229, 0.56144210240324544, -0.38312849493161205]], [[-0.82721783642104207, -0.79268672711468913, -0.47559249859847852, -0.35437139090060987, -0.34939177926009157, 0.15734725235620539], [-0.67041834253552257, 0.7630166957118143, 0.6515507128749578, 0.97312015740646718, 0.11446001939726114, -0.058153640233599369], [0.91124080303497457, -0.7764574736567138, -0.33850491141012129, -0.38827621073946883, -0.75760273047555571, 0.38414637564163745], [0.30202567275075043, -0.27432500508173097, 0.89660111679656662, -0.27852338224283568, -0.062672889716266056, -0.11938664495782847], [-0.91068255335030202, 0.055602783828616609, 0.49767917107095383, 0.12290236922903586, -0.31448158911459223, -0.58884771180083528]]], [[[0.93625146831753647, -0.0094403026067120255, 0.80337476226176818, -0.59463114243041382, 0.79901587132530305, 0.7785381951773136], [-0.9838528799180255, 0.11625268747844308, -0.62458475377155742, -0.10486154571743933, -0.27220257068519249, 0.47493432417638792], [-0.924001900686652, 0.9951244112330091, -0.62188371305334589, 0.67966502327599998, -0.70783697019641845, 0.29850462389682408], [-0.31394573923605673, 0.088858826781420097, 0.75392740836645467, -0.83489553545440121, 0.91363410790971833, 0.72447052239792753], [-0.81651789380421214, -0.4424853014106398, -0.28607752820757515, 0.81263927283705817, 0.28638123558065764, 0.35628337556867318]], [[-0.002658523286944714, -0.079505938810717547, 0.30580773543185957, 0.8600792388073093, 0.50781453830840473, -0.46548302391474006], [0.72370150139185441, -0.23009024503271402, -0.85206923894795317, -0.56441007904945883, 0.59717652525913345, -0.4406997331224507], [-0.36320251422121252, 0.47844416554129987, 0.086932663542413913, 0.24300190778524877, -0.58720890062069642, -0.68754968855534804], [-0.32309678416389587, -0.045738240874976466, -0.11902303977460993, -0.61084327065543187, 0.42570420025583156, -0.16254051311551754], [0.29862108900701267, -0.42148270419243339, -0.43755720282552302, -0.80254542317049626, -0.90321571834497405, -0.4239566592145938]], [[-0.72255803849358347, -0.35554605246877857, 0.24537370918829882, 0.70242034329706105, -0.90292608569373622, -0.59147883349459685], [-0.13641389050800767, 0.80441796787478825, -0.78476887404350903, 0.79970520735559569, -0.34724379038283404, -0.52732367731474761], [0.76929506136271208, -0.88127686296171315, -0.1517681590712987, -0.9688206697793309, -0.61438079353507113, 0.2816447885662523], [-0.74169615671913736, 0.51848938874209538, -0.96974634733045995, 0.73226281109865754, -0.042427117570237316, 0.29081556162505584], [-0.44860399655463534, -0.89745942535467638, 0.29029843080196804, 0.97498064816381858, 0.67575147294719384, 0.16665422873580593]], [[-0.35700062508392127, -0.23199007648737369, -0.11460416793066952, -0.15009914353656639, 0.45246462847535063, -0.32633729385789589], [-0.88580385009630525, -0.092622865025415946, 0.83193964199110826, 0.99616325118004245, -0.32533927857274536, -0.57680819304581132], [-0.39790911331940393, -0.049729623068768269, 0.93416377036775788, 0.96655889730945099, 0.74186462223881366, 0.45261673423586668], [0.71396794466115021, 0.13723774819054069, -0.95145141760006635, 0.36750573797446795, -0.9319553100903617, 0.68170496778050338], [-0.076153754993744105, -0.28526593384025989, 0.19249121111310541, -0.78542484620205988, 0.8434500416889168, 0.36147012929175615]], [[-0.97759435861614952, 0.2637456674831602, 0.43563687414865027, 0.70732528626429558, -0.97231015101677931, -0.22015595811443633], [0.58219330799719704, 0.26512804973928072, 0.87243920577620426, -0.46825827655332142, -0.61157878450082781, 0.66390574430126947], [0.99061979375563003, -0.27785123249912358, -0.53223031121982989, 0.29249654913589507, 0.13689418621928806, -0.57146378274408827], [-0.97239650667991495, 0.43769466002075053, -0.84185208417299018, -0.4622257761676567, -0.79495591663993648, 0.52365540243475772], [0.80213335284784271, 0.19090197736632408, 0.76607961935125091, 0.80301925079537795, 0.68695444492984303, -0.78376343500139201]], [[0.61298870417906337, 0.32609146690181801, 0.45013748163197453, 0.29171733151375823, -0.059935678561255701, -0.77990385241972149], [0.93953951595530016, 0.27723218159564045, -0.70515274122789307, -0.51110351426128364, -0.024085766494907013, -0.46280998755487657], [0.12960983281769867, -0.14796654569653755, -0.92590688173270563, 0.59404413106639753, 0.22267442109838687, 0.89169613200367848], [-0.68381405291728869, -0.59301143480545671, 0.9664517816395215, -0.19282681675905078, -0.71166858558083579, -0.37154387770631292], [-0.20609009959999436, 0.054847098928429983, 0.6078851320935561, 0.10396105828208047, -0.69151184308551139, 0.67781864817726412]]], [[[-0.94661369837466358, -0.40657766168139076, -0.28588171109662341, 0.24471000514482077, -0.69237634506685297, -0.39087890183759089], [-0.90651306113844288, 0.83290618009538497, -0.66346332205874425, -0.18686960450625789, -0.318616605907867, -0.25228320265891235], [0.88412614303152481, 0.7911952965334812, 0.8199484332806295, -0.21155979513545176, 0.050759723666337075, 0.44739871002418896], [-0.52815330030021101, -0.36474332102694151, -0.3112582914486075, 0.50987311354299814, 0.90414413419693207, -0.63004053863513398], [-0.26220982060072973, -0.60659015699002494, 0.80611801481670753, 0.39130704276382011, -0.89373650680786887, 0.7104127760779364]], [[-0.01605725053998297, -0.97743733193976268, -0.39888117921471711, 0.4992673696372818, 0.88868094337139558, 0.30361347408479666], [-0.38500332857906505, -0.51232562777357948, -0.57343824052516257, 0.7390966436967592, -0.85244234759352677, -0.18475873788371988], [0.05332349571310413, 0.3638256570749816, 0.027927413767144582, 0.2606639811228888, -0.19653603808033382, 0.23623484325596178], [-0.9984723614171791, 0.39712150340294694, 0.57304703032492665, -0.31569349012537962, -0.81582601444003311, 0.64594332000066901], [-0.82128734605187814, -0.43186749614152431, 0.28869152955715061, -0.93236845140395275, 0.33451029705223467, 0.084651764255883055]], [[-0.6034857845492041, 0.48975202302025367, 0.040953750094797403, 0.99636476884417546, -0.6018056968725658, -0.39825360750539529], [0.61878385799364888, -0.54972014958279081, -0.65413813406439902, 0.66765019400698944, -0.50739418442226336, 0.97933478955364262], [0.22813702762446053, 0.32896125564698253, 0.20188269442039908, -0.039776904395476986, 0.6234413955224487, -0.022273537732076409], [-0.30932159828910022, 0.53603044019122126, -0.021341688264543857, 0.78411524431242885, -0.003364405215609434, -0.00062507332794470294], [0.48237689474820922, -0.80925869881951762, -0.90080460000457929, 0.82807957839458934, -0.88758895612176247, 0.063187428334408713]], [[0.32858520323495632, -0.45120170801555926, -0.89235362645718586, -0.031104149586698604, 0.035674630951878505, 0.084072694589781394], [0.36219218964410937, 0.83465314604678409, -0.26939451911632339, -0.45960712055105901, -0.66309265652378979, 0.21303268737416592], [-0.90908016446335504, -0.23130247793809811, -0.62285786222017503, 0.7498338947473786, -0.67805104495510027, -0.49978619834234106], [-0.58962688174368094, 0.2936461242882793, -0.073207686001991013, 0.95316113410087899, 0.35594738600758591, -0.28502416514438589], [0.63470018589592647, -0.59205223835316256, -0.99500909663263282, -0.40036360989316999, 0.066439847917586059, -0.34160342329334936]], [[0.51724606461989775, 0.93601611830788478, 0.28921437171866504, 0.40282887804566658, -0.20124173575964677, -0.22573680005369545], [-0.21842235747926497, -0.95042796889020242, 0.71270520978919616, 0.42586978231295758, 0.98526453016734106, 0.77944708167358323], [0.97921943145806023, -0.44641060603747107, -0.47010053456623413, 0.9464879633663672, 0.75092447120531935, 0.33209470344965686], [-0.47348115677065072, 0.33420256023572081, 0.94829400202182246, -0.3870034812942349, -0.28068768315932058, -0.7782116842636313], [-0.40565168516948891, -0.21798724951304749, 0.87243471338058365, 0.24258361784756133, -0.75185813227107978, 0.019459239236987003]], [[-0.76041236453565575, -0.50204622099870599, 0.31165790715958663, 0.85144630071188487, 0.16546260314237204, -0.91907145992274253], [-0.52040546182708591, -0.99633506607993771, 0.70918349649152468, 0.1506404775689425, -0.27674864881953232, 0.29682148669990438], [-0.97456555467797124, 0.89423565222339696, -0.74663075187643457, -0.017953126321285318, -0.3288840638947268, -0.41626308466007345], [-0.43021290888322783, 0.96328533930683657, 0.88674201773443451, 0.071991404578504392, 0.84906637238371352, 0.90865780940672036], [-0.048776896705082118, 0.48337587830399142, -0.23566950478101178, 0.22983208819015477, 0.84794981757835775, -0.33507449998474659]]], [[[0.82275289107719418, 0.34224360285089106, 0.19482808760498305, 0.83434595024891745, -0.64056567736458181, -0.019233315233576409], [0.28816831750508465, 0.0099530613713001426, -0.55508593881288348, -0.61194130860491769, 0.67139145388307098, -0.93097286510122035], [0.29052224789808179, -0.76823735521100955, -0.83508803893627492, -0.78504144700962097, 0.14683360886732322, 0.32288659060834934], [0.1004212435296421, -0.90236516853809445, -0.81625560207318637, 0.52795614645743671, -0.26106790514433142, 0.86564890922062787], [-0.53846164160087273, 0.59588268399185074, -0.47250909946334363, -0.68472137051415971, -0.96105912494672863, -0.77930361748620824]], [[-0.066968685488735913, -0.43626742416542741, -0.91172162310998139, -0.10416885808883536, -0.40644244858757395, -0.19215240616697438], [-0.84237915856399082, -0.61464645235428028, 0.57375228633696795, 0.70133721183485531, -0.99432772066411412, 0.12579954023356565], [-0.16210374005596373, 0.49854751593457269, 0.73142695207679265, -0.967916049035626, 0.096170055949112099, -0.16128769997968306], [0.51051769655033286, 0.10772010066845228, -0.81211001864358257, 0.47745733126493506, 0.91954745808729177, 0.1773396669682108], [-0.58621735735711633, -0.87662414956629053, -0.80111580505020985, 0.78015513033282757, -0.037026166222301704, 0.46376666821189305]], [[-0.0015100951455513378, -0.82315734612630242, 0.58734027692485924, -0.1866061157822827, -0.49288597163563685, 0.58957358655953351], [0.092289388260557326, 0.84839789673877952, -0.21748435738509997, 0.17956096877998085, -0.18191481740141868, 0.37755892345586162], [0.66354592266141355, 0.57181652232164892, 0.64730538265286164, -0.099920448138942852, -0.20056364289981987, 0.58541950134908949], [-0.17665443154594129, -0.99499170845106288, -0.78638312580197378, 0.65055252896325744, 0.73650774506496308, -0.58116005190539877], [-0.34116048126062104, 0.61397096168330223, -0.2733607490804868, 0.53315788289177024, -0.14200231936103203, 0.073787294460491593]], [[-0.60930793462584432, 0.81297986760684915, -0.40008939854468406, -0.52495294538061588, -0.45438948493686326, 0.988954858355791], [-0.4776041321764688, -0.20072301276029458, 0.67479509876289478, -0.56677252670626266, -0.095809913209736752, -0.74375817346871442], [-0.37005268169425642, -0.24572409406052675, 0.71369218459379136, 0.95962826737524698, 0.96473617000749146, -0.78645121446035127], [0.64854292209443942, -0.44918000112261769, -0.77980115426808938, 0.11711180259132226, -0.60376762194112388, 0.80912751953823236], [-0.22704073389682877, 0.02210732777487423, 0.23536686192753242, -0.35279320560379301, -0.13360912261150903, 0.45094085030958952]], [[0.44970567132802031, -0.87816503255540401, -0.92665893069683158, -0.91256727164154738, -0.77402620933288735, -0.30140026376947326], [-0.49968028479210469, -0.75567943165078932, -0.39812780183641783, -0.060165068663369459, 0.015559392432227703, 0.39151852743193793], [-0.60598569513731793, 0.11823753215751642, -0.98245846739296816, 0.82126761785295144, -0.59233291037803659, -0.50934612365280096], [0.17627703013049811, 0.21518720995523166, -0.46228460494756707, 0.69442124395020044, -0.62634474588701683, -0.99401512753014254], [-0.89647170955283428, 0.62476250692837776, -0.73199233844806533, 0.961389908171705, -0.23754747259665221, 0.92667424690122169]], [[0.83685459668817908, -0.60431273407951225, -0.21534304898594869, 0.34124388325251109, 0.22743636934436817, -0.88921496779821041], [-0.2269653985770681, -0.5639101678812708, -0.1815990471729394, 0.1937106062817231, 0.11179142335947123, 0.50071086128426878], [-0.89475869335730751, 0.894752380449094, -0.36850459991996631, 0.66280846615620526, -0.36726384303958159, -0.97210798314245062], [-0.06731239965166913, -0.63631017713333726, -0.19859831759530056, 0.82658330465103402, 0.61774555748092697, -0.076542303055015193], [0.39188538791775018, 0.86209648718309118, -0.29730889865738397, -0.12979359877986418, -0.2506525917450606, 0.87427628278710134]]]])
        ref=nonsymmetric(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_symmetric_Symbol_rank2(self):
        shape=(4, 4)
        x=Symbol('x', shape)
        y=symmetric(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[-0.46792834938698458, 0.045147821991970982, 0.96674152032174154, -0.17847128296337367], [0.36127109484785125, -0.64962104789778619, -0.45818358602109255, 0.4842481004321797], [0.23531324920146557, -0.44743006966516874, 0.68551427286430466, 0.38559441812728079], [0.73635940442472836, 0.28489279342520124, 0.29499061276398142, 0.3199242841186285]])
        ref=symmetric(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_symmetric_Symbol_rank4(self):
        shape=(5, 3, 5, 3)
        x=Symbol('x', shape)
        y=symmetric(x)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[-0.80635606764162016, -0.11177758581999231, 0.62547687714245126], [-0.53183124611565558, -0.44552486532223723, -0.69409867941843251], [-0.91063181827153006, -0.50494231082043117, 0.76087041350098805], [0.87288254697945011, -0.24311983726866004, 0.66991231648290128], [0.0079165600076596121, -0.51686234434648126, -0.9693536865875223]], [[-0.88970284892057871, 0.033084057992284865, -0.29186190375261201], [0.1092522384189496, 0.46496784313854356, 0.82187713762205195], [0.22980491008242421, -0.2065397313607642, -0.88781001768355949], [0.97444496288339488, -0.36631281409151839, -0.22661771825523691], [0.10657573231488282, -0.9745868878485433, 0.4379206849451871]], [[-0.93707383161444668, -0.85353361035842479, -0.69281855366905498], [0.09224269695137588, 0.65195436215257541, -0.24062687130631488], [-0.59485122627354725, 0.14099353818243943, -0.55586107393946982], [0.2629832475730316, 0.94015884879079792, -0.41582446239908588], [-0.14758137480104949, 0.97672695828367839, 0.76704056760845263]]], [[[0.30069394589700527, -0.69795955431587453, 0.67489051669529476], [-0.24025012662318801, 0.27102510867429364, 0.76205316568183123], [0.034444442862595404, 0.20802913527389855, 0.90475029084120129], [-0.97438677286659381, -0.77617456232872795, 0.17759043969939614], [-0.63547684008896543, 0.10819143030934297, -0.52858617691027798]], [[-0.5181232109512961, 0.36228943045020445, 0.037931654234922618], [0.11006591193969162, 0.44874273710160884, 0.29101763774853073], [-0.12943284053513526, -0.28101670895959807, -0.1584555062730324], [0.74741671044682767, -0.78164315616971436, -0.51191408313455411], [0.3572607756698607, -0.97483835131597862, 0.19816333690352206]], [[-0.36925593164384796, 0.62626809452738041, 0.75939204178643105], [-0.96404111223803102, -0.88573988032165585, 0.88906345078138282], [0.82510062191559674, -0.9606334539439938, 0.24775815128495493], [-0.49511080939083851, 0.8993703352517548, 0.27607087504723538], [0.92178557151378571, -0.21614900530006143, -0.76867536974330886]]], [[[0.45393057017252314, -0.47856676088175254, 0.53750196543783169], [0.11845460979574529, -0.27725306400485672, 0.58929253114981983], [0.88369319037935834, -0.4893822351777799, 0.404973479760524], [-0.086201429900541138, 0.57888860660176267, 0.31525355740316297], [0.14319918714021762, -0.47531372000361105, 0.55562118802135774]], [[0.40012037870305583, -0.41529082057160749, 0.35096159045439013], [0.73184471854143829, 0.55947850634386809, 0.26342262302211283], [0.54517605393845181, 0.79801864100496411, 0.88088949294028884], [-0.38210715070419288, 0.76548798358020109, -0.78773747688574414], [0.60148010540275498, 0.63687823468389326, -0.8695524852758818]], [[-0.70029346410610116, -0.1213103965160971, 0.41208098869593779], [0.78875615839465141, -0.8061791754090708, -0.65968949562998835], [-0.17489456358071576, 0.8889755686870533, 0.32319991339818621], [0.22411999904874524, 0.46488935146636612, 0.85549240335626009], [-0.92731917590337676, -0.68774505876567527, -0.63143701190553059]]], [[[0.60033914846818304, 0.05334283970282927, -0.25203935786680565], [-0.98574859052466968, 0.23734940381270064, -0.98128944716059774], [-0.11321882751663748, -0.27653177668559814, -0.7056544826901332], [-0.81714880486416552, 0.11772873195959366, 0.24169169765987863], [-0.43420763714591692, -0.63257360100814752, -0.22918427218574999]], [[0.78862416638192467, 0.11358512719176561, -0.15650112857300535], [0.075136425007972685, 0.059458513605276098, -0.75187283857419196], [-0.99529193072341715, -0.93933008640440119, 0.69703959228427581], [0.73412749967764079, 0.13688759254419414, -0.67790559540033946], [-0.93528515588189753, -0.80775677411485858, 0.98291861771065081]], [[0.90045204149384395, 0.38437121467974933, 0.89787430976858684], [0.91536075553236063, -0.34865971103281668, -0.10030585674989734], [-0.96871566635509265, -0.51208816834447979, -0.30408626044858633], [-0.34393906447142419, 0.12879529036399084, -0.28627599671042603], [-0.72415307510705507, -0.62910544055314821, -0.25251318916277898]]], [[[-0.41779654827375112, -0.68222702544726488, -0.96847858652761087], [-0.14845945234293256, 0.5584314928708296, 0.67263454055372285], [-0.66127551458659317, -0.88547235576977035, 0.15476075101802156], [-0.52768254348246901, -0.34314725544478519, -0.2995119087593483], [-0.9481878362678986, -0.81535959017241888, -0.23057603494431733]], [[0.38804350887859118, 0.71622191157935244, -0.41508385210903342], [0.77206336306591261, -0.57065715785978077, -0.64216019389219081], [-0.96925585148719029, -0.052139973231341896, 0.65039651284185207], [0.52857106278509458, -0.14851113543744798, -0.64922062559112836], [-0.68839250477655378, 0.65968950792513392, -0.97776304174268791]], [[0.63172298904406898, -0.88212694236877542, 0.073875315784365903], [-0.2789793676888217, -0.81321613376162416, 0.95265811385587917], [0.0097725426277024408, -0.2753241741395045, 0.11253461394996944], [0.8826977470306534, -0.9597128322808457, -0.17898342439328041], [-0.80059693164743395, -0.34075072465916922, 0.831048319563918]]]])
        ref=symmetric(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")

    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_maxval_Symbol_rank0(self):
        shape=()
        x=Symbol('x', shape)
        y=maxval(x)
        
        xx=numpy.array(-0.536961062572)
        ref=maxval(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_maxval_Symbol_rank1(self):
        shape=(5,)
        x=Symbol('x', shape)
        y=maxval(x)
        
        xx=numpy.array([-0.96295467048775607, -0.23109517912761235, -0.8071533993829485, 0.21957942007641384, 0.058694114271927944])
        ref=maxval(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_maxval_Symbol_rank2(self):
        shape=(3, 6)
        x=Symbol('x', shape)
        y=maxval(x)
        
        xx=numpy.array([[0.48972575874879909, 0.49398944080879814, 0.021748982556587526, -0.79160796554380797, 0.34690195097872834, -0.81373170812824558], [-0.78489669235134074, -0.88410918736489852, -0.40722492573226021, 0.77862057976100729, -0.24609781167558187, 0.045128795464719929], [0.28771222409714015, 0.55760479157666576, 0.97982137290269167, -0.64248278563212757, 0.30985570299071874, -0.60195740046567825]])
        ref=maxval(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_maxval_Symbol_rank3(self):
        shape=(1, 4, 1)
        x=Symbol('x', shape)
        y=maxval(x)
        
        xx=numpy.array([[[0.85763256773047791], [0.63102414833823217], [0.79081114096988459], [0.98266504616740602]]])
        ref=maxval(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_maxval_Symbol_rank4(self):
        shape=(4, 5, 2, 3)
        x=Symbol('x', shape)
        y=maxval(x)
        
        xx=numpy.array([[[[-0.77107601438326356, 0.65255657434775283, -0.93158389513641637], [0.11399799893983609, 0.85573506951949851, -0.79378805621728854]], [[-0.23031913444734675, 0.11677313942504042, 0.33546188255596987], [-0.97839076852341988, 0.16365342524312787, 0.62977964804384112]], [[-0.77622030195937208, 0.17113293778886218, 0.53940779687711427], [0.95555159982764382, -0.92940035554865785, 0.52051734890560319]], [[0.45284408667200315, 0.7871131922862078, 0.8983873497639201], [-0.25935688538324064, 0.56573723809894139, 0.87872314794305351]], [[-0.24028346690271962, -0.75005902310461292, 0.68777993385329705], [-0.4313247231788655, 0.94366920573050761, -0.80685800769093707]]], [[[-0.34518608229054082, -0.50033899868723375, -0.3665712288517966], [-0.34054054239881393, -0.44639955430006961, -0.48839496653227377]], [[0.70728281629701018, -0.68227728638961649, 0.30306944342704423], [0.043910549173603153, -0.54631008927453539, -0.0053771817049026449]], [[-0.29241243057089883, 0.19915422674009564, -0.51121559994272436], [-0.63687591305960289, -0.65051888656542545, -0.5093469817555687]], [[-0.93906097061519644, -0.32061527433913883, -0.20252627146606716], [0.46202139708103784, 0.25695436574868658, -0.87949584230565914]], [[0.22854370153289416, 0.32828514712926915, -0.13603650740750872], [0.67835171897504432, 0.2662074855320069, -0.72590066315010837]]], [[[0.24647048806321825, -0.88106958633266363, 0.40831937531327922], [0.26275973208647474, -0.42920122675131678, 0.91922194147240099]], [[-0.28561856894864324, 0.98807638767841222, -0.82242623658545155], [0.79210957914499902, 0.55915000191933428, 0.86997449004676097]], [[0.39706252562270583, 0.46921844133096102, 0.36256864145602341], [0.36449607919792593, -0.049076904773179608, -0.0085125384155226858]], [[0.90280866937145698, 0.97678035001494012, 0.5333621573318359], [-0.876338999384215, 0.67142832179201961, 0.0035643194763810282]], [[0.80777202083394117, 0.076867661805710918, 0.44520511974373789], [0.28700447465108359, -0.80278327086419687, -0.88462687263812478]]], [[[-0.72839406698310438, -0.63946294028339601, 0.34045388669213272], [-0.23640451216926173, -0.16333252093856054, 0.5115552032032431]], [[0.53119268710858192, -0.069917563624526169, 0.0033100305136193331], [0.52007656626176146, 0.34611048489775409, 0.86016552636699362]], [[-0.3645051848252292, 0.6515162974466675, -0.7370727481735535], [0.13121153655411555, 0.77273867581534161, -0.89525655433028595]], [[-0.022217143875165934, 0.21789063919205565, 0.83504681168319794], [-0.31066701900530824, 0.63538494034356896, 0.50183868234915074]], [[0.69886742326226226, 0.92464262427135901, -0.32058306251229274], [-0.94848050428712982, -0.72689042914588176, -0.1895189451382433]]]])
        ref=maxval(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_minval_Symbol_rank0(self):
        shape=()
        x=Symbol('x', shape)
        y=minval(x)
        
        xx=numpy.array(-0.949178977805)
        ref=minval(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_minval_Symbol_rank1(self):
        shape=(1,)
        x=Symbol('x', shape)
        y=minval(x)
        
        xx=numpy.array([0.45528479821899914])
        ref=minval(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_minval_Symbol_rank2(self):
        shape=(5, 1)
        x=Symbol('x', shape)
        y=minval(x)
        
        xx=numpy.array([[-0.41661908195103492], [0.0096980024511226226], [0.80098576195237681], [-0.68569971975207422], [0.34489299842055399]])
        ref=minval(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_minval_Symbol_rank3(self):
        shape=(5, 4, 4)
        x=Symbol('x', shape)
        y=minval(x)
        
        xx=numpy.array([[[0.24468432281577868, -0.80621034265089553, 0.30588310363980931, -0.38010170067894844], [-0.36554502871710848, 0.45199347573214399, -0.43796451716675677, -0.28312682807127199], [-0.240749751444854, 0.22376087143426071, -0.72709614004779866, -0.2998096909135719], [-0.1531260911136072, 0.71282599379510647, 0.58491966112546212, 0.46277678730332905]], [[0.81019187891840971, -0.78742762583893344, 0.54381449306731344, -0.17824674699208254], [0.048677743670231033, 0.0094409833969215651, 0.52024696176142249, -0.99135409582425971], [-0.12526128430344485, 0.98219970205401941, 0.69339198256359347, 0.17174945292067467], [0.25620186985220039, 0.2755128824386448, -0.10355063338460657, -0.40082248448969438]], [[-0.23826117101181032, -0.21085315335966803, 0.35060404130401901, -0.74700425129159265], [0.48260208572666219, -0.97053557721514228, 0.5086420403736287, 0.13139275039077347], [0.028026313704564432, -0.42404164657895627, 0.22387327352724928, 0.74310379037857111], [-0.46378982888004994, -0.50302368999050406, 0.78218247847426481, 0.99216241594762322]], [[-0.73273265912981222, -0.2542144913113058, 0.02987100728025327, 0.98089662534354272], [0.67435706372512527, 0.31792581022384536, -0.83569334083633962, -0.40235359797121828], [0.86409510748628682, -0.10651465407207317, 0.28822178449711577, -0.88649123796102414], [0.44243068902345728, 0.68397079665450145, -0.029352570967092095, 0.6723466176774755]], [[-0.64259530769905671, 0.65305819929203412, -0.89128661526883324, -0.0023180437163436984], [0.10620773730275967, -0.27918883172151632, -0.37748207892708163, 0.20535683105278535], [0.53884309498907612, 0.71997759093942948, 0.61052063508530585, 0.37977772915318786], [0.82283320437190977, -0.18883416065470393, 0.59226252202782192, -0.74758584225603908]]])
        ref=minval(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_minval_Symbol_rank4(self):
        shape=(4, 1, 4, 2)
        x=Symbol('x', shape)
        y=minval(x)
        
        xx=numpy.array([[[[-0.18141214451639787, -0.17675249425365824], [-0.52642596129249597, 0.050739847932975257], [0.033659748801813327, -0.5728247223511691], [0.18240750707350717, 0.43069851813450111]]], [[[-0.84797296263572886, -0.62328511455011459], [-0.92009937949032583, -0.66567338535986642], [0.40107875207297838, 0.78371085543677088], [0.20119913221600982, -0.41476057328769556]]], [[[0.62347654709502343, 0.14285636075988251], [-0.95211037744019977, -0.94910709872028476], [0.23749698378174733, -0.010676163357491664], [0.78095448408407986, -0.45362067209504109]]], [[[-0.25630872354716061, 0.36299018454563803], [0.32324945357025037, 0.2929229986611015], [0.17002870539634762, -0.021938063254411722], [0.57702174063831446, -0.59189647827134206]]]])
        ref=minval(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")

    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_eigenvalues_Symbol_dim1(self):
        shape=(1, 1)
        x=Symbol('x', shape)
        y=eigenvalues(x)
        
        xx=numpy.array([[0.83927899524202787]])
        ref=eigenvalues(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_eigenvalues_Symbol_dim2(self):
        shape=(2, 2)
        x=Symbol('x', shape)
        y=eigenvalues(x)
        
        xx=numpy.array([[0.98390058399077041, -0.89730106953254629], [0.043237832200195836, 0.67380162082607087]])
        ref=eigenvalues(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_eigenvalues_Symbol_dim3(self):
        shape=(3, 3)
        x=Symbol('x', shape)
        y=eigenvalues(x)
        
        xx=numpy.array([[-0.65583331498545516, -0.17435184616020805, -0.90644759181987999], [-0.87436961254937673, -0.97100711278573026, 0.23318913589175772], [0.86308210733153401, 0.13835160459858065, 0.51947576162608233]])
        ref=eigenvalues(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_inverse_Symbol_dim1(self):
        shape=(1, 1)
        x=Symbol('x', shape)
        y=inverse(x)
        
        xx=numpy.array([[0.76324916232796469]])
        ref=inverse(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_inverse_Symbol_dim2(self):
        shape=(2, 2)
        x=Symbol('x', shape)
        y=inverse(x)
        
        xx=numpy.array([[0.53104006684518179, 0.92851144214279024], [-0.22257005986553069, 0.1011809153657055]])
        ref=inverse(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_inverse_Symbol_dim3(self):
        shape=(3, 3)
        x=Symbol('x', shape)
        y=inverse(x)
        
        xx=numpy.array([[-0.79414991140960067, 0.24454952679087527, 0.043242346936605447], [-0.58306023031036558, 0.75134648631069445, 0.62423783959883949], [-0.95484191502619109, 0.024246711986980696, 0.026868527226753036]])
        ref=inverse(xx)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")

    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_transpose_Symbol_rank0_offset0(self):
        shape=()
        x=Symbol('x', shape)
        y=transpose(x,0)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array(0.783766816869)
        ref=transpose(xx,0)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_transpose_Symbol_rank1_offset0(self):
        shape=(4,)
        x=Symbol('x', shape)
        y=transpose(x,0)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([0.78112091243977932, 0.052524091637526027, 0.3810831018572276, -0.1735507041244464])
        ref=transpose(xx,0)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_transpose_Symbol_rank1_offset1(self):
        shape=(1,)
        x=Symbol('x', shape)
        y=transpose(x,1)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([-0.24474437045166741])
        ref=transpose(xx,1)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_transpose_Symbol_rank2_offset0(self):
        shape=(2, 5)
        x=Symbol('x', shape)
        y=transpose(x,0)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[-0.56277672811866708, 0.9298454529201361, -0.22797452837158372, -0.030942868972557713, 0.73234257869948038], [-0.9312396454174372, 0.46998481588027352, 0.91517041255690335, 0.23275927361943149, 0.85575688817339413]])
        ref=transpose(xx,0)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_transpose_Symbol_rank2_offset1(self):
        shape=(6, 2)
        x=Symbol('x', shape)
        y=transpose(x,1)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[0.97732528827085408, -0.55270312608993888], [-0.054386611225741621, 0.28729636282604742], [-0.61322381930806324, -0.71023511524566008], [-0.96150245128654022, 0.1634889183047239], [-0.21597705459799754, -0.13721347859211552], [0.4747895467021781, 0.22672996220901664]])
        ref=transpose(xx,1)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_transpose_Symbol_rank2_offset2(self):
        shape=(3, 2)
        x=Symbol('x', shape)
        y=transpose(x,2)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[0.69766351290774087, 0.48488927041949936], [-0.15092833983813447, -0.64787040958647157], [-0.67435783121870663, 0.62887106998847941]])
        ref=transpose(xx,2)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_transpose_Symbol_rank3_offset0(self):
        shape=(1, 3, 3)
        x=Symbol('x', shape)
        y=transpose(x,0)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[0.68850252843519466, -0.84197443714372699, -0.68633303197153306], [0.57540988202551335, 0.78774645372836138, 0.39746856349766713], [0.7066612793229603, -0.78820366185511714, -0.10422811370935126]]])
        ref=transpose(xx,0)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_transpose_Symbol_rank3_offset1(self):
        shape=(6, 6, 3)
        x=Symbol('x', shape)
        y=transpose(x,1)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[-0.67196746378213312, -0.34710356553670829, -0.36022343205919194], [-0.40452357603741884, -0.17531248568128732, -0.70797707763303586], [-0.4477546186629664, 0.68306765350795362, 0.92164235538985317], [-0.2330611443110322, 0.76973133891415157, -0.54964395726305448], [0.74191716243732841, 0.96733094394390573, -0.10261064284188981], [-0.58417576859517162, -0.59067988173991348, -0.20855438030898776]], [[-0.051140822112997864, -0.8893661631575005, 0.3127834991529419], [-0.67557560123562022, 0.79175778091039684, -0.1557450831828826], [0.23673307885380956, -0.51144673580713973, -0.39718440085386408], [0.022904843837851407, 0.17818590036480253, 0.75553852386154063], [0.32657337223964689, 0.77586538849707765, 0.066274252159790104], [0.21569916012543877, -0.52546787893886693, -0.3433516090605333]], [[0.99613829319991098, 0.29972119351478499, 0.65369484718021731], [0.17679806833554035, 0.19278648560908196, 0.77317335998054681], [0.17500807283226649, 0.95084958004861186, -0.54412704861506911], [0.0086192732918886072, -0.9630632883849044, 0.25969985928830397], [0.22325825898747587, -0.71106367184670871, -0.5811220388238354], [0.51194176402087366, 0.99275326890983129, 0.24732405046028449]], [[0.2823055713116982, -0.24512970953589908, 0.36428498924055863], [0.86079361003109867, -0.44358773628728132, -0.99266837066020042], [0.40213999817589219, 0.097068086470225357, -0.25943055088222544], [-0.69982881589022727, 0.73244507843885831, 0.50530996105515524], [0.14056247509276298, -0.37737154900750891, -0.80720130107919141], [-0.26443615738587889, 0.86677683791888693, -0.37842068809223717]], [[-0.35332176257905901, -0.05131536020356342, 0.48459593533962475], [0.14787919562401841, -0.05877916313632503, 0.80763132577076435], [0.82838146823453607, -0.46328912456023508, -0.092534901405812997], [0.89498369602102512, 0.11677513818870389, 0.47190536716640286], [-0.47720759180588979, 0.99385389896396492, -0.50436114629684781], [-0.73304964564288744, 0.72455607703410529, 0.67839516726541893]], [[-0.042585807486037908, 0.33165529897599066, 0.45769753486337228], [-0.98524859626214734, 0.065469188331662709, 0.034205836408484958], [-0.7302925773969009, 0.73143308763092874, -0.21807398062448513], [0.73853460465309295, -0.0046677842081679355, -0.65411464050888224], [-0.3701991077317468, -0.060943959203267228, -0.26098034241509827], [-0.36047706346119823, 0.61751648380068414, -0.46341305673987687]]])
        ref=transpose(xx,1)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_transpose_Symbol_rank3_offset2(self):
        shape=(1, 4, 5)
        x=Symbol('x', shape)
        y=transpose(x,2)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[-0.11138292949003414, -0.9966219758762469, -0.75238200850397852, 0.012016326261288457, -0.38588046052873026], [0.054101063247043113, 0.71210065405392275, 0.20709961033750024, 0.73383699012440817, 0.85407429009540481], [0.17731026552124485, -0.80998430602427862, 0.60869746211919651, 0.363228948335099, 0.40384653824566152], [-0.88481911834783777, -0.042994677789591762, -0.12814472104819208, -0.13728556326062713, -0.72079607335026052]]])
        ref=transpose(xx,2)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_transpose_Symbol_rank3_offset3(self):
        shape=(4, 3, 6)
        x=Symbol('x', shape)
        y=transpose(x,3)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[-0.81150416559984895, 0.87825846253192408, -0.040020147528051497, 0.84209651706594468, -0.27162192431233767, -0.38168580447044231], [-0.61693126932666487, 0.50948383294622634, 0.91789222879033638, 0.8760696455206054, -0.8853356447460099, 0.65819077182524621], [0.14963441044398529, -0.64523200366881484, 0.61313468669699178, 0.51109308884597104, -0.48349254638542982, -0.42487949254346913]], [[-0.68673318206386291, -0.088957690368124176, 0.11049443079217158, -0.57572729094269781, -0.82998643436861852, 0.54091235012407957], [-0.32506196710658175, -0.51563786307266235, 0.48045176035619996, 0.1414304216357849, -0.049831142807863937, -0.60733847152749498], [0.91618519354208283, -0.3422097005082767, -0.82659561777366353, -0.24206709349115285, -0.34971253639249245, 0.75504455376065072]], [[0.91982833309149692, 0.62708719853490358, -0.077143954398477321, 0.19256296585745281, -0.97672412722813706, -0.91096837254744378], [-0.2380317254987272, 0.29551143700494853, 0.62061035064087489, 0.96335957364541924, 0.1464984318460214, 0.49360702989445815], [-0.99339001488487111, -0.63315316722206139, 0.40294338291604603, 0.90459826769939977, 0.31623731174997483, -0.37228371666092075]], [[0.83094847610604194, 0.49402223358032327, -0.68615722541011159, -0.70600173119068432, 0.08369756127118011, -0.55243304698664497], [0.14983573267202188, 0.4587839145231718, 0.31792049605198525, 0.27521620922078105, 0.089323068013183127, -0.80775514668170101], [0.16102581666628102, 0.19086215533842865, -0.59302624030477569, 0.96558651796050521, -0.94669845383882278, 0.13560362071487919]]])
        ref=transpose(xx,3)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_transpose_Symbol_rank4_offset0(self):
        shape=(4, 2, 1, 1)
        x=Symbol('x', shape)
        y=transpose(x,0)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.82315784319776375]], [[-0.31408535813617]]], [[[0.39154058327222718]], [[0.44340903830768141]]], [[[0.94608999914643088]], [[0.68438829417996372]]], [[[0.79041872119178258]], [[-0.24969098882172536]]]])
        ref=transpose(xx,0)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_transpose_Symbol_rank4_offset1(self):
        shape=(5, 4, 4, 6)
        x=Symbol('x', shape)
        y=transpose(x,1)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.72424452273898843, 0.44391390419374122, 0.35028960945238929, -0.56981267648707457, 0.67028481084125691, -0.079026742148440077], [-0.77118904260956445, -0.16119481499755417, 0.45845915191074349, -0.63646190650177914, -0.011358565470579007, -0.013563308304514354], [-0.92668577146362807, -0.3109775532958079, -0.3360524090494954, 0.15549356165562789, -0.80536343828959178, 0.15113275050454011], [-0.8545001434533166, -0.42848726822907857, -0.27950582197465779, -0.77752152992173551, -0.35084256024470273, -0.97465512758195638]], [[0.19929772173425064, -0.53943487461165196, -0.28432143465089155, -0.8894698482363701, -0.49855430129273692, 0.047369042207501044], [0.87796631589497487, 0.64773903915635156, 0.35696802246925707, -0.58646313886833412, -0.28114015146694249, 0.76837814359760959], [0.78932550913955013, 0.32287510176287948, -0.92126727757784677, 0.33317536398874714, -0.93715151400819852, 0.30905684957932689], [-0.96479943818917113, 0.14254496783429671, -0.25856464805810542, -0.74551783721430409, 0.057528975355305878, -0.54942333781089769]], [[0.72875926118908252, 0.55077400284431666, -0.5824343867284465, -0.71042189360674879, 0.83050157127514868, -0.23709957168626228], [0.75847271776983716, 0.53669516302022902, -0.25092602244044904, -0.84888199792852159, 0.46997252231657161, 0.61687699950288399], [0.62962994959363128, 0.75886136996122144, -0.74761017694883725, 0.87480584507831094, 0.56367787538930925, 0.5018899253738347], [0.52307792238254325, 0.70056387859810743, -0.85644982352933785, 0.70323641826204142, -0.91643357127492986, 0.9246099459248418]], [[0.036629919151081936, 0.43872192426754153, 0.82567999155556748, 0.98546987458021373, 0.12696204638891939, -0.80297393272789042], [0.9975473820640457, 0.73888517343193838, 0.3915750243423175, -0.3276328299097413, 0.89794724652867908, -0.080036006592007158], [0.17441437006696248, -0.067500414987598845, 0.83254356350717362, 0.66353952895985113, -0.32935259430288832, 0.38477789818624086], [0.39211155839150003, -0.32097429271062827, 0.78236012951024736, -0.25518391777551064, -0.81509522768390297, 0.4680146335067954]]], [[[0.12707064457233264, 0.070877316164788873, 0.99073807466005137, -0.66779162433771, -0.27322724952979471, -0.30717783974417512], [0.66004699847523884, 0.74265029817023542, 0.74615269664598594, -0.776640847842613, -0.15761289194205275, 0.83943576999065139], [-0.17471953744258517, -0.59070141553657685, -0.19307375224614787, 0.75556002165991476, -0.28758852661217804, -0.63872546746564995], [-0.21480568218825558, -0.93820401491702343, 0.77546365627373626, 0.68316340945678666, 0.32452849267271788, -0.85688578778114022]], [[-0.014149230163182924, 0.50956646515634874, 0.65568903957525704, -0.51906517082043235, -0.23980972099966857, -0.156685483776416], [-0.46471664341776808, -0.094765108161497524, -0.10006318841749473, 0.54171026966871327, 0.93092627590606902, -0.26694086307452269], [-0.87539121464803649, -0.15455762561678088, 0.0093256642808083878, -0.044835376513790326, -0.58713497854522245, -0.48184354585845512], [0.20191210598738052, 0.32849235859297621, 0.63697359954487554, 0.026066311848150558, -0.79169491789996926, 0.12024476441329535]], [[0.47234814197865971, 0.3132156246022586, -0.1273645216150352, 0.52723918718920837, 0.98999738397501558, 0.92703657049527277], [0.78524633680080402, -0.98742344810063321, -0.89485657822973508, -0.80492102641699126, 0.65494098211081697, -0.27866445539832663], [0.68956675480796825, -0.45469992567639195, -0.077259949640841485, 0.53538588499448125, -0.035603477340164336, -0.12573012778987946], [0.54601802461593185, -0.98816131220672343, -0.22599994143747248, -0.44219249678526151, -0.50344745275107594, 0.0031312410399992885]], [[-0.62551581367670472, -0.73024921725437997, -0.08386316319901832, -0.36309874680929677, 0.49067641958296426, -0.62011239951401054], [0.84275093682724278, -0.26771838779259616, -0.15298545590914681, 0.54874982593329769, -0.078088765501685087, 0.56058098162204262], [0.78977641499825957, 0.044329456446434934, 0.054529475157984786, -0.86690334749228692, 0.41779882596789641, 0.9676704157377507], [-0.74653365288068985, 0.17173224260646469, 0.35871610296198098, 0.21685196666057771, -0.73659383530484379, -0.13940908084605752]]], [[[-0.0039714305233160552, -0.16026111597046211, -0.37342036227548236, 0.65753380950639362, -0.19764551812665831, -0.59857428496210385], [0.4029660306163183, 0.84014391145308953, 0.21785889265308067, 0.97322218994022736, 0.23353989207941694, 0.67260452580306307], [-0.2097697371789633, -0.062501385453538338, -0.19689334718328344, -0.11681871516214226, 0.57393853437081455, -0.30331080594794768], [0.34119038093605747, -0.96548210893083231, -0.74608076483679731, 0.2629127354158971, 0.079263203097905244, -0.41915767783566071]], [[-0.8620719582970251, -0.10787934098732532, -0.0055136433726685752, 0.70303274337878907, 0.9896337138389264, 0.25553264343815552], [0.001584698655621164, -0.68123393760377038, 0.6486260613410233, -0.11109578495919159, 0.54948946123880882, 0.58291969423460488], [-0.29996033882252715, 0.42044712319807043, 0.18657543968076773, -0.88281168626708895, -0.029776072115871077, -0.31283940468280536], [-0.12410013101882522, -0.14998612231335251, 0.65421892464454867, 0.5315132107213274, 0.67733853882624429, 0.46324401253969416]], [[-0.89136724755029229, 0.075473113324051155, 0.98366862622568085, -0.066714586221633176, -0.20760649082542249, 0.54840522852305273], [-0.25582210645406267, 0.56282350782428003, -0.59031960895277402, 0.66672889875991426, -0.31362491470982978, -0.78459965973949441], [-0.42216142268957424, -0.83573738861147628, -0.057287373413045017, 0.18171341448258205, -0.9606009995792224, -0.30158319485202223], [0.0014221060933632401, -0.5031824472302755, 0.42074211901507197, -0.14671748897432302, -0.91547570772869324, 0.88505315475850566]], [[-0.66101451042409898, -0.41307559479472977, 0.031718519637306652, -0.1740072552516847, -0.93522784698291428, -0.79315196597362858], [0.90396029508815801, -0.73667707653774683, 0.94043681724393968, 0.87422495819732471, -0.034690362461643476, -0.91679881270843477], [0.87660962481009563, -0.88108978772851754, 0.25925441948026262, 0.62609537294458439, -0.033704667132616883, 0.62889227148521387], [0.80253615544507118, -0.58300290281277856, -0.25481297332654762, -0.77460387490954008, -0.99274658374125346, -0.93873201702912179]]], [[[0.33933718261260593, -0.36275612508137178, -0.84770009507358068, -0.67147839670025955, 0.92518120498568068, -0.90616412167409965], [0.97648806424134382, 0.23663072858705858, -0.080039844884343792, 0.082623984311969378, -0.0064853597115765993, -0.76889206822336198], [0.57076494711359049, -0.56655284817814988, -0.51654828814111386, 0.66919205307340501, 0.69695740645327886, -0.95898820023215614], [0.25630103744773902, 0.049256495470772377, 0.79732486370511624, 0.85080714082936804, -0.85328201662987668, 0.54689469366468346]], [[0.94816199194325734, -0.90776321870852716, 0.1376365331714271, -0.51432827196211717, 0.72638815302848436, -0.95478078438360203], [-0.59368754430631432, 0.033759150072538935, 0.48212880475957576, -0.74324929315912547, 0.20411373561259838, -0.30263665051866506], [0.85764019077792586, 0.30660213836749661, -0.32239648788237685, 0.45646048363415859, 0.61646400415878166, 0.88043092311930704], [0.85852806607460419, 0.41558944959772881, -0.74758771082845876, -0.0024937442704469071, 0.87116902676145402, 0.71683555476730021]], [[-0.081971106398546212, 0.035933716878532085, 0.12903272871772864, 0.80442872066041704, -0.93276859025476599, 0.077272737216844689], [0.86480582065300982, 0.5695880657177772, 0.14200316917476608, 0.27060649350636301, 0.65897237124961516, -0.039329962006085628], [-0.57059187233047526, -0.35843655283105691, -0.36909077523121803, 0.28557492277146879, -0.059972774775238769, 0.025462582930021238], [-0.99923178947369329, 0.36491002807567274, 0.92750999084135377, -0.59746782459070724, -0.43134536704115778, -0.73690232467510097]], [[0.03682944989024528, 0.78350499229479564, -0.51634598650075758, 0.18446899252763926, 0.13073115062492024, -0.45172611267405927], [-0.27246132009361745, -0.97193419110361789, -0.31243045318004214, -0.85089015073978658, 0.91870121045615583, -0.77181018605701657], [-0.55439630578865073, 0.5144826388992596, 0.6786208768756965, -0.68765810419471607, 0.26138854782723087, -0.77234305396007841], [0.17714287917396354, 0.78107914894563657, 0.10470140744993572, 0.44119299998885642, 0.011203058473587824, -0.46096764062905549]]], [[[0.21108622766968055, 0.30480013168978837, -0.61895006183631884, -0.91469526460667283, -0.038234081834005229, 0.77409763585333868], [0.89023480473953054, 0.1189667585319758, 0.32054624061187487, -0.75122575788649559, -0.49686642561235494, -0.72795508499142803], [0.74725179377974071, -0.43604774531068746, -0.90003824933445942, 0.50279885129769486, 0.57126892800732709, 0.38333597228666272], [-0.17843694606440663, -0.58261000189398082, 0.046327439751923549, -0.87108464636429828, 0.45277337902679093, 0.041632849725611987]], [[-0.50154242817771433, -0.44383599694129972, -0.093842083912457408, -0.58066435768225078, -0.99313307032759712, 0.35083752049895867], [0.5807691719249275, 0.90463539133773829, -0.38058606442086029, 0.71214110646860473, 0.71692227152521881, -0.41559418617472454], [-0.80522130262175318, 0.44637614963951311, 0.6080068196465509, -0.9203007203854483, 0.17739925021120873, 0.018967627755532623], [0.66228611450869224, 0.1715094136816897, 0.0027994837491627234, 0.50202338845253047, -0.6982201512758337, 0.78386763697243489]], [[0.31101514902861416, -0.65977665978251809, -0.81439675731270222, -0.26632299103032686, -0.94775704743759381, 0.88580893577329545], [-0.74841378688069526, 0.76410877846439695, 0.16261272364791246, 0.085007008733067879, -0.35025825777177477, -0.21933629401855703], [-0.091589541608356972, 0.39107340860582052, 0.061236070830427813, -0.86667270504668159, -0.20418823457104063, -0.57890711269266815], [0.12420370399811564, 0.04871829872115585, -0.84476402288817631, 0.066785824671447225, -0.74285246654502357, 0.5896335956176586]], [[-0.013118884314642809, 0.072792776177045493, -0.27351200061697134, 0.25262394757285356, 0.64308989818210938, 0.88844633476321766], [0.90253462074457724, 0.94076765861648193, -0.57831261386284005, 0.55969701784872461, 0.35559405465229998, 0.56179009193634322], [-0.65807463585566306, -0.70006381377269689, -0.2156524553182495, -0.58517171287627123, 0.0050506354138797338, -0.46013621105638025], [-0.068604045524115032, -0.84546705460158478, -0.038946943735732376, 0.97974129546374811, -0.47275782765803931, 0.36815682796229643]]]])
        ref=transpose(xx,1)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_transpose_Symbol_rank4_offset2(self):
        shape=(2, 1, 4, 1)
        x=Symbol('x', shape)
        y=transpose(x,2)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.11478578667798778], [-0.65686936873613444], [-0.65657042291056422], [-0.38700410130864027]]], [[[-0.83315225395662695], [-0.52622965283269441], [0.54531724467707487], [0.085057700555789539]]]])
        ref=transpose(xx,2)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_transpose_Symbol_rank4_offset3(self):
        shape=(6, 1, 1, 6)
        x=Symbol('x', shape)
        y=transpose(x,3)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.031079229055516633, 0.90100936451706515, 0.95100643641040161, -0.02355102092868, -0.67099424752533743, -0.30038575820344326]]], [[[0.28749064167525029, -0.26801169818044213, 0.99416058102606986, -0.54451693408359914, -0.22553918123720407, 0.76547496667275672]]], [[[0.35412475743814253, 0.23121440504332424, 0.18485775510715108, 0.073531749295211224, 0.22521718194232765, -0.39625675316765174]]], [[[-0.67650209677024642, -0.34039565011388784, 0.63744711938772558, -0.95144009169284893, 0.42603251665603059, -0.22916626649247251]]], [[[0.15569333726283863, 0.69370290129073808, 0.1538636564175877, 0.77459706908051995, 0.73489893302107334, 0.050512574220310302]]], [[[0.85600200935433013, -0.11678475230963747, -0.47384958630152774, -0.25914754746911917, -0.98178354141034196, -0.49730577478252358]]]])
        ref=transpose(xx,3)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_transpose_Symbol_rank4_offset4(self):
        shape=(2, 6, 6, 5)
        x=Symbol('x', shape)
        y=transpose(x,4)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[-0.24188450177776244, -0.020185522256929378, -0.30016031650202968, 0.32837268993505231, -0.08624878422856086], [-0.15307808974033676, -0.76412536974131662, 0.38299295143136014, -0.20407862007823052, -0.1290553532992702], [0.75716016991604085, -0.32013277291766906, 0.038184899250111926, 0.78791424035221125, 0.79143313504661639], [0.31258771342764446, 0.41133720736681001, -0.17012957636615567, 0.55681365935270444, 0.81320867959175147], [-0.19440983094497888, 0.26645929974416283, -0.97654800267102737, -0.51681467942254256, 0.12121986859607836], [-0.23045308915076856, 0.54055456629771581, 0.58787211991198229, 0.68571233886249572, 0.79859183202723982]], [[-0.85560283553775363, -0.22587910645544862, 0.48787643715982343, 0.26026819782485, -0.092775265201596957], [-0.051797383003088004, 0.3341066584631649, -0.38282495207806577, -0.34661228119146759, -0.75012178116886474], [-0.051761428961159428, 0.57413999840272179, 0.89610258768611173, -0.95985885102613611, -0.016829081897892673], [-0.87684312318785196, 0.31035754180119346, 0.78509308384754228, -0.55032637879219148, -0.20662814729995427], [0.40842717907766546, -0.94052523366407481, -0.73977164614894897, -0.6526620194497208, -0.45512312466430993], [0.54784573801684466, 0.67678072386795218, 0.30765620942875471, 0.050275062991830488, 0.15797543205170839]], [[-0.24794361612521776, 0.65749721541983663, 0.96795724300038821, -0.10561666434330319, -0.52924733353364473], [0.82929709453214651, 0.84436366983167233, -0.14416462186968193, 0.49414914387327591, 0.50636092359160156], [0.99378883610309887, -0.66152632976570502, 0.83226446163446988, 0.65343324178223217, 0.4864391353368398], [-0.39779647271545415, -0.19490488264065853, -0.24707764041799951, -0.60933897339368537, 0.35859876067544683], [0.10794652655235093, 0.45434488175440491, -0.35329103219684366, -0.046797665508206743, -0.78266209882792093], [0.69823712094542345, 0.84479222409530585, -0.9587386357676948, -0.16853013828725905, 0.99592307428079474]], [[-0.72664525222205167, 0.37556000173489568, -0.71882371176672133, 0.3580597017621312, 0.038656224121606853], [-0.12704882572552978, 0.12198450986202825, 0.53388585732438099, 0.24174199935766594, -0.49335302971847228], [0.98890568393048395, -0.3132237349045186, -0.98618115343395951, -0.59543379772644589, 0.6921918413949415], [0.90136580398848287, -0.74907900763456858, -0.94264708490541316, -0.45327593900512242, 0.84214027550186987], [-0.92197591601632833, -0.58522403078777185, -0.92924469265424325, -0.17276128453693573, 0.64976919087345664], [0.14570729980168617, 0.75579029703596334, -0.33547311512690947, 0.78350366197206522, 0.48935768103757127]], [[-0.88268121695630475, -0.036887253415718746, 0.1275741922278486, -0.78857638724865042, -0.3288477563835992], [0.17596345296235127, -0.46768368242654024, -0.84400314296378531, 0.69326959413703815, 0.16262355450938171], [0.30330817929907394, -0.50909899923072088, -0.44568436845843729, 0.033575152676255549, 0.081040238589082936], [0.25548987300008208, 0.42296992412763412, 0.59723225987526307, -0.34638425220735858, 0.13814830825816715], [-0.97270623361507313, 0.30261426268067604, 0.018988683780432947, -0.88963204151557718, 0.13988345499517951], [0.25316789897995839, -0.87151098446072117, -0.31791958536944298, 0.080705367991605437, -0.74969987409171757]], [[-0.11403050234970968, 0.65837830370966977, 0.99736120495715097, -0.26285009052262409, 0.21797113130264778], [-0.68748008688707496, 0.70155423389876237, -0.58050002795057565, -0.0013404057733037433, -0.53828510447392408], [0.69632176012375191, 0.15219540391310415, 0.47619649009863996, 0.77535014245476708, -0.32938958605230106], [0.10700315702844154, 0.44364249120430821, -0.77991005450985118, 0.48500952268291719, -0.37336856488757308], [0.56205028169120719, -0.85469183712520702, -0.43443708283047622, 0.98163962824575668, -0.94300275327347149], [-0.26392284799183874, -0.45745653037562861, 0.34628131948303298, -0.74374349070572965, -0.34946186742375107]]], [[[0.9571195901835019, -0.91026045829494273, -0.67083301791997996, 0.98497041375780992, -0.63297482984894371], [0.97303862317799084, -0.35039486631452021, -0.032846232041207291, 0.16159740048415849, 0.6727090857257505], [0.51171070184166556, -0.63190922649943593, -0.31742180881444182, 0.55871402608368848, -0.8014484503710273], [0.38290638330091431, -0.18243287459797952, -0.23151588464578055, 0.77323319822474001, -0.61245980851983206], [0.76225826792629592, 0.86481207731320642, -0.67183003872231906, -0.69203540886825321, 0.22917819364175429], [-0.87557903243077084, 0.94897068960751296, -0.19163855679151331, -0.69420579771429014, -0.20276746215742936]], [[-0.39504603044667896, -0.49059423497612831, -0.56830715712076429, 0.03901497410951893, -0.34734328536122971], [0.96998130271928695, -0.41557087673653914, 0.6856169241893213, 0.71352681679253904, -0.27025338280713562], [0.0073739226635316513, -0.7802832487717668, -0.22497564440402829, 0.1882744310325386, -0.38076989449605247], [0.3127012924331587, 0.92402907870229578, -0.94632801705502612, -0.32177340473246097, 0.87250726629943243], [0.0064359012513139913, -0.37950075218384804, -0.1429303403818396, 0.47723359607263194, 0.73385095777664899], [0.75766833448175785, 0.55905481854114614, 0.74984355781886824, -0.10749943328693745, 0.45204757051416022]], [[0.94459021106867613, -0.40340751896148563, -0.78293876255265116, -0.73654984831806969, -0.57741056745099595], [-0.61622921775255102, -0.20076144087754466, -0.3368666748453355, -0.67321037709039699, 0.063834870949827316], [-0.43176840705492658, 0.75780901485787622, -0.87364903594643106, 0.15214953668907083, -0.23014856054740185], [-0.64854683604775798, -0.60058782538030342, 0.95168120522867694, -0.2014455561075974, 0.18857294715539763], [0.63876799127243955, 0.31969974712331939, 0.54691197536497271, 0.42717913441990141, -0.88577844765349933], [-0.29947126123025081, -0.12602505803396502, 0.98342271633452549, 0.79188335229865747, 0.41712959085990398]], [[0.22122554779798698, 0.90609440339739744, 0.81525094870423875, 0.46470777695031518, 0.012472589983900884], [-0.95289510787271037, 0.29232844297927474, 0.39905051037132555, 0.18518666710327913, 0.77733105970240612], [-0.27182344993666274, -0.64443409443231991, -0.98754937400031495, -0.069399132924954365, 0.19736244907334566], [-0.8964090846882955, -0.74948319355773263, 0.11837968938895527, 0.89456797673348398, 0.1680086366421385], [0.22242609048867323, 0.9064874559981646, 0.95278454984795702, -0.94906470262902842, 0.017272591660281167], [-0.60812214296041889, -0.58593174102804069, 0.35786419009408243, 0.23854111377274489, 0.54367253938600202]], [[-0.083347232137542804, -0.17735390510081173, 0.11813730815583456, -0.59877455579046734, -0.41355386284102358], [0.77926746064643981, -0.077112860068911271, -0.92028817328518353, -0.50871776720220052, -0.74222526156684565], [-0.1823923043702218, 0.86042368734385177, 0.017222419436303982, 0.4962830067635553, 0.22937651890662858], [0.62967128553800644, -0.077564843343165268, 0.066130118941811089, 0.1793735395473568, -0.0053387294906399596], [0.94638047171993667, 0.94763344212029432, 0.0085356067276047831, -0.12529571726208011, -0.71447375894237908], [-0.8619085220520688, -0.7425377672663489, -0.15940228126185096, -0.11626378641074675, 0.58390272110630836]], [[0.28430842258309452, 0.36269762605901157, -0.55159361924508388, -0.31627811031803832, -0.20990720054000067], [0.33907794349651987, 0.72863602526211357, -0.19986270567849473, 0.91828753234883664, 0.12569750704901206], [0.96682812841065147, -0.023035746522797051, 0.055569444429119486, 0.070180329974148137, -0.46738769212997955], [-0.34266849973958435, 0.23740143441357242, -0.52934731202216745, 0.51234169411795061, 0.20703374100901462], [-0.32174846220152387, -0.98037999146599364, 0.2814513145413573, 0.43511615428800265, 0.10948216551610845], [-0.70891848510245548, -0.90130608667326029, 0.80422057186471085, -0.64416031390690676, 0.52476024053073211]]]])
        ref=transpose(xx,4)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")

    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_trace_Symbol_rank2_offset0(self):
        shape=(3, 3)
        x=Symbol('x', shape)
        y=trace(x,0)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[0.32756559784778516, 0.74310752279453718, 0.81532996596372298], [-0.60198320456400611, -0.76270603777797019, 0.19314840124534216], [-0.072327449483367001, -0.43056286340090022, -0.27508208333258155]])
        ref=trace(xx,0)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_trace_Symbol_rank3_offset0(self):
        shape=(5, 5, 4)
        x=Symbol('x', shape)
        y=trace(x,0)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[0.030922703383644778, -0.3443233612426897, -0.75455361767435258, 0.87982911224093496], [0.64581941692214451, 0.43012340750918643, 0.84888986297232538, 0.18299590423790568], [0.28586872910043493, 0.3070405511364267, -0.0061073390949517581, -0.95267181038333137], [-0.64558766647819477, -0.93380762557558294, 0.22899145189439296, 0.88646493372891277], [0.35048995604804367, 0.48425806837556595, 0.70986982485325867, -0.0063517855045662763]], [[0.1663552983985197, -0.80320180751371684, -0.44232084555448714, 0.86980162766007618], [-0.71360516027659093, 0.013196020309956147, 0.48871981688421218, -0.39225072711506992], [0.18283389252161819, 0.040869721962815353, 0.45450598031290146, -0.18816515784454069], [-0.45032904725185774, -0.31303166002995941, 0.20614960481953837, -0.35044166107647157], [0.55452663525861712, 0.17991416537679528, -0.39108595210792774, -0.25877895399204132]], [[0.066824050124954404, -0.095359233529428877, -0.83137614264574689, 0.90699984565169611], [-0.073058052370406967, 0.16237158368935867, 0.68839151579209412, -0.11859557184437519], [-0.79009920222209851, 0.12181017550653839, 0.94715399036036718, -0.24167456434054158], [-0.31571276125700765, 0.59727598982846741, -0.66734236798065005, 0.1684254476668352], [0.92258329188512955, 0.5141147300751352, -0.28691491903646971, -0.67648496372715794]], [[-0.8968293895112589, 0.58320958556792202, -0.96513230258513216, -0.63036098252560291], [-0.76126983724165331, -0.95716400001295177, 0.77230961022095101, -0.51964019537536266], [-0.33832584922131259, 0.28809255098490172, -0.96145066439380966, 0.074513493325629288], [0.44367568874122476, -0.30435534034924627, -0.83894217203593757, 0.79250618479239265], [-0.26993144408525627, -0.3751890602449941, 0.51492507734304627, -0.93685806002281513]], [[-0.001577644490730945, 0.99749094625379908, -0.60838988442759212, 0.091052160305566732], [0.58097411210294592, -0.31418019538081432, -0.3940247114900588, 0.67908643748788533], [-0.42379190700235059, -0.27488344660484976, -0.43823710611394984, 0.8922143647212637], [-0.71959252502299109, 0.98466398123991805, -0.010960386612254069, -0.079764069970991169], [-0.40788732458681332, 0.29714293105800471, -0.037972038299979305, 0.56164151089507941]]])
        ref=trace(xx,0)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_trace_Symbol_rank3_offset1(self):
        shape=(2, 3, 3)
        x=Symbol('x', shape)
        y=trace(x,1)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[-0.25197693123253018, -0.77435612069993587, -0.20760741398733873], [-0.010420803780166077, 0.5615769141137037, 0.17474474357853786], [-0.67155771660488695, -0.94266684798225464, 0.085772654945666327]], [[0.021642310416709165, 0.58881637291325561, -0.8058693419201568], [-0.12935792438776605, 0.048900379028203211, 0.36849928613416161], [-0.66562754383369538, -0.0024003744851901487, -0.93335621744210351]]])
        ref=trace(xx,1)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_trace_Symbol_rank4_offset0(self):
        shape=(3, 3, 5, 3)
        x=Symbol('x', shape)
        y=trace(x,0)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[-0.83906997534199435, -0.065224470164882087, -0.60003584973711388], [-0.096583638736701616, 0.72299219659499525, -0.88172583208008182], [-0.025755168226349046, 0.77866379184253232, -0.58530749717486286], [0.93494152654989549, 0.70593832753144525, 0.55269690113331649], [0.65066974294275082, 0.74137970402126552, -0.61707462814369651]], [[-0.016143454382967493, 0.79328222507217472, 0.55336043356958253], [0.69974144070762234, -0.041858590623100822, -0.94072147137866935], [0.035951372592101016, 0.69692911810720615, 0.6150258261182866], [0.056434515714816502, 0.61030605113509528, 0.074459383195740525], [-0.75036145156707756, 0.43402293175972906, -0.31187773305057509]], [[-0.024839914610529812, -0.68596422922759182, -0.3169314435894226], [-0.63766580625587821, 0.85862495396122829, -0.13884264268107049], [-0.42777438922006406, -0.0048238426285125424, -0.99713646965866332], [0.71498437726532238, -0.32446795804663453, 0.53791348728846722], [-0.57141522927720101, 0.70690380314061452, 0.30536168065470237]]], [[[-0.86513003434046754, 0.66913513617958009, -0.72352725992045275], [0.7839916006731289, -0.67297272544967135, -0.17699554495437164], [0.54306830803292461, 0.34379180691401512, -0.72199511720450493], [0.048182463124081032, -0.12820083809663863, 0.078006295574482465], [0.0096755410734967739, -0.33414622234488034, -0.17809610883407889]], [[0.47064000207484002, -0.81704090599245727, 0.17648686611286202], [0.5277751410068563, -0.73618390860715022, 0.18818223236985077], [-0.92810015821222747, -0.37089075014483419, 0.091641928389350147], [0.28037401581033272, -0.19199496594746313, 0.35441778146221381], [-0.66107160686531508, -0.42477829445043391, -0.12569292675607646]], [[-0.1093266742435266, -0.34150173207854917, 0.85629423229798673], [-0.90882829262568099, 0.19856676927901451, -0.20172487663330796], [0.086473617365266486, -0.64762916517421698, -0.84213204918167683], [0.8240362047899894, 0.6623700758704465, 0.88788034182450226], [-0.27264542667370772, 0.68576346491384332, -0.26394093572133071]]], [[[-0.92748824368653082, -0.64913767787566523, -0.50891370519027546], [-0.98124808089928073, -0.56070692463190674, -0.66050516990428121], [0.68350685291420432, 0.78620290146787086, 0.90115239831569793], [0.099368765731119524, 0.083028955443718244, 0.7632118862790036], [0.88820131476063224, -0.70395939865970503, -0.13142907363012513]], [[-0.59822761453862272, 0.82705007328897895, 0.71322896635706612], [-0.43192461772269697, 0.03718068844525857, 0.10567290633986381], [0.85332195701730074, -0.8593678231279025, 0.94715519619048805], [0.41910030390690056, -0.93436909912356603, -0.70196746000270616], [0.99454679470750862, 0.66879325469125828, 0.22622080126213517]], [[0.33287399900809422, -0.82666851200520641, -0.62584733610552545], [-0.57403952454308738, 0.8627786590088955, -0.49659999718428405], [0.12699273446626247, 0.41476438055613829, -0.2286142323798066], [0.80873813351915924, 0.67071051208320709, -0.50086849923436061], [-0.42101451137979429, -0.72646146200042749, -0.042679945773102856]]]])
        ref=trace(xx,0)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_trace_Symbol_rank4_offset1(self):
        shape=(2, 3, 3, 6)
        x=Symbol('x', shape)
        y=trace(x,1)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.31945285041564397, 0.51965936311175454, 0.45045344252892239, -0.42539673723252136, -0.71050530100775133, 0.60194891873933654], [0.31692533586401139, -0.096395626693496661, 0.73793750285735005, -0.65291505915451564, 0.78561841433764701, -0.45517007029282897], [0.43581974810210156, 0.15193088821969725, -0.77183994291232283, 0.72898456886853036, -0.42602440408160613, -0.70661918576622607]], [[-0.24159142917326881, -0.27856148587204332, 0.14706899849808752, -0.94403130288578185, 0.38820480340554142, -0.98978310105325562], [0.72104978780480056, -0.57147950155115113, -0.42622116343501748, -0.21483587976506135, 0.75897113406701289, -0.28358393489654121], [0.85412365119613165, -0.72418623814849359, 0.49115552796836859, -0.23987516941030518, 0.10785143953352727, 0.19397457898627657]], [[0.95859660010912329, 0.15118078332154861, 0.73268717103858094, -0.30030431905216637, -0.70059290480335323, 0.46805253385054124], [0.55816947959781116, -0.10758837287786593, 0.66618604919616309, 0.47945722415075509, -0.95062835523236999, -0.67715245301458293], [0.44097455178515754, 0.35536713203308268, -0.66456204699742627, -0.77323681832243873, 0.6449655757061552, -0.86231160799818296]]], [[[0.040324649415151015, 0.66753827895853579, -0.72346677941233128, -0.97958765162891481, 0.30052560970615438, -0.49505759676094918], [-0.14781409811988588, -0.27220165196209711, -0.1945476395232324, -0.080533441018540097, 0.84603587502403022, -0.43085895791812057], [0.12888693943344309, 0.088643719051592074, -0.58116665669417245, 0.76441599833529561, 0.15980194058848007, 0.10974199013792529]], [[-0.28149621137644898, -0.59224615523307778, 0.10423963572924699, 0.1952946800608395, 0.617764303820445, -0.36197469447716646], [0.10157462466301803, -0.89194765234667361, -0.19009152454274347, -0.042612602864625204, -0.92546571596072202, -0.017751743158792799], [0.48932299403771129, -0.51606065749341168, -0.074124412479717794, -0.21292461574087396, 0.23358594568569657, 0.42297031809745911]], [[-0.31571903560591097, -0.6671208549195109, -0.26596025284732594, -0.46113489220922266, 0.021583736492196914, 0.62482913875574342], [0.92816061925365179, 0.69846015228554914, 0.81185730623103769, 0.41641459337983799, 0.47794304082284911, 0.9798640481883234], [0.69406680101909468, 0.28099669100284697, -0.36058351134604427, -0.41199943737180011, 0.95940899293337001, 0.90750591138561787]]]])
        ref=trace(xx,1)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_trace_Symbol_rank4_offset2(self):
        shape=(6, 4, 3, 3)
        x=Symbol('x', shape)
        y=trace(x,2)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.98305042412138222, -0.036842472139186677, 0.21411792905051352], [0.9824717084600707, 0.59544665816766695, 0.7945931106856956], [0.21010792600843065, -0.81402161206024148, -0.041643971890634512]], [[-0.52907948071455024, 0.61917747825492353, -0.78985507828665247], [-0.84520092507773503, 0.43203861773057017, -0.57640569827024857], [-0.78450747434942114, -0.33854074908313359, -0.94557304740184578]], [[0.87109524304689234, 0.93693942710578448, 0.12099229973474102], [-0.59803156848379668, 0.37841991932647279, -0.61587974701799997], [0.15940458583749528, 0.62561460899821908, -0.055233472094635472]], [[0.029386484228094201, -0.32109561783599183, -0.27597587181665273], [-0.900657172461514, 0.99671044544470488, 0.70513666116017237], [-0.98436445255016158, -0.6646591961818471, 0.81899421862757404]]], [[[-0.75353801541710408, -0.4844969746507648, -0.60779253145912082], [-0.22260975132489258, -0.72550203151478265, 0.82432528676744976], [0.36186842836242294, 0.6288466002139681, 0.29912146643258031]], [[0.34287946260876745, -0.96393365203713977, 0.82874109661960604], [0.37648410661020693, 0.68677516589398979, -0.63944982124889793], [0.088936729665060055, 0.23451034722387765, -0.12265142110905081]], [[0.22438913453544207, -0.86235216728923625, 0.42518095985105742], [-0.0057996159483999499, 0.17279591428428764, -0.89314146884061363], [-0.64659071962010817, -0.9620486023106114, 0.18236354830163459]], [[0.70827276782847082, -0.64949227504852414, 0.90449716754632958], [0.39250499295630714, 0.85495105604645638, 0.23199269798993538], [-0.70758393714806056, 0.82949591433851499, 0.19142497272411951]]], [[[-0.72742189907432531, 0.19054896420595657, -0.99846028575082668], [0.69236615347076214, -0.26850684615265696, 0.99642105555881311], [-0.61159113962912026, -0.0010060673835490253, -0.12293552117293705]], [[0.11422273894067647, 0.66181925449772794, 0.049969313090909795], [0.014045983578708787, 0.25966950739978367, 0.33250897797804813], [-0.037485300265705845, 0.0032643611075411361, -0.72385175653538081]], [[-0.0085272589489473472, -0.091792665957439734, 0.13365663576802866], [0.47304356097807765, 0.53855602115799228, -0.95903528834203255], [-0.13242427641640986, -0.84228532486084484, 0.045152429530008975]], [[0.94913694432499662, -0.054405243536918668, -0.35315049541198285], [0.1230371072222487, 0.087855818368372418, 0.84445539326056562], [0.28372825891656372, 0.59313567136600676, 0.36893363041941596]]], [[[-0.35816208534985461, -0.99197215517744985, -0.29818815612648142], [-0.056252809805036552, 0.15202002205958065, -0.23909348794187513], [-0.43651255141455847, 0.96730218374677612, 0.38036444564133842]], [[-0.47843489879143974, 0.34666997198601801, -0.93482049458849392], [0.0090423067274332247, 0.26336489996468759, 0.9084512950301793], [-0.91541175783339157, -0.32154234805168125, 0.2161637859166492]], [[-0.31221318697860245, -0.41525469271531668, -0.30297623580764288], [-0.95894357940997432, -0.30343313787034698, 0.13846518764532312], [0.65942679772404778, 0.61654525284249573, -0.16196681112024369]], [[-0.10801907193802518, 0.13943638630385236, 0.5569193941242947], [-0.033086610339237765, 0.31320692376771397, -0.64881863504146642], [-0.54144841066778793, -0.13382833440969488, 0.84579855626382705]]], [[[-0.56410563230748267, 0.78450547341369181, -0.71149742705507291], [0.27405382527016453, -0.10296459369324906, 0.29588472319315695], [-0.20343841258423367, 0.30064806958487744, 0.8667495722384968]], [[0.046594149144233432, -0.81043380740304327, 0.85409578351661564], [0.051155112370231404, -0.94074316813100811, -0.44848604282051019], [0.38403570149808819, 0.20878956456622366, -0.33091986722714917]], [[0.49999376465570067, 0.34916275252824347, -0.87557977159285105], [0.73493179934426234, 0.033838352797257221, 0.056981370252029873], [0.2127555878843459, -0.1447240590187906, -0.5014394065038783]], [[-0.017018741273441051, 0.73225607665268178, 0.42525460662554226], [0.43489644051443599, -0.91158862001569418, -0.32183161773893132], [0.85595093680427281, 0.30475043041571026, 0.48070288067212563]]], [[[-0.38254766533673812, 0.2235940242840857, 0.8074948288364916], [-0.95706744154356138, 0.56477657497496203, 0.28456728586213287], [-0.27846248623021475, -0.74638639277917762, 0.44910974387764746]], [[-0.85235553334961067, -0.68290026776848611, -0.80398309040797034], [0.043652592125658529, -0.32158945812976469, 0.65305722905769037], [-0.67128656499519956, 0.92476445177995337, 0.85383064431105238]], [[-0.54560334446041803, -0.27597773138904835, 0.18317273329482675], [-0.55504603414938836, 0.58056001729567197, -0.5816256098620376], [0.87034872823592613, -0.024817123583893652, -0.036174529851967341]], [[-0.47756647696617716, -0.096616446848009963, 0.69292352709980154], [0.41310299561282982, 0.83487076729819032, -0.94885113495052753], [0.24633414370942663, -0.85861844670670173, 0.061599745561401908]]]])
        ref=trace(xx,2)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")

    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_swap_axes_Symbol_rank2_axes01(self):
        shape=(2, 4)
        x=Symbol('x', shape)
        y=swap_axes(x,0,1)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[0.9209253484509683, 0.89609261307073029, 0.53337710112116832, -0.55117286745601879], [0.48518410365355891, 0.83428060745353427, -0.23839302347725733, -0.29728794004076331]])
        ref=swap_axes(xx,0,1)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_swap_axes_Symbol_rank3_axes01(self):
        shape=(4, 1, 3)
        x=Symbol('x', shape)
        y=swap_axes(x,0,1)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[0.25818737877723863, 0.92403845097356929, -0.49976046931292939]], [[-0.84966714008798272, 0.19107704051611529, -0.058364979877173928]], [[0.71842230089762871, -0.61164986603173865, -0.030793548408475813]], [[-0.13997844340902033, 0.28019211972228719, 0.83907141436660249]]])
        ref=swap_axes(xx,0,1)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_swap_axes_Symbol_rank3_axes02(self):
        shape=(6, 2, 1)
        x=Symbol('x', shape)
        y=swap_axes(x,0,2)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[0.037942303884782147], [0.54848506357865001]], [[0.29468221333315125], [-0.4699424088656281]], [[0.81131954585480792], [0.85686363114663266]], [[-0.094482240266518636], [0.68499498914111845]], [[-0.80627838311672728], [0.41802904802064567]], [[0.14431077308833418], [-0.57782286798520555]]])
        ref=swap_axes(xx,0,2)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_swap_axes_Symbol_rank3_axes12(self):
        shape=(5, 6, 1)
        x=Symbol('x', shape)
        y=swap_axes(x,1,2)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[0.38094499847271557], [0.95436859968594723], [-0.11817210189228344], [0.028931688531394828], [0.09206328096944949], [-0.62794736241284443]], [[-0.90431912923729851], [-0.06236550240103611], [0.88191933141804757], [-0.096446164799557366], [0.34131501950267196], [0.17417410787579102]], [[0.20872908433802784], [0.11250474685929857], [0.79407800154099872], [-0.5085970381524676], [0.64335804618478032], [0.29006161738794844]], [[-0.8919438571977325], [-0.96332896309607352], [0.17594047591175221], [0.82690373765563274], [-0.89674602977206752], [0.43713545483286675]], [[0.7784120733305826], [-0.60979630722919387], [-0.29163020813283635], [0.34321858240263436], [-0.25632487066285337], [0.45965847528208781]]])
        ref=swap_axes(xx,1,2)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_swap_axes_Symbol_rank4_axes01(self):
        shape=(6, 3, 3, 1)
        x=Symbol('x', shape)
        y=swap_axes(x,0,1)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.10818338739689937], [0.13500597176224205], [0.89756164029803198]], [[0.5454249317296409], [-0.28076228851100149], [-0.91132226396572835]], [[0.97761141412746944], [0.30300997737654201], [-0.61094744480041063]]], [[[0.79329570798490678], [0.37389766864950058], [0.80529979188341128]], [[0.31786961496009458], [-0.49207596030980083], [0.80562629178646583]], [[-0.36912836108700753], [-0.54095378688868889], [-0.4468014311504811]]], [[[0.016940851764116749], [0.94864895018291295], [-0.56674028817469524]], [[0.61978906925748811], [0.46041335000223782], [-0.24435680129878357]], [[0.56808009922250813], [0.55483775627393506], [-0.82263720844794497]]], [[[-0.37277133452884859], [0.22189238933143618], [0.66822756157343788]], [[-0.4261246432887309], [-0.69393329922812574], [-0.079937948130046177]], [[0.40931705576524102], [0.71266374728059345], [0.59621552392437915]]], [[[-0.20675658088499338], [-0.22456593561021232], [-0.95302152772759152]], [[0.21823122584269239], [0.15972307211673487], [0.53690574939342794]], [[0.9544128276635242], [-0.49909348205429382], [-0.050575550863879659]]], [[[-0.30857024641538433], [-0.8395897486686783], [0.40675501798052371]], [[-0.534406663210657], [-0.42577205405376839], [0.33817510600543166]], [[0.042762076798115611], [-0.94621276371280216], [0.7983567742968527]]]])
        ref=swap_axes(xx,0,1)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_swap_axes_Symbol_rank4_axes02(self):
        shape=(5, 1, 5, 6)
        x=Symbol('x', shape)
        y=swap_axes(x,0,2)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.68785520524653543, -0.070411075522871513, -0.32176642958577562, 0.11670324855057612, 0.23587159472483776, 0.17463506689285158], [-0.075637171215478638, -0.14698385141961934, 0.70972564640100955, -0.71007530291056886, 0.23352061767906429, -0.71714409407105073], [-0.29186430225072413, -0.59061685765299599, 0.47231993808921535, 0.093352350686652485, 0.62552823584286177, -0.27858554150140513], [-0.049054144465585647, -0.84606629461334659, -0.42546643528470995, 0.55314736584725943, 0.43232161053808116, 0.012473521955916889], [-0.23344577777609321, -0.1819836177179639, 0.692479836303171, 0.5774960737450936, 0.52257674900401718, 0.84202334929618061]]], [[[-0.58786364630383292, -0.88157439319467135, 0.62125046725146582, 0.73681875756241411, 0.78260879596294219, 0.12997264203949133], [0.28957933360550325, -0.69884873656732682, 0.48340629537665647, 0.37476720771215644, -0.93068526232136661, 0.99984923059010877], [-0.50112856751133172, 0.5542678476997942, 0.52095435899104481, -0.96276814105310238, -0.072941187169336175, -0.54345075755235839], [0.40785539522032499, -0.3150602861404519, 0.87554359745582433, 0.29586125675829322, -0.86043818777490988, -0.37650553897168804], [-0.62109638048277249, -0.63083877345665607, 0.67533023849252327, -0.67433479950698816, -0.75926555524275874, 0.81108294317305196]]], [[[0.74315571378528089, 0.75372827265485398, -0.92631697157743176, -0.21415965528996095, -0.32444155620333648, 0.74090732165224216], [-0.63209341633997518, 0.9234199133133052, -0.56076778067183541, -0.90368519789604695, 0.013917642804893049, -0.69416396264082181], [0.69256058497296613, 0.24496358210574365, -0.10547003576852609, 0.57142870632648757, 0.94045151609009325, -0.91990657832493783], [-0.57681797847165028, -0.066315673111125628, 0.91933549014034499, -0.66013459125550589, 0.59562782006886916, 0.59776951034920733], [0.59638407472344412, -0.53284442708651092, 0.3907557421062835, 0.061134639996943685, 0.63651201379664246, -0.47395877428717292]]], [[[-0.64836158777207076, 0.25733454782289322, 0.16841380005738937, 0.30930484446529594, -0.90387541311536079, -0.13116215696850819], [0.66879432010858797, 0.5198605090256021, -0.029257566596547324, -0.62845990152522879, -0.41987311367557889, 0.49133079575521932], [-0.60265438823128692, 0.57650601998836559, -0.76111250784466522, -0.3569568865365178, -0.80118182409600136, 0.21878600838176321], [-0.17701028132353702, 0.9824878793463554, 0.53030502018766712, 0.37627214651407659, -0.5806233508450398, -0.89785432541444754], [-0.54235873074135754, -0.94786060332543443, 0.52897811361639424, -0.70492938629438129, -0.16869214583993086, -0.95063712883575491]]], [[[-0.40094660179938013, -0.73296594719552743, -0.97806470006788793, -0.39353520150348409, 0.97585148011404566, 0.33636687955497213], [-0.1966472189332551, 0.16664049351813115, 0.40797999783544125, -0.89034075374453581, 0.96769474121061982, 0.6085382118474012], [0.21570587453544454, 0.011428887597838333, -0.38685916497758788, 0.60268941752359595, -0.88565706806393885, 0.60709276083454888], [-0.36208161460970145, -0.7348854735890713, 0.31492210640095597, -0.81274505481999793, -0.036915174685380414, 0.71890001317249563], [-0.60680748471625212, 0.16517167977367087, -0.40164719898262802, 0.108738260298475, 0.88813402528543484, 0.020471023972875368]]]])
        ref=swap_axes(xx,0,2)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_swap_axes_Symbol_rank4_axes03(self):
        shape=(5, 3, 3, 6)
        x=Symbol('x', shape)
        y=swap_axes(x,0,3)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.4212844631827799, -0.84682766954388655, 0.76060723376957151, 0.82363554957146734, -0.15787351163938168, 0.92496453737788342], [-0.27901840421474655, -0.067277068250086502, 0.79170992887149039, 0.71150812754633863, -0.068029989014853465, 0.35361285059451331], [0.84940496389436015, -0.83947234409702887, 0.098915466342164526, 0.85571661907072394, 0.71208430504865117, 0.52387810986886207]], [[-0.48979947613317831, -0.63541549651613316, 0.49398906608296045, 0.25774002564566478, -0.55356297858131365, -0.51011550211785428], [0.55000230374696213, 0.24460407530304784, -0.0088738478652641284, -0.8936130924321366, 0.47122569976430162, 0.17117050287680313], [-0.042114986245814778, 0.56872056744937982, -0.88735035516429117, 0.2432822939279824, -0.22766370161585003, 0.18822930155226603]], [[0.66412211940664778, 0.028748605397407534, -0.033559402845615649, -0.19898658213011711, -0.5805450420028464, -0.39949500220338119], [0.65429860692226649, -0.22316690829000252, -0.26191936110912706, -0.6429961558388031, 0.66290617486046588, 0.6818549064932069], [-0.63102404284186009, -0.83641806257441642, -0.20353204507737188, -0.32106134497032746, 0.33173208794181552, -0.20363198606595589]]], [[[-0.54046531588947655, -0.55271256999294582, -0.3290614247682373, 0.36802203018383728, -0.9370567661458642, -0.59263047156834747], [0.70606386902163454, -0.23441225444357761, -0.49441949777001803, 0.78717769772527846, -0.73919322115604058, -0.98036777195344604], [-0.36780168474029851, -0.47866064432601729, -0.5742330209493427, 0.99930983291422448, -0.77634403712678579, -0.48520054029977855]], [[0.06280607779997549, -0.35715903505726732, -0.11871103676152628, 0.18588200508098685, 0.91212265485151445, 0.27394399201814124], [0.28734143380707367, 0.79251920717420821, -0.60169886611382983, 0.056493159800269366, -0.66907546644256333, 0.8935580241190233], [-0.23967604704736445, 0.30507144105805617, 0.036074407036116973, -0.33532150005797123, -0.10353881007018817, 0.79601472913384952]], [[0.58492221657828503, 0.87667213626202511, 0.78035013018070121, 0.39272647832481855, -0.38194823743397821, -0.014553605015940274], [0.70681440903759762, 0.63683600698895959, 0.86696263249217065, 0.97306897648159718, 0.50180182900405956, 0.96670704711357502], [-0.15711029875455007, 0.76551513139305216, -0.53594851479017613, -0.48827037945646667, 0.70783145966700722, -0.35448324452686975]]], [[[-0.73733451347464296, 0.032136037270557916, 0.16046101266573864, -0.16646679499526185, 0.98625465513059307, -0.30112254823002171], [0.42336306092093556, -0.47567244491146221, -0.83327640796934177, 0.48290888386334663, 0.45841070283918861, 0.036117299261763769], [-0.49382078447277267, -0.49089802192785514, 0.014467401172693961, 0.13809971884784633, -0.43710087084386018, 0.88073874723818601]], [[0.55888543002274771, 0.27496479837460819, -0.44943522537219516, -0.54506342105687722, -0.87242471826738743, 0.58196097377899769], [0.40573488296110938, 0.011014190419628589, -0.71546271761695879, 0.17604148176379919, -0.058866024617525881, -0.86506473494267699], [0.43963746416888538, 0.41332710570538356, -0.19987538232655733, 0.46645753636686527, -0.048406613220982386, -0.22247949015284019]], [[0.12354133828505676, 0.74114598911366092, 0.60059126589601375, 0.68689693500766835, -0.25334272183152851, -0.13020688830113558], [-0.87858271757116446, -0.48640039611484798, 0.08318351252486722, 0.52114823632333351, -0.21770897584963622, -0.82560375957656729], [0.41321093559238187, 0.83067842671514791, -0.59784028477967688, -0.15106250277563937, -0.55391926458906671, 0.71088028787580004]]], [[[-0.79913336052683914, -0.84107420507513719, 0.73505811466256143, -0.50574266070251461, -0.14144529814476425, -0.90923534790771177], [-0.7662800353175625, 0.1497511364855979, -0.076362046183220622, -0.42346679285080091, 0.12589981165754138, -0.22581963303984964], [-0.86111454570394064, -0.58759211518713927, 0.63497819833894775, 0.90196968157623036, -0.72369843836375791, 0.10123868081912879]], [[-0.96970622084661828, -0.095881459621218523, -0.96717920897773846, -0.37334690066212017, -0.49042501156120655, -0.43221199636102736], [-0.14774072274442451, 0.42023130290501354, -0.46043268632038958, -0.8549486529882333, 0.53323985555909981, -0.023198200473047326], [0.66253424575709641, -0.39347116321997877, -0.33037639116739359, 0.79359045281156093, -0.8451601661126753, -0.36791089879785854]], [[-0.90622401938788943, -0.56834820676455866, 0.78391243750566164, -0.85934013078793692, -0.015240994316236156, 0.25359494815198858], [0.44729142663728338, 0.35798547916496903, -0.90372569215927046, -0.95713879083770337, 0.95781969257678723, 0.35040041383975429], [-0.47921674117850022, 0.56685398816459553, -0.95425450344859297, -0.37910652989558669, 0.53748520559722479, 0.18682524934963474]]], [[[0.49868003218842194, -0.48673136346991663, 0.65553741091405371, -0.048850078894613125, 0.26187624557856304, -0.31322227509095568], [0.41741800708048626, 0.20990639817071166, -0.92181018058854969, 0.64868610538526683, 0.26316045556128476, -0.76656678098182041], [0.50028822653432403, 0.67629687885539069, -0.52250798145908073, 0.043162191239042746, -0.71987547271687569, -0.95617703906117724]], [[0.0044772341077730093, -0.65499137376962957, 0.51498057850934686, 0.60351843374290337, 0.00072027749017511411, 0.13411345750875237], [-0.4483584646310852, -0.67136451845991196, -0.61662855459064669, -0.80368692688515031, 0.73782565743541362, 0.48073342809320652], [-0.40355958185934959, 0.48490875036568393, 0.5700502251944759, 0.54783189580047309, 0.23802880053079511, 0.49968034053708199]], [[0.76799158758581254, 0.54999763325186657, -0.27016857401523486, -0.23603198002977588, 0.79273271437719095, -0.42553396387453102], [-0.066738971431817617, -0.97150627333446837, -0.32466550236925329, -0.77021406404813053, 0.039841054684433885, 0.39733882913111551], [0.01278567395312824, -0.56521621990805015, -0.075162622563856862, 0.21033551820617791, -0.35721711793700406, -0.35251074175199126]]]])
        ref=swap_axes(xx,0,3)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_swap_axes_Symbol_rank4_axes12(self):
        shape=(4, 6, 1, 1)
        x=Symbol('x', shape)
        y=swap_axes(x,1,2)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.20593144194693647]], [[-0.174271446592551]], [[0.98694286885172766]], [[-0.16689508829617195]], [[0.61693568444248248]], [[0.19463359696591853]]], [[[-0.040205575313067454]], [[-0.63860477784500125]], [[-0.32704342830801503]], [[0.75583014979779839]], [[0.077331760232476565]], [[0.26850401679237801]]], [[[-0.71156258697747843]], [[0.59205853626016514]], [[0.29084099667367025]], [[-0.60238585375685982]], [[0.39830458693931114]], [[0.69236579397668363]]], [[[0.52776927598898649]], [[-0.38508566325454474]], [[-0.76040163088705603]], [[-0.33241561433573596]], [[-0.0065079746669713945]], [[-0.47283339571065497]]]])
        ref=swap_axes(xx,1,2)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_swap_axes_Symbol_rank4_axes13(self):
        shape=(4, 3, 2, 5)
        x=Symbol('x', shape)
        y=swap_axes(x,1,3)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[-0.30345108980265656, 0.84894687875396291, -0.65152484783797049, 0.33634877395043783, -0.2097060029645621], [-0.14328101948061689, 0.42284154249131589, -0.54106967318857691, 0.91643276974975962, 0.91986260542801745]], [[-0.20385808234915581, -0.65749724936011256, -0.79265818740801119, 0.58151303044076674, 0.68144979028727892], [-0.52873209172368618, 0.88273256724155758, -0.93172747901867625, -0.1796374621897221, 0.63263423324354084]], [[-0.94498997279517805, 0.75021933716429356, 0.29123246843617334, -0.3482494592595895, -0.18290634842761988], [-0.11066045021167081, 0.68727690227756444, -0.42583024350535337, 0.9377998070277398, 0.94276515240941605]]], [[[0.23784459220685061, 0.16603357530206786, -0.9239649617114607, 0.54741826271391325, -0.17627209821810941], [0.82323197922694513, -0.56456667755557044, 0.76798382673253762, 0.658332057060661, 0.78042329450020365]], [[0.53746736638934189, -0.21425445866448567, 0.79140789359856401, -0.38962020320519164, -0.25931663840140362], [-0.48185378595430839, -0.31787896512063529, -0.25448030680144118, -0.15145913523184862, -0.17543430584506781]], [[0.20095629486410016, -0.99576799216626033, 0.84922140663648915, 0.89223351235746318, -0.98102359312656962], [-0.18666228139237306, -0.5267017598582926, 0.90273654243740098, -0.73717701727197582, -0.81304223819510479]]], [[[0.83114301105252975, -0.72974215812681709, -0.65925104030412429, 0.10737448242965786, 0.83614065899453283], [0.70391525625953744, 0.34712028851570653, -0.41467077075799286, 0.76222940809620754, -0.66568611974609571]], [[-0.55768535939203989, -0.73226541233487064, -0.18630246324547617, -0.6428437201429591, 0.29146971880154937], [0.66377669798889372, 0.44046490519955062, -0.98878939636194185, 0.63666555159654536, 0.035524618472617675]], [[0.12021612044609209, 0.47495394653152667, 0.15993481229480144, 0.11662848547066096, 0.70938809382161772], [0.5502128002846034, 0.99933183803873282, -0.69545507156645914, -0.075106440719461709, -0.48846809052579454]]], [[[-0.20285349170556377, -0.83323306765845029, -0.18363800596406676, -0.3019912838316543, 0.74727949493045309], [-0.81138260630992631, 0.42419339495564912, -0.53895123743670048, -0.6821328694964286, 0.26734363157384955]], [[0.90097155934036643, -0.22301368675105926, -0.40526153151842559, 0.75137573945907388, 0.38092862194508248], [-0.057899245852858883, -0.56960709028327527, 0.30679789931511903, 0.81431605358285863, -0.52113915207948636]], [[-0.16715948888461796, 0.23958764677552802, -0.13460712899297045, 0.82698600374659526, -0.81642634624103416], [-0.38257193486570396, 0.3416875791003875, 0.99842495711645918, 0.26303768832113139, -0.37125124341815074]]]])
        ref=swap_axes(xx,1,3)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_swap_axes_Symbol_rank4_axes23(self):
        shape=(6, 2, 3, 4)
        x=Symbol('x', shape)
        y=swap_axes(x,2,3)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.25657652614379822, 0.67438122852824178, 0.47257402802584325, -0.14748508547218653], [-0.14786461526085692, -0.09835856448720004, -0.83606719648678207, -0.9122040014783257], [0.51649815984720338, -0.61860268890048009, 0.1426121300193246, 0.12402267027633207]], [[0.43971641469404843, 0.28735189724044652, 0.90392014795090581, 0.081568905926356239], [-0.1999991252499127, 0.82996282913558983, 0.12365803261896979, -0.38153817778059662], [-0.71101475693425886, 0.82244978274736025, -0.76468367410513327, -0.91616774229555564]]], [[[0.23730422440663346, 0.80601592116398546, -0.92486821916379336, -0.96297223564707757], [0.7035707718877291, -0.24213704419775683, -0.30936793008695807, 0.25240509670193267], [0.37900289800179476, -0.40865630791319463, -0.82701706609140402, -0.14358801671275101]], [[-0.68056445827095846, 0.59958980489831326, 0.065736383057739767, -0.037125753607125223], [-0.71305726498395172, -0.93768846581698684, 0.58858929802597637, -0.94682518553590067], [0.65054448848886759, 0.64255774009521116, -0.8663874477121889, -0.47645216466563878]]], [[[0.36934540778857095, -0.19952010057807468, -0.41894230084432182, -0.93514443349944054], [-0.95429288277895585, 0.25098858975577798, 0.94595660096442047, 0.24966877114973052], [0.46910612651839356, -0.91943007359736439, -0.83784016528259464, -0.56343725890681617]], [[0.46193306159203029, 0.68811489083938349, -0.51248471309672849, 0.94913455368511213], [0.23236372956092333, 0.15122922482178569, -0.22198949757456909, -0.69866822786810845], [0.82142104413399908, -0.44871590486526736, 0.93682237273059532, 0.6668540215333929]]], [[[0.11530733492744516, 0.48694815788982559, 0.72190048248092431, 0.44770899728475189], [0.90774337418994122, -0.051637477688375011, -0.65767069275504197, -0.45179710379652316], [0.51167906292335497, 0.0064169900383206357, -0.25904012959693934, 0.53980163403546944]], [[-0.19255519657811515, 0.70950026010649303, -0.50049683604420614, 0.83586318368039492], [-0.84146453390379961, -0.11861751628055273, 0.72991780293781394, -0.29635227676705123], [0.94668644705379124, 0.16733406394223027, 0.70551272816148369, 0.10550906516050484]]], [[[-0.095256368803380287, -0.035234358832767931, -0.41692009532704755, 0.87951410426752319], [-0.16476833343375885, -0.30732718084229771, -0.26118998562113793, 0.79193853595647301], [0.35564734445592583, -0.60351227415107545, 0.43928037707465517, -0.72844214078672764]], [[0.69745992013941094, 0.51619878167591327, -0.026429354145893758, -0.12618798776102991], [0.97689656017720949, 0.029404721928852684, -0.44766199990795252, 0.5072146630591774], [0.56923058578896413, -0.39108538123670722, -0.066641513101604044, -0.21819702355681247]]], [[[0.5945970671837133, -0.69280022186017653, 0.41847733304643064, 0.83503208767528814], [-0.43469287773169918, -0.17612844630013313, -0.5011783797027165, 0.82655481945852083], [-0.42510908578546647, 0.49075339944530971, -0.044457477969722436, -0.12636124250277736]], [[0.95900385775713937, 0.18395499581767338, 0.21571266328536542, 0.65656926013908001], [0.15705695866220482, 0.23557634928863247, 0.39812296767947952, 0.13234790162709054], [0.049842636992127209, -0.98080324163116983, -0.08951176480893297, 0.28788555627014611]]]])
        ref=swap_axes(xx,2,3)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")

    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_clip_Symbol_rank0(self):
        shape=()
        x=Symbol('x', shape)
        y=clip(x,0.408556,0.759323)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array(0.00157076195697)
        ref=clip(xx,0.408556,0.759323)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_clip_Symbol_rank1(self):
        shape=(5,)
        x=Symbol('x', shape)
        y=clip(x,0.336596,0.586054)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([0.5613997196400704, 0.68097534947863148, 0.55710550468097786, 0.8334241393343973, -0.90096564032916504])
        ref=clip(xx,0.336596,0.586054)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_clip_Symbol_rank2(self):
        shape=(5, 2)
        x=Symbol('x', shape)
        y=clip(x,0.492917,0.678447)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[0.58761948756117821, -0.46037862321955125], [-0.34367335730570181, 0.92883918877976512], [-0.032227428214630427, 0.83359632987387222], [-0.080279495484635088, 0.72869829458251489], [0.92268299446461843, 0.23799789956581607]])
        ref=clip(xx,0.492917,0.678447)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_clip_Symbol_rank3(self):
        shape=(4, 4, 2)
        x=Symbol('x', shape)
        y=clip(x,0.142084,0.894372)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[-0.44823468880757877, 0.6204644822067229], [0.69399955950872849, 0.77570681924230112], [0.33881701333008118, 0.53256166612946476], [0.46752519347576693, -0.91720700453285331]], [[0.89259147827326513, 0.44679430877477722], [-0.89133611405538704, 0.97060913821684469], [-0.33936808141167596, -0.94608546618305289], [-0.24332556165077546, -0.26236341722484569]], [[0.22539850161511743, -0.21337675728380123], [0.70085899522421236, -0.13062160166520198], [-0.080473651844689575, 0.92582844431726574], [-0.72383280098271063, -0.55388826794697965]], [[-0.99336986537478, -0.82595349736471158], [0.026713863251344616, 0.51298760556823964], [0.52591720631590388, 0.71740516048897351], [-0.15208005738978136, 0.27239679843782372]]])
        ref=clip(xx,0.142084,0.894372)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_clip_Symbol_rank4(self):
        shape=(2, 6, 2, 4)
        x=Symbol('x', shape)
        y=clip(x,0.206311,0.738860)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[-0.23017657319445939, -0.9913799344317491, -0.71043449448776608, 0.103405494502957], [0.26425209929726945, -0.93274255541070938, -0.71961715155039507, 0.62054109456939188]], [[-0.63598215824430415, -0.16035711847695233, 0.16105251318870373, -0.9660483513088387], [-0.91168427933036766, -0.48077452618324057, 0.24219651060469016, -0.99091448930655912]], [[-0.44644290073000015, -0.22828623732012865, -0.64063344397379995, -0.42144566024803276], [-0.52888749928748191, -0.28266162922536631, 0.1904874332090869, -0.48899365750997981]], [[-0.98994438328851131, 0.76646691147786439, 0.99526091979042786, 0.27557269856047806], [-0.79777454205634046, 0.24800632771264319, 0.40310052137036667, 0.80014670700891433]], [[-0.37621961537750348, -0.88986285012717525, -0.39137987585393552, 0.98176280567877039], [0.0012435282505136591, 0.737549820643707, 0.85941954677696475, 0.79739492366126186]], [[0.32724430473412935, 0.39904670738770731, -0.53342728366956016, 0.077745892449792908], [0.59218780466715448, 0.46691940336748372, -0.85034278531490326, 0.12730547602663767]]], [[[0.72137751499058411, 0.47374717632369223, 0.31193939062707488, 0.19548655883415922], [-0.22352120140188925, 0.284277068079543, -0.79571479676724977, 0.84357452849936898]], [[0.63483874044166178, -0.92084830832749209, -0.55787439417586127, 0.60024782927783615], [0.54187933873175576, 0.80191362743343153, -0.68915957663778293, -0.4913339629842135]], [[-0.81080767618531113, -0.61883189469019761, 0.22654339619350128, 0.22575709768876151], [0.26480228125963445, -0.25538627973278327, 0.59791167859057603, -0.38494596237234191]], [[-0.099926811869933685, 0.28079554366494275, -0.44248967285625107, -0.57232861797726575], [-0.50924920611884494, -0.8218685673680739, 0.28680898335288108, 0.3579176643766051]], [[0.40559643348920793, -0.18286245231913445, 0.41913313035703448, -0.58890731430591026], [0.94461316708814902, -0.49998086821311394, 0.32672468803684818, -0.81950975258672165]], [[0.58183423418999469, -0.80401899830712908, -0.933625601495508, 0.20371883807911928], [0.35999605550847713, 0.10957668297950152, 0.82238147977014608, -0.47626309930983424]]]])
        ref=clip(xx,0.206311,0.738860)
        res=Evaluator(y)(x=xx)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")

    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_inner_Symbol_rank0(self):
        shape=()
        x,y=symbols('x,y', shape=shape)
        z=inner(x,y)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array(0.60061490208)
        yy=numpy.array(0.368032142104)
        ref=inner(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_inner_Symbol_rank1(self):
        shape=(5,)
        x,y=symbols('x,y', shape=shape)
        z=inner(x,y)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([-0.11979563319368602, -0.49612889788647907, -0.14985618804426304, -0.85117752987913353, -0.1252071689123182])
        yy=numpy.array([0.62220243488367477, 0.9166595276976619, -0.14645704545756044, -0.18691514832596701, -0.33889323130813231])
        ref=inner(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_inner_Symbol_rank2(self):
        shape=(2, 1)
        x,y=symbols('x,y', shape=shape)
        z=inner(x,y)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[-0.27985215874445046], [-0.1623563275104607]])
        yy=numpy.array([[-0.53267484001798371], [-0.0044469421309056845]])
        ref=inner(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_inner_Symbol_rank3(self):
        shape=(6, 3, 5)
        x,y=symbols('x,y', shape=shape)
        z=inner(x,y)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[-0.55968600681606651, -0.99075027598290344, -0.36191743265791465, -0.12829870585252912, -0.59352775670108238], [0.45367419340063453, -0.29147002456455429, 0.32125946951425033, -0.27145252832091393, -0.83663359145272698], [0.25692042597416287, -0.66160952051768041, -0.35081703257813746, 0.50625241766495099, 0.4949120986412614]], [[-0.4562568917172094, 0.49326308342291947, -0.64496623452122837, 0.42756305522001226, -0.7287338604299074], [-0.2640083215886444, -0.20153649351299796, -0.65057694598667726, -0.74372721999978997, 0.69925620734160177], [0.54924564795235153, -0.023427977126797561, -0.29950251389892801, 0.51790526343965437, -0.58351488055482181]], [[-0.9011936231737665, -0.97495794727375018, 0.30584095924881405, -0.58871298666131233, 0.76822642355350701], [-0.48177722332222594, 0.19407281873668425, 0.43008159444715166, 0.708856779029299, 0.33517997558506507], [-0.22635568156676111, -0.24759632737082726, 0.35486864308204491, -0.3421589081730585, 0.72152072329590355]], [[0.46149909870813799, -0.035499409999059539, 0.69869204062432599, -0.83420692819421793, -0.43899871380753885], [0.029041565012455806, 0.70484130235946241, 0.99283722233922211, -0.39623464302415279, -0.32422757423332449], [-0.98150772783978302, -0.76762860347429673, -0.35131841721430934, -0.87915983182563973, 0.089420744544111752]], [[-0.74547388265275849, -0.21652127970777379, -0.99310972638258832, 0.027162156076045996, -0.38905437612483329], [-0.77593393269367161, 0.039946680771294263, -0.13443277797197517, 0.15210000749530073, 0.76195501664920973], [0.52021792823588164, -0.8842150808340834, -0.50352837798491668, 0.28939528113867508, 0.37229692527731117]], [[0.080383304291641533, 0.98200555505871412, -0.52651542027610421, 0.96806548827500349, 0.7441709288806504], [-0.35708195611301496, -0.36068935588502504, -0.093142003326600387, -0.59803752503479202, -0.20823425237355697], [0.88584431312854051, 0.5093108407946334, 0.58079641376908375, 0.55865372067291452, 0.63113886746475223]]])
        yy=numpy.array([[[0.50589971387205712, -0.4414464640665019, -0.75950795541107019, -0.10886255155789359, 0.66258806567077233], [0.3039441437385213, -0.67853415941241191, 0.43514668568641368, 0.16502772246026187, -0.93406260030877175], [0.58076133532303187, 0.59754561542576701, 0.49040725247224071, 0.12403871290639801, -0.90316212571428967]], [[-0.74379891827922706, 0.049166822527366927, -0.72934897146892452, -0.84509834817348395, -0.3314727640855446], [-0.69548217348933417, 0.78902161328939346, -0.22028244832483934, -0.53424003873646808, -0.63115901136876329], [0.21928364434115011, 0.87861298998741333, -0.59309991245142091, -0.16326643284557996, -0.38628522409342092]], [[-0.28160694965612465, 0.88730837512884375, 0.39523367718447133, -0.24471276108316076, -0.036751684813167929], [0.30767125051630417, 0.53694595061135342, -0.34033943208929762, 0.069397203314602418, -0.68411610682917545], [-0.39751045935093465, 0.30283558595735904, 0.080715234922260182, -0.46831014630827905, -0.38559115002120414]], [[0.11378661273077095, 0.15260550114470717, -0.86983208162401704, 0.90745184763160713, 0.71656174724229049], [-0.30977729708312052, 0.68983823600946903, -0.66156647633263166, 0.59321664449648037, -0.76375004776428157], [0.29100352218605141, 0.17832528273478232, -0.32524692191236815, -0.32128025244891023, -0.84870685284120206]], [[0.22148363881031807, -0.21535259687303432, 0.50310013875430926, -0.4633294060510984, 0.54950205407985564], [0.68409185504005565, -0.30798586915059945, 0.18441398956089139, 0.50215450879525036, 0.19564100616591951], [-0.38324566542898686, 0.3175438392619494, -0.64475433689712291, -0.48669592769541392, -0.020457436596544198]], [[-0.75718466403205498, 0.57521907251122117, -0.17198929835356336, 0.42674263280209779, 0.96611253897619975], [0.069654614111870128, 0.97586681454825297, -0.55814551899501463, -0.49003604599599671, -0.29202590379619742], [-0.33133642864622637, -0.9993229893567348, 0.76646233449459955, 0.62716029755567382, -0.04344643571054041]]])
        ref=inner(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_inner_Symbol_rank4(self):
        shape=(6, 5, 3, 5)
        x,y=symbols('x,y', shape=shape)
        z=inner(x,y)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.14759316285737389, 0.82816827142914273, -0.40945037889773506, 0.99498128261926322, 0.44309797714678978], [-0.87413166142487286, -0.35093685981640821, -0.77941367060823685, 0.060324431144431978, -0.65528882368271235], [0.49606566254872764, -0.51428672746086068, 0.77483146292580685, -0.76325577133424738, -0.88407427380813153]], [[0.84078595137290102, 0.54435982069902367, 0.35863099616166627, 0.23874917697385833, 0.80142871696446027], [0.10844467456815665, 0.95435086911202371, -0.83367136602230718, -0.37017316093907038, 0.36657524216646276], [-0.85481810966396843, -0.060324146382506383, 0.330296354024324, 0.3115866161011045, -0.64169015497126991]], [[0.8758210073805035, -0.062329210426895099, 0.41745465496032996, -0.29113059215466564, 0.058670977736120955], [0.51529424902469634, 0.35621537306351336, 0.27708413541652255, -0.063685296522967727, 0.78187467457016746], [-0.34757299379144313, -0.39143575838516553, 0.68027260336164153, 0.29148370892137776, -0.16460415714175314]], [[-0.58171291314227713, 0.89127981491797326, -0.24166589224715751, 0.42060370127662039, 0.79400288154334819], [0.41445883407297712, -0.83653340454651537, -0.13400323017877813, 0.46923359276300536, 0.35668609112656413], [-0.59238928022453963, -0.22878588605229133, -0.38202848426322977, -0.48062635629058303, -0.41661628776387349]], [[-0.62681397103666114, 0.53008204749835164, -0.60586573899320806, -0.55230933317710496, -0.28529058756815351], [-0.96216738165990634, -0.50659899596192459, 0.23576955511977249, 0.56429955889630734, 0.3677283599942176], [-0.43396044405775092, 0.59360285535688417, -0.87444670696994908, 0.66485793212884947, -0.67103781540814711]]], [[[0.20525142363983284, 0.59716507424907661, -0.55975600784348845, 0.10284249973819781, 0.95728737888125415], [-0.053623124628934926, 0.10047158065341844, 0.55345652050442484, 0.74746886949693581, 0.87707087276452023], [-0.8971354613377045, 0.055424865845791871, 0.20750606304942387, 0.079438365591430582, -0.53944135927614867]], [[-0.17090751782895586, -0.0035885982597845256, -0.10761206939493762, -0.66979231784219317, 0.70456988086640648], [0.52645907599446717, -0.24792729979917683, -0.24043663285826189, 0.49099567809161271, -0.3841957861680152], [0.1691616745940121, 0.56017253482117169, 0.23179444830841578, -0.64459182135907467, -0.4478796258480775]], [[-0.5145119253872481, 0.4668558412094177, 0.96842297749542361, 0.056068562599582927, -0.85480655477122092], [-0.31286409164448314, 0.18777214263404152, -0.44149854042707215, -0.73262936105200693, 0.40425681003584013], [-0.032521269171860823, -0.2974408267262949, -0.25400200739372458, -0.50353819365649799, 0.91063278838359962]], [[-0.44372434344379208, -0.63836334739321421, -0.96252774990148082, -0.2938720264911614, 0.02504564495611894], [-0.51674182122794909, 0.82680505999492504, 0.71236956243512917, 0.74764631453334274, 0.56910674726796251], [-0.038951004144538226, 0.060688532111767612, 0.38634268352040135, -0.2220260022895888, -0.16440360830268252]], [[-0.97784935376771043, 0.81964574621361308, 0.46894173088555569, -0.45614546561100799, -0.088501210621679371], [0.10589597007673968, -0.98557250064852053, 0.46593301809009868, -0.43209407181947523, 0.92709464924943452], [0.6616311681635485, 0.87371607107766414, 0.5681402004471281, 0.30171853329874154, -0.41183912470069517]]], [[[-0.053646410206180439, -0.42784757577838506, -0.082509898295548556, -0.85846444795664234, 0.080784504249364897], [0.55125335686954902, -0.60895493020258251, -0.080117193117866803, 0.19938178082785107, -0.29946110659623915], [0.95644283045334078, -0.734341172348973, -0.8050654044273402, 0.16865796266229216, -0.31066955475422486]], [[0.26100269578471913, 0.69759426523048429, -0.99585115496854537, -0.92296555252322188, 0.25858970675280735], [0.012276082754948625, 0.86599343120783567, 0.4173766808661945, 0.19044436290606481, 0.30936590026604249], [-0.024414660873382621, 0.26255067739872007, 0.410232807179568, -0.79086340546752276, 0.34201401768212869]], [[0.055723834165235742, 0.93773358853042033, -0.058627288817689083, 0.88792633866589155, -0.73043034957907182], [0.54990295041788517, -0.87646423278922958, 0.36430242747478325, -0.59427140634646536, -0.85240735434338499], [-0.22866980724380048, -0.16357250060052464, 0.74986299092419939, 0.010845038915618277, -0.30823965569235079]], [[-0.67963528103590609, -0.12428242431215786, 0.12064201485950887, 0.36339561984670121, 0.97496449805300367], [-0.36954901895391212, 0.48600462427598146, -0.23510902996604832, 0.76764265695751366, -0.23286104021648435], [0.7701941031971653, -0.48908282621026644, 0.70411653298887811, 0.93718850464800885, 0.52106887681781822]], [[0.52820904979321193, 0.0024419584378359005, 0.4233932061788892, -0.29837250058599074, 0.66776380157537307], [-0.052123205639286629, 0.09759407470878867, 0.33097582265539138, 0.080310266451502743, 0.72076861310530127], [0.80774957584733831, 0.97715523315259434, 0.31561814219514783, 0.57604991936928829, 0.64047324725637367]]], [[[-0.63163437060823702, -0.87110165694100461, 0.26878019195090674, -0.18695016096710115, -0.83447678985766904], [-0.33398051406751827, 0.95442777379103472, 0.91469014023038042, -0.051352370644150325, -0.04501507131932847], [0.22525233617175244, 0.51924273153731426, -0.6968698532611588, -0.13100574700440082, -0.56975870007799179]], [[-0.25975770238385665, 0.91312485033007529, 0.9194644366282132, -0.28971583346689367, -0.87827597275623037], [0.54129157039510623, -0.28460371561556452, -0.41761269889009234, 0.037888951862957931, 0.3804878855859668], [-0.1063929953652325, -0.41052358206312545, -0.74071591180625984, 0.12646936667269193, 0.13936434637741457]], [[0.50810081983019839, 0.79339868428206151, 0.54621646315340144, -0.79329633930832588, 0.51584845336570084], [0.31679758525333646, -0.98061229073891898, -0.77959322511210116, 0.049142940146426728, 0.0040131746399092449], [0.61024051720558381, -0.18076394162169973, 0.4665228664648271, 0.51568736615633326, 0.86891614307757403]], [[-0.60495082180313742, -0.96445031636556688, 0.60729785677128367, -0.29964828569759305, 0.53965635263123479], [0.093905653811512613, 0.44705640786015599, -0.54948657084330654, 0.42398550591118123, -0.46645732256434647], [0.20551436547616864, -0.42501849052259622, -0.76833056813073686, 0.09777942327144773, -0.43300342267571512]], [[0.96317707473361325, 0.56853914818776086, 0.26588795374486884, 0.53487211516308641, 0.31971798549549457], [0.25550257202544047, 0.19022658836382034, 0.20572956616516769, 0.88497986928813566, 0.15344042507316646], [-0.2132400814856299, -0.9063667739068626, -0.35765273859429869, 0.78843963705016873, -0.73966504238198527]]], [[[-0.47177191565156207, -0.64680358212566591, -0.48313590696024522, 0.61309716924831936, 0.95078853472691582], [-0.69616211796948257, -0.90993808584163038, 0.50317751677928868, -0.1373562125583927, 0.87038460491119163], [0.54505769539077642, 0.16898764446181835, 0.29191325122177769, -0.70788724670607106, 0.43333980666153771]], [[-0.88755544719334667, 0.039714842399042993, -0.66016340398436779, -0.071202981949273436, 0.64080035699573701], [-0.89305601025545722, 0.61204795205414397, 0.3340928330580788, 0.30306459571880073, -0.64828396537353306], [0.46547588752764812, 0.022841447207130328, -0.35913459520057844, 0.79369471259782132, 0.32582908823695322]], [[-0.011271670464523043, -0.2831003328359849, 0.22295627511434124, -0.48339833599136495, 0.62362175544202758], [0.21697539743270355, 0.67444554356487973, -0.52077574104636426, -0.35383815057702916, -0.82960789877581598], [0.59854896606483043, 0.89038781603172046, 0.53263870659515633, 0.4257726238112689, -0.40746410224919494]], [[-0.21897723552094073, -0.92919667675816786, 0.52145000619751314, -0.92405731110022615, 0.24419344575430735], [0.97786963540885186, 0.86487261040831398, 0.60924264528787653, -0.64389184948565714, 0.92087913403172617], [0.16146501718021145, -0.88534851389799862, -0.69419523600120914, 0.12862705733006918, 0.54646645233222246]], [[-0.55926424484095882, 0.81646098126831346, 0.23990465273321382, -0.82347004761463949, 0.29668155685856168], [-0.72286019925992218, -0.0026794448069793475, 0.42368335792547795, -0.97800189719826958, -0.46344687178087596], [-0.25292334762280255, 0.53766242470056391, 0.72819326445789501, 0.071604230750794917, -0.78073010121669095]]], [[[0.53370874538222202, -0.35540765674561525, 0.47464121911399437, 0.1070577540406461, -0.65210461810913101], [-0.44699285115436149, -0.81143408755373825, 0.34131834948639739, -0.76248480182419143, -0.6093707806777835], [0.1017005896679819, -0.63485528351738019, -0.17643633039929441, -0.36220780121079521, -0.65997391691214702]], [[-0.53995942422271725, -0.77289663167192613, 0.99264059949208594, 0.78427689375590659, -0.7843840005838012], [-0.39561954654047615, 0.68665729627034855, 0.37348186455523047, -0.85738086385592616, -0.5715637727023728], [0.20127332926967112, -0.520449361733194, 0.13215684365170777, -0.92421658269843809, 0.60782219243615176]], [[-0.28511399149878436, 0.21455844923518619, 0.95836102518058941, 0.63959374483610421, 0.67663854851093097], [0.72404096437532184, 0.99026804279551772, 0.57354247241084133, -0.23855453840492036, 0.74588181462227321], [-0.65206465645125999, 0.14201711654161087, 0.047344057382962434, -0.90463670886848879, 0.4082786472068709]], [[-0.57610263982224685, 0.18746514733383268, 0.15791598468155432, -0.029677600656888847, 0.6891642069707169], [-0.61909049175263631, -0.81286986187486199, 0.68720430260298659, 0.66971786973119296, -0.56586267747061725], [-0.19389819865319602, -0.14486914686593999, 0.16206631594605136, -0.44773902226323736, -0.21102786984199473]], [[-0.25200959731183703, 0.54593239654706127, -0.70495191896091214, -0.61335261141029096, 0.27117951284730868], [0.48020692347120164, -0.83870088469090809, -0.56348855841314371, -0.97184609855911464, -0.67123156233223402], [0.67735725373548905, -0.80218696515557997, 0.24558589309482759, 0.71513701919198991, 0.45828992999210616]]]])
        yy=numpy.array([[[[-0.27804018142491471, 0.36180484018167336, 0.12145955423622823, -0.058638880198430332, -0.2415810919700232], [0.80206223139070665, -0.80114243832302567, 0.12579584029021951, 0.84290921604168445, 0.36198456226974352], [-0.077821286173482607, 0.63169296721089974, 0.63961432371199778, -0.94669784291806547, 0.86845553790890673]], [[0.55062554053794766, 0.41829411101820146, 0.72194591062390057, -0.49073638409867626, -0.51703892081557168], [0.46804111316663599, -0.16315126301676774, 0.66489684588771136, -0.13621033950092887, 0.82326948316892024], [-0.2029413925377066, 0.71274901136999635, 0.89825758596046712, 0.28463143253245993, -0.63251028666113318]], [[0.18602282622682909, 0.13280609709962343, -0.12558451098229395, 0.32626952761422534, 0.41982564580036752], [-0.37047337414350778, -0.37456591101043846, -0.55035972276585521, 0.43107391095930891, -0.28404573178832671], [-0.38126872653150712, 0.14296475143005916, -0.34838026727138538, -0.97445650582683863, -0.64399060415561382]], [[0.71973031037968371, 0.56529646631655028, 0.69380006895880975, 0.18653853289686562, 0.25110271341702717], [0.10477639973772535, -0.32243537123856059, 0.13054262534885486, -0.46387424148680667, 0.54409978556648797], [0.55897897253207041, -0.58970222567809638, 0.43771606594400758, 0.12727547897940839, -0.62679369227370807]], [[0.76869842426958757, 0.76092312509284166, -0.71835375248952649, -0.93449634698124617, 0.22545701136931262], [0.50595049506190715, -0.47446429210266605, 0.12712923811011856, 0.00037428353105783962, 0.49141831042202733], [0.59312703532638467, 0.92046700230861433, 0.68548712357253305, -0.83950319510364779, 0.43736720710027965]]], [[[-0.70648687544256794, 0.98302171163755636, -0.13193932238878525, -0.13565671218322506, -0.80570127509324796], [-0.75812755199369963, -0.23515643336134895, 0.20202060106961239, 0.30523926900120446, 0.24584176126586743], [0.77145928594820101, 0.73916497027823214, 0.91448533120592512, 0.42628835141193711, 0.072765266996794198]], [[-0.25665699262514807, 0.55136447008588307, 0.54279636686865529, -0.23657065830091928, -0.75532362969220612], [-0.32752453387906111, 0.78462227411573382, 0.7107822521429894, -0.011376631424210526, -0.37776236563332821], [-0.81459678695910132, -0.786913896055214, -0.28545116962796935, 0.71786244633205687, 0.75857371930155826]], [[-0.13786968030871827, 0.29256506336158128, 0.38316553121287478, 0.52526716451674127, -0.64868219438582808], [-0.81740357855097301, 0.4454734019141906, -0.35680502824945814, -0.64052359954257132, 0.65330045479527099], [-0.45365494082269353, 0.86761729304587143, 0.132596405158522, -0.79528925457640254, -0.59732523899374468]], [[0.098686537860092516, -0.84452388411344503, 0.16894654194730685, -0.26382349754166889, -0.29329996233036448], [0.55996454146657104, 0.68883435457037967, 0.51352550102336947, -0.77579541336380675, -0.026589996138876026], [0.76017148334459739, 0.0088681127272538518, -0.99959550724394508, -0.15994493175955071, -0.2885698234913201]], [[0.35447377702162286, -0.083074507135266984, 0.96531388718212074, -0.72062432382226249, 0.65835534240626159], [-0.23840019287150294, 0.68232591655156782, 0.026162362373801207, -0.97881786740057186, 0.19114197142514566], [-0.18510580955429856, 0.67586054387826766, 0.32734711335751587, 0.51420051057181326, 0.77643044916815129]]], [[[-0.76241990420602535, 0.0080299250583750759, -0.37769200767133815, 0.64090118633045678, -0.62290496966004394], [0.20516013581775217, 0.85395172646396533, -0.19729305269372532, 0.44660857821110511, 0.067108100717937713], [-0.90755694205664406, 0.85578610757780216, -0.12182556563759195, -0.50601861168143714, -0.25427671529572371]], [[0.96192758871941519, -0.61163513897972366, -0.85196926926430572, 0.070171894890030728, 0.89912005091452363], [0.15121884007394093, -0.16123322681793129, 0.78102507090407181, -0.34647767416522424, -0.61304715688242051], [-0.62197767437900486, 0.07677291345591275, 0.83092703085615449, 0.51517060102506473, -0.98605964641707788]], [[-0.55776931670960384, 0.85290484273272593, 0.84266867850065519, -0.69579994189622663, -0.46952477701803552], [-0.75235182886433982, 0.20026277318372832, 0.27705056034261322, 0.68602495769438243, -0.80429647073986366], [0.53533484589916291, -0.042107789093957848, -0.15849500290517993, 0.33746144620270657, 0.24125023135017343]], [[-0.90151707832746752, 0.40373860001606743, -0.56372833595621352, -0.40908939402764921, 0.27833804807784746], [-0.040610727528486601, -0.17968235545157207, 0.52230304298915065, -0.65062680844170684, 0.88205671748800851], [0.41250735204951638, -0.222021026293026, 0.55491955225239176, 0.90536745338789415, 0.18261880198973324]], [[0.59658954830142541, 0.91133779899871592, 0.083360524878421938, 0.8059904951374568, -0.67526418629698592], [-0.99707224226622504, 0.98988442432413803, -0.85782477669449131, 0.54865362189600297, 0.65254937312334227], [0.28235588196314887, 0.63821279831191324, 0.82515061786684618, -0.52625129487442956, -0.80858034877876039]]], [[[-0.79900312916309191, -0.6969552303166151, -0.010129392598755116, 0.90842831515697209, 0.45487801097126024], [-0.095370914353942737, 0.71223451032888119, 0.80899520226509392, -0.099095997905264799, -0.41282303277357157], [0.67624169817747504, 0.45620571203051563, -0.022719630471966568, 0.46009794998584486, 0.12072841010340185]], [[0.34494958627303896, -0.67855067573955452, 0.82795800811679388, -0.48519232045009342, 0.20712983701127308], [0.85152059656549395, 0.072830412357481444, 0.3251282830345863, 0.042308518269010387, 0.39529836864529355], [0.96705429842110835, -0.53280165453089801, 0.39743544312527201, -0.21882334134665493, 0.42378426367693889]], [[-0.51178574534516463, 0.29644209006768518, 0.58901007368784986, 0.68701651083898341, 0.00054082359315898998], [0.40485465555185574, -0.3643218825320067, -0.25321202100952456, 0.8225095676318781, -0.26672320135938232], [0.55141664143615965, 0.44324748140882719, 0.016026696003152985, -0.66424442985309229, 0.43989744414074461]], [[0.93048033123889007, -0.33420492211830855, 0.28104341884457162, 0.21764264163651381, -0.83932611812347813], [-0.80392314873757575, 0.14309348351696927, -0.12580838743710698, 0.37487870499480769, -0.40042728079190004], [-0.78551470679037805, -0.15082104537394825, 0.96367377063824655, 0.79227473737715304, -0.69752977462621568]], [[-0.46250802355207377, 0.73017346446057152, -0.73351555169468363, -0.092144755500874975, -0.92515099751600816], [-0.078289980511300428, -0.83206364369303709, 0.47200222481875276, 0.31632949741105043, -0.37030803056003414], [-0.78045581894589411, 0.96042871024438936, -0.58026741143847094, 0.78524048007636238, -0.73991078098098106]]], [[[-0.90758476397748411, 0.94629670167770574, -0.27913377758262725, 0.082385001339218444, -0.25400030467320778], [0.5663993118879378, 0.77807003240113737, -0.3891884247044759, 0.64359742855498125, -0.92339692718870747], [-0.43816731769748452, -0.85334612609736471, 0.11908233153936365, 0.86204069140669803, 0.56722780428206931]], [[0.49703108584932743, 0.35837876509154265, 0.8936226767905604, -0.94181910103784805, 0.83585976714653576], [0.76558180801183129, 0.46605866533578499, -0.28888480897022095, -0.88537955153259595, -0.12368768541287967], [-0.37191223220868008, -0.38375832805673982, -0.16792886030531284, 0.72075759664845496, 0.40115442195235151]], [[-0.8648629694403025, -0.41847168110881738, 0.40561361869036849, -0.92321483992043163, -0.15124595154594078], [-0.35661448861403522, 0.93918381665328443, -0.21696849112390226, -0.30104567764971657, -0.09006946292530027], [0.99353314438301732, 0.56554429889370361, 0.17966504460474964, -0.094187954813818475, -0.81429589248631085]], [[-0.84183326116139168, -0.42795368356472485, 0.45955811485825437, -0.012302520501459746, 0.97853926109674649], [0.9775656968608728, 0.83095196842269203, -0.76241695641665008, -0.25372388534846557, 0.53920362985721115], [-0.86767560920188891, 0.52023262624535804, -0.38936669608937202, -0.74560869680213493, -0.33288325634222904]], [[-0.59549292169069346, 0.14937492284653708, 0.33964973252963104, -0.41925821233585747, -0.11131034876606605], [0.62697709270045454, -0.17036907228476661, 0.56762745809373083, 0.60054107169880222, -0.058981508765843849], [-0.7946165700273029, 0.75566034575629448, 0.97143532687321388, 0.26407594832112413, 0.47163537284333046]]], [[[-0.73392395388006393, 0.88733806824129591, -0.93903452523540598, -0.17260643195925796, -0.49263876407030982], [0.12927524239638588, -0.14708405308944128, 0.7790130749592461, -0.86464268019573254, 0.49651062741923013], [0.054727597993463606, -0.17889506183014814, 0.92610464121075253, 0.59249090793085823, -0.27561279538491834]], [[0.67850880548973547, 0.1968997207039076, -0.96119555976592164, 0.66937357752135007, -0.0052646712628421355], [-0.55625096860514534, -0.24128816701734057, 0.10091156445170002, -0.73961332576506567, 0.75734111251085645], [-0.77312249769381358, 0.1745475145398192, -0.96047372517098961, 0.74286361125740163, -0.89840599144130895]], [[0.5835330322915826, 0.97588074779952882, 0.017383080870907675, -0.9466085854749442, 0.63035419191830311], [-0.26993036648864566, 0.54870489052519966, -0.66781942889043688, -0.15969004818050792, -0.35422147627763723], [-0.46808318388882419, 0.50446516096748817, 0.6428366954841116, -0.208895426647975, -0.16321032110973799]], [[0.19906764291086509, 0.056257275648006422, -0.51448383622234717, -0.90021814902224717, -0.0075744199274057067], [0.35717785297678883, -0.44718222794803975, 0.029198842235905076, 0.60956930183562896, 0.1869607033485452], [-0.56416241757016117, 0.64868665962081873, -0.070870502032022831, -0.98783305244050079, 0.52181619256161782]], [[-0.55979532670446175, -0.63596348647944656, 0.9930793373234077, -0.76868163002783407, 0.21735772301348555], [-0.44578420958247955, -0.98982471271158623, -0.26865309340493537, 0.64041571479815662, 0.72591608900144089], [0.74122550610009186, -0.65051229626701579, -0.24002733581747737, -0.74166664707477659, 0.81680491554284096]]]])
        ref=inner(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")

    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_outer_Symbol_rank0_and_0(self):
        sh0=()
        sh1=()
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=outer(x,y)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array(0.167188688359)
        yy=numpy.array(0.541130826712)
        ref=outer(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_outer_Symbol_rank0_and_1(self):
        sh0=()
        sh1=(2,)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=outer(x,y)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array(0.583761110107)
        yy=numpy.array([-0.081726251892444868, -0.86576912123498562])
        ref=outer(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_outer_Symbol_rank0_and_2(self):
        sh0=()
        sh1=(2, 1)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=outer(x,y)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array(0.0651672402893)
        yy=numpy.array([[-0.42910680226375053], [0.10134889369184163]])
        ref=outer(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_outer_Symbol_rank0_and_3(self):
        sh0=()
        sh1=(1, 3, 2)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=outer(x,y)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array(0.102417413265)
        yy=numpy.array([[[0.77683635416821062, 0.7923296744504511], [0.94239916059659956, 0.02618872761314095], [-0.43488788930038091, -0.41922470935924627]]])
        ref=outer(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_outer_Symbol_rank0_and_4(self):
        sh0=()
        sh1=(1, 3, 2, 3)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=outer(x,y)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array(0.652945948251)
        yy=numpy.array([[[[0.62407973161616925, 0.27605922740918798, -0.16019539797700211], [0.44715896329373694, -0.36127561579998368, -0.40959491524683855]], [[0.19063878633681219, 0.315177645460051, -0.74640377416960657], [-0.14387168052369659, -0.53410512708609548, -0.64168965175728809]], [[0.70987212403911037, 0.93324253304599059, 0.60495540477622489], [0.88021114799978517, -0.16076850102750639, -0.062531020437505358]]]])
        ref=outer(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_outer_Symbol_rank1_and_0(self):
        sh0=(2,)
        sh1=()
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=outer(x,y)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([0.50271419107438864, -0.73042093317359269])
        yy=numpy.array(-0.887200881616)
        ref=outer(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_outer_Symbol_rank1_and_1(self):
        sh0=(6,)
        sh1=(1,)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=outer(x,y)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([-0.71453545433562016, 0.7798058529124996, -0.17790308975209679, 0.85517380327295833, 0.16302526440267662, 0.99063872128919339])
        yy=numpy.array([-0.84931183564706592])
        ref=outer(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_outer_Symbol_rank1_and_2(self):
        sh0=(2,)
        sh1=(5, 4)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=outer(x,y)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([0.89459596614704417, -0.7209113855681335])
        yy=numpy.array([[-0.74205510182941659, -0.91903553123349102, 0.028399942159339497, -0.89029332106595405], [0.23990745252991075, -0.016875723903685413, -0.12847503955448381, 0.41537813726380901], [0.93312486631309133, -0.11421689435542737, -0.19887369667072896, -0.71826991641381688], [0.40075486110417358, 0.14793371903183217, 0.91498757052046664, 0.35688487642123001], [-0.01122818216437671, -0.98825907386215883, -0.54521245320623346, 0.13165472949538004]])
        ref=outer(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_outer_Symbol_rank1_and_3(self):
        sh0=(4,)
        sh1=(1, 3, 4)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=outer(x,y)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([-0.24435241427954657, -0.28795450710996628, -0.43600210864484201, -0.34971998375251445])
        yy=numpy.array([[[0.16337926828503524, -0.91582844237135252, 0.37807050759893346, 0.58279166146986006], [-0.5935807303342131, 0.6261048241094862, 0.45649983184921772, -0.19087036494031606], [0.0094124978519420921, -0.30551340491027834, -0.61394398704665076, 0.97237864597758472]]])
        ref=outer(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_outer_Symbol_rank2_and_0(self):
        sh0=(3, 5)
        sh1=()
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=outer(x,y)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[0.37598881847713783, 0.66926618965771056, -0.79342006985849922, -0.0050953009940024607, 0.20336612867936443], [0.51443390546586598, -0.18019512028779072, -0.89629383762390602, 0.015147409839111114, 0.49669648679904066], [-0.049270873147616134, 0.23226275222893089, -0.30777449387152478, -0.50183441346318003, -0.33587606606118281]])
        yy=numpy.array(-0.535761100646)
        ref=outer(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_outer_Symbol_rank2_and_1(self):
        sh0=(5, 4)
        sh1=(4,)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=outer(x,y)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[0.6375625143992476, -0.59965366063900061, -0.01957811841131929, -0.6546401803242996], [-0.40129735918532083, -0.6305093652548226, -0.24437058420032987, 0.9121203698837137], [-0.6737028122058335, -0.76420725817544533, -0.43044398485133306, 0.62973606563039031], [-0.97179428409592328, 0.54573138300392032, 0.85623885739959293, -0.65417003166069332], [0.90897868054166797, -0.31202017034538909, 0.29017479941481295, -0.69963079938701744]])
        yy=numpy.array([-0.65107107447378265, 0.61374981260691874, -0.65861538901476524, -0.18177873114347132])
        ref=outer(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_outer_Symbol_rank2_and_2(self):
        sh0=(3, 4)
        sh1=(3, 1)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=outer(x,y)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[0.81427811642077352, -0.76958207106106036, -0.22696542670418118, 0.33913425870104397], [-0.51619259267690487, -0.44735311916146925, -0.2846062897143804, 0.30742784073245333], [0.53939679963606757, 0.50339714279427361, -0.56941223018252596, 0.59962083536235244]])
        yy=numpy.array([[-0.86717548355102592], [0.27479532240681315], [-0.07243778068362472]])
        ref=outer(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_outer_Symbol_rank3_and_0(self):
        sh0=(4, 3, 2)
        sh1=()
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=outer(x,y)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[-0.32007715632379763, 0.5974485887888854], [-0.83591735138525181, 0.29326813541685182], [-0.78748434685974011, -0.050309262220335826]], [[-0.708036847982771, 0.54878661631688153], [-0.2126055453245308, 0.20637554234060129], [-0.96321420626107157, -0.1498209588460031]], [[-0.95780303585763371, 0.58061602371401544], [0.54986686057743239, -0.89896686669810433], [0.8822663089106495, -0.88735003391486944]], [[0.897197201830638, -0.59807765112646893], [0.45725582791141983, 0.13278707514669508], [0.8961607849074098, 0.72615076110438759]]])
        yy=numpy.array(0.472399990783)
        ref=outer(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_outer_Symbol_rank3_and_1(self):
        sh0=(1, 3, 2)
        sh1=(4,)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=outer(x,y)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[0.51806703028362655, 0.96113745765212455], [-0.059976377315827278, 0.53579265370405071], [-0.84852369661789973, 0.65936024775910429]]])
        yy=numpy.array([0.93594353615356041, -0.44162262298409627, -0.20471419888916986, -0.54141892401063174])
        ref=outer(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_outer_Symbol_rank4_and_0(self):
        sh0=(1, 1, 4, 3)
        sh1=()
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=outer(x,y)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[-0.025455815271065774, 0.60849890632406645, -0.62288971317069519], [0.4334956149006941, -0.592314884316542, 0.2036926661963343], [-0.63773158416350451, 0.60610321256318089, 0.0052259711379492035], [-0.33586874458705718, -0.38554411981358228, 0.91246267263121417]]]])
        yy=numpy.array(-0.0437726172205)
        ref=outer(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")

    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_maximum_Symbol_rank0_and_0(self):
        sh0=()
        sh1=()
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=maximum(x,y)
        
        xx=numpy.array(-0.0115899409791)
        yy=numpy.array(-0.126407146634)
        ref=maximum(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_maximum_Symbol_rank1_and_0(self):
        sh0=(2,)
        sh1=()
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=maximum(x,y)
        
        xx=numpy.array([0.49708998995835518, -0.064652066154104348])
        yy=numpy.array(-0.769672731294)
        ref=maximum(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_maximum_Symbol_rank1_and_1(self):
        sh0=(6,)
        sh1=(6,)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=maximum(x,y)
        
        xx=numpy.array([-0.9981871300511731, 0.0042373043654895248, -0.54039091843645282, 0.25495889131541216, 0.069375321806829149, -0.68583802338943234])
        yy=numpy.array([-0.19444270820267451, -0.64156299800076044, 0.70079605293122738, 0.028947204355068257, -0.13186116676862647, 0.054886820089689703])
        ref=maximum(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_maximum_Symbol_rank2_and_0(self):
        sh0=(3, 6)
        sh1=()
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=maximum(x,y)
        
        xx=numpy.array([[-0.50758011552654181, 0.71375016910586431, -0.92575724385707114, -0.42802189741603214, -0.83900635662299239, -0.49816909298616507], [-0.6670366541330699, 0.17617849674303354, 0.60984522727040402, 0.067392788317862884, -0.33967753943190271, 0.64388703498888678], [-0.0043111391960313217, 0.013874712702809822, -0.75488746709701227, -0.61478551919085112, -0.18566303371856363, 0.12367578940961033]])
        yy=numpy.array(-0.681370043651)
        ref=maximum(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_maximum_Symbol_rank2_and_2(self):
        sh0=(4, 2)
        sh1=(4, 2)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=maximum(x,y)
        
        xx=numpy.array([[-0.38473733407663291, 0.076984743644116227], [0.82218116765854132, 0.24080448649830477], [0.13723074169367178, -0.77591535941832812], [-0.73041170581858994, -0.22139523476099932]])
        yy=numpy.array([[0.19350510022668166, -0.46026033133847322], [-0.183691587213205, 0.4021602592844864], [-0.55142290052136222, 0.63745806105101077], [-0.8120314704047551, -0.81889564157845607]])
        ref=maximum(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_maximum_Symbol_rank3_and_0(self):
        sh0=(3, 3, 3)
        sh1=()
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=maximum(x,y)
        
        xx=numpy.array([[[0.97934573269649605, 0.0034938768426133748, -0.68649494118258914], [0.20406523620125072, 0.17972331542830577, -0.11673905929029549], [0.70052975416340968, 0.14102375695158953, -0.060859949236506061]], [[0.16223911742859598, -0.11054657238764998, 0.7241123836595893], [0.51302856010113973, 0.84304342601664906, 0.90274312518567257], [-0.52167888270955731, 0.49035292211100212, -0.014510914547182452]], [[0.11093814469800201, -0.68400220314482896, 0.34812287070443282], [0.90880803993764836, -0.81838925998228973, -0.4411137312650939], [0.60996307156503926, 0.99658618778295227, 0.49595283134038026]]])
        yy=numpy.array(-0.98814147518)
        ref=maximum(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_maximum_Symbol_rank3_and_3(self):
        sh0=(3, 4, 5)
        sh1=(3, 4, 5)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=maximum(x,y)
        
        xx=numpy.array([[[0.60956307404293342, 0.43735638304248226, -0.31822686497403474, -0.75945025819282308, 0.26673954887659757], [0.2923327904898636, -0.55557297383558235, 0.24450188423858377, 0.77637371689003554, 0.13014101468295869], [0.6060968382327041, 0.41190432988620396, -0.42357489930661263, 0.75097560316559431, 0.90663881941450808], [-0.52789074462817864, -0.1909060716436044, 0.34306465334271463, 0.43694242406171013, 0.18635728767557258]], [[-0.74757384829669116, -0.65210356385708246, 0.87329340788785736, -0.070566993045540594, -0.84676855046242494], [-0.24483131790364077, 0.19591450374455355, 0.54883227519987265, 0.046844948916525908, -0.7548695219387962], [0.10111772854440915, 0.54485562072980587, -0.69587975524748091, 0.84511511901735092, -0.72948895741529762], [0.14189737291742377, 0.014864043772408575, -0.86063573274867777, 0.55316414699346939, 0.30424700314610353]], [[-0.87441229020440558, 0.73225373804937033, 0.70948617807488179, 0.33219793355146932, 0.66208218595749635], [0.36927931883493881, 0.71899178931423013, -0.90829779139670741, 0.60894503054831128, -0.13154583569168565], [-0.67438499773023475, -0.20930586492147896, 0.94279785096572866, 0.58912875447059143, -0.48720526341650361], [-0.14638396973779622, 0.74898947712447428, -0.90936596702091754, 0.017874708004088191, 0.97168807285585856]]])
        yy=numpy.array([[[0.80545413682921807, -0.047680198150959585, 0.098995586340579145, 0.97415493219374039, -0.13484108638501424], [0.24990411135866886, 0.089701955728723082, -0.39091887006255699, 0.38274147596087604, -0.98819772186396593], [0.64102215248979966, -0.12896793085686853, -0.68340063196116985, 0.27155570461386569, -0.58906900701649167], [0.5775057357352853, -0.29278486685094651, -0.67527166680032735, -0.96380455585454028, 0.35896227716360118]], [[-0.72514863849315603, -0.71122456866131234, 0.23955189528284659, 0.47091173249988039, -0.45269479001818347], [-0.25842549706048956, -0.3447336170534645, 0.7021679247464141, 0.055156491736749302, 0.76956811729392816], [0.82444268147960931, -0.94289604574493158, -0.5469159512040136, -0.39163875360223055, -0.96983758359202765], [0.082554308963227463, -0.12816391201591881, -0.66704091040831592, -0.93144500294258359, -0.35668474419322549]], [[-0.8787593622310772, -0.22778081997670152, -0.78920317068847878, 0.32495977092840045, -0.61397235138683315], [0.27162184648812615, 0.6762947591990609, 0.32628844068294294, -0.059998837475254474, 0.83662618758718632], [0.61121025538569218, -0.035722917471237015, -0.91480148772339742, 0.45234907020177362, -0.39973257187019851], [-0.50032540057616015, 0.10995896509684044, -0.038743496887116535, 0.97402959371835496, -0.61886354863106341]]])
        ref=maximum(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_maximum_Symbol_rank4_and_0(self):
        sh0=(4, 2, 6, 5)
        sh1=()
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=maximum(x,y)
        
        xx=numpy.array([[[[0.42535497834973723, -0.68837989191109017, -0.51161839026553491, -0.51097560399914266, 0.72839781393124592], [0.034122911625969365, -0.84565199743947606, -0.41087948548213782, 0.22694824526051938, -0.112167677097184], [-0.95921664561983588, 0.72749288617952512, -0.57670894324029254, -0.43472176050293876, 0.17276685500657685], [-0.51610670483651599, -0.23443172152037772, 0.52835107717517027, 0.71706636943001345, 0.1389375476242305], [0.21983075820897824, 0.37676729891568739, -0.50201697359866082, -0.74465686956010502, -0.26691191462580655], [-0.88146607511844732, -0.420047155251694, -0.71588310272843692, 0.43789843097701464, -0.089407981959364724]], [[0.81634197603412262, -0.14672648396585997, -0.37558266828819664, 0.25442383933838975, 0.009924040793986233], [0.88163231548898424, -0.8933043232924851, -0.38453103482265272, 0.19608816455031763, 0.8830541069304656], [0.058234385038623548, -0.63873770159091214, 0.39913876854230979, 0.41786890981667213, -0.18663225494774371], [0.12269852867092013, -0.26418280108846814, -0.67203824960356773, -0.74465420133650362, -0.44851650585747693], [-0.25129254672070922, 0.37029794512751679, -0.092894000327899962, 0.95034436910123277, -0.026016300514606128], [-0.76579997108530007, 0.74547034384345778, 0.2976187308682674, 0.74243336211170696, -0.79405836820161091]]], [[[-0.030105958983217329, 0.95306189261362628, 0.98637673072601761, -0.6851612561874072, 0.61423780791547267], [0.33318578295828494, 0.25153029223713674, -0.68863549069568197, 0.65038725311058321, 0.21679870821914426], [0.8952266391949748, -0.80992942279444446, -0.52776529046407816, 0.37497904645036995, 0.42857048241573015], [0.30012656844701091, 0.82767787767736278, 0.11135426909885404, 0.61147210074081881, 0.32185521808925821], [-0.23710651527137583, 0.8561030341444722, -0.4479971209592013, -0.80686634069697338, 0.97172910279740221], [-0.47621530962790226, 0.81670833560174505, 0.98849346614227884, -0.91145687918187845, -0.63184104251120199]], [[0.40124965102304233, 0.98610140048623718, 0.82925125605637762, -0.47044279936027089, -0.58115160901966734], [0.97311993427598908, -0.27789866330819923, -0.29201391049510761, -0.48403866887781577, -0.90903203629913909], [-0.73460646487926007, -0.41028401342641607, 0.33744816094726526, -0.34905944534347233, 0.43650715326275624], [-0.9739351840832724, -0.45972279700549867, -0.79623148246100794, 0.77286183834832278, -0.29455160696234195], [0.77694860253554787, 0.1901684129221477, -0.80162515030683013, -0.46237401964035185, 0.41653005185404579], [0.074245538133447697, 0.023806343995232737, -0.14904107312799253, 0.20743035963738121, 0.76061531657198911]]], [[[0.54223632739767957, -0.49986839808252759, -0.69407114689543947, 0.29974721315126973, 0.487901902451779], [0.023205291335722134, -0.90014860027036492, -0.53877271483333877, -0.62519564022835916, 0.11537634647972927], [0.095033194130134779, -0.68099334758965613, -0.17602379671157964, -0.82782161193620629, 0.020602663300782531], [0.70605408734125885, -0.3997407078780133, 0.49616604346065807, -0.36600132902121296, -0.089169557340946781], [-0.079351500399221342, 0.62063021823833653, -0.99090834183976018, -0.11484891860393476, 0.17673874868099571], [0.1920416786984962, 0.022693981181160394, -0.11468458261622083, -0.03469428129664176, 0.69914523847392873]], [[0.32290205869737409, 0.75975033856474727, 0.63893553695807381, -0.99814175089655022, 0.32154278198310604], [0.38793828721698476, -0.95909194436629752, 0.14272183874128475, 0.17667487146802774, 0.67511793863093006], [-0.29629137417899698, 0.14938813882607871, -0.43267976081387305, -0.65616947345625021, 0.66759776004917115], [0.44521658269266973, 0.0043268824024731423, -0.46600383935871781, -0.72190734551224156, 0.0011491531864888938], [0.74539801603252176, 0.67132423598890689, -0.9454716228503679, 0.069314448350804581, 0.37844394027513228], [-0.22534491608086138, 0.82196766396078669, -0.18662826505083552, 0.23301903705635052, -0.5369099046649195]]], [[[-0.14491654385467445, -0.6792323448034896, 0.094410595580436851, 0.91514169537100232, 0.85680579010145497], [-0.52292772196130133, 0.072279188132666095, -0.18226899726660828, -0.84702117399188315, -0.86745648135003228], [0.82727296414932816, -0.64167566480356664, -0.59981857732461963, 0.72667446022668147, 0.66998413946406643], [0.49188818433657877, 0.42299060040840741, 0.067452001150057672, 0.19092511069357521, 0.44916341407138138], [0.73095264803453208, 0.85715208850654134, -0.04619730545443379, 0.45778201326425294, -0.072131415613261307], [0.81583446282810779, -0.55769165979302371, 0.021723291348538343, -0.91487080903491491, 0.28447271517796269]], [[-0.6038459791901174, -0.52484442677631704, -0.008519411597633475, 0.35153297427814301, -0.40719358989213394], [0.38312270628760392, -0.77488811227583843, -0.90639326814492027, 0.86796315195884044, -0.17962357485461555], [-0.20889789176746554, -0.83548943132950249, -0.2844261759224771, 0.73751126979516024, 0.85320046351348267], [-0.39773779034380974, 0.38981936789090033, -0.1315473309619668, 0.66445002801436459, 0.92869487274361551], [0.81711750163133035, 0.43201122017385996, -0.17672860592370676, 0.51095017892262051, 0.31833593069565302], [-0.088608829740905115, 0.3703629483310098, -0.41819084311510957, 0.49190955631471245, -0.86792687862064244]]]])
        yy=numpy.array(-0.762941576996)
        ref=maximum(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_maximum_Symbol_rank4_and_4(self):
        sh0=(5, 2, 4, 3)
        sh1=(5, 2, 4, 3)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=maximum(x,y)
        
        xx=numpy.array([[[[-0.40571681703212281, 0.29796901207401039, 0.65193429170072315], [0.47625145404625058, -0.59784251958001589, 0.29798102336075361], [-0.44589792853736676, -0.48883806464125712, 0.33422653700333727], [0.41925511729736864, 0.82211304780852967, 0.6126059837082769]], [[0.89485890976833216, 0.22475173516735492, -0.63117686427391462], [-0.0067071316284117444, 0.26041787766601732, -0.16224863318490468], [-0.88278514096410188, -0.20997847389629243, -0.35063292861696738], [0.89671000558475722, -0.3201270053573948, -0.84736822777457466]]], [[[-0.82725994764636579, -0.72327106988912271, -0.093618705974747307], [0.97037494499562138, -0.41908638493931094, 0.041163639172186572], [0.53973976122020151, 0.031432847746586834, 0.83177395882001326], [-0.25596221746617243, -0.93615267384900758, -0.96753897140899925]], [[0.6599371020122764, 0.64298836744226384, 0.37966092847181576], [-0.70862258510101106, 0.86929259535468462, 0.17088123721200121], [-0.20479058326274791, 0.55120281695854545, -0.10943102519103309], [-0.66037131373984681, 0.89827584040633845, -0.85908481353187671]]], [[[-0.62158338350542075, -0.62256181956533152, -0.43336824019010245], [-0.95116253625633806, -0.75421734903525106, -0.54539961984478302], [0.83463291399283945, 0.89978747369913248, 0.49942198928751291], [-0.31557704775167528, 0.94176036368777138, -0.091043269816158734]], [[-0.35559233825557057, 0.94043206112891009, 0.62840398917049156], [0.38385240712143887, -0.47597242692802055, -0.60838364521479971], [-0.45961021918536371, -0.54908543105162444, -0.087752999145448207], [0.19533032838151154, 0.3439786037923851, -0.84695254757453631]]], [[[-0.54585955840215394, 0.53151184827784159, -0.28099622858981865], [-0.080991517533794299, 0.84030475317915809, 0.43632644863848635], [-0.16155526216061866, 0.69552308361938553, -0.90326117801048489], [0.30365461687619311, -0.92589269093049809, 0.81902474871440489]], [[-0.47452633556592083, 0.84239711451032639, 0.7148468021259311], [-0.40174611997222476, 0.29451650678612107, -0.31082803697743078], [-0.075625843091371436, 0.35485409560472725, 0.68773239609647785], [0.66059008482338277, -0.43736739887510101, 0.67336750102855403]]], [[[-0.48214584356261847, -0.33528893250199654, 0.089553981068788202], [-0.58524562842588534, 0.37009455974575367, -0.83876680157362049], [0.43614963091243331, 0.38412052825289122, -0.14799748844520888], [-0.33988997050642022, -0.87909550525835556, -0.5981712864663018]], [[0.54207543922610157, 0.74599484350875978, 0.60384439314024885], [0.72735307527596404, 0.70644865722730676, -0.38692601568723295], [0.23461658382293749, -0.92303740017765223, 0.29676266672824481], [-0.46110011831902309, -0.88637219348405205, -0.59614121841535228]]]])
        yy=numpy.array([[[[0.94921167370121973, -0.53763951643817465, 0.34510860964986545], [0.38292280251594013, -0.61583660734151202, -0.56390895437105892], [-0.44682646726508701, -0.28230751630828377, 0.39757652303446189], [-0.6076800678920653, 0.89641218943068091, -0.66134048885015173]], [[-0.44769961734238617, -0.49087415226900033, -0.68777390968636842], [-0.87089567010457225, -0.052031522876456515, 0.073955340739395581], [0.71560690099645563, 0.79224499951233396, 0.24291317718615502], [0.6730589111173404, 0.23891452471475327, -0.26706828343871325]]], [[[-0.32267204177553155, -0.4846230288634199, 0.65834130379071931], [-0.92966744469219553, 0.13018248970840607, -0.52008501704993115], [0.82985282356221179, -0.90759330513417891, -0.56282047501740107], [-0.4901126729363865, 0.81922138858949589, -0.39988375522394271]], [[0.96468736456498982, -0.80488038332420087, 0.30296606649747471], [-0.37705373117949792, -0.95074158885095406, -0.99238295038637725], [0.95279944773761116, -0.42793561664607194, -0.57675922254508771], [0.23124311048023793, 0.39287083094709829, -0.24692473936996762]]], [[[-0.46714306512102177, -0.81858793846897915, 0.50370292081199342], [-0.69734388921772639, 0.15844766796036702, 0.26970186730099277], [-0.64526421265653422, -0.012006370898646201, 0.85554316072098247], [-0.36378262014798501, -0.50460331658891966, -0.75270054675918074]], [[0.32748855469670834, -0.95062554175620773, 0.40200275923654116], [-0.52386231230202807, -0.01242136179019826, -0.49612077378307262], [-0.61561709367894912, -0.96066955789541764, -0.081646186799336329], [0.18863208321233893, -0.91108940514338799, 0.64137445184966291]]], [[[-0.066510671873508898, 0.13353531527350126, 0.15836859354973809], [-0.29306620908675263, 0.83424820690190882, -0.20262420212001842], [-0.82743362031492196, -0.20526670109464518, 0.71810800413843023], [-0.18925708789915774, 0.95078139595383671, -0.23780680498541606]], [[-0.28830890750786264, 0.75006111752679905, 0.84640213729710512], [-0.071956559899317707, 0.63205827667857961, -0.13080007837565133], [0.11805201182768155, -0.65493724216028149, 0.50587453931197168], [0.021483616095238078, -0.87149241209733952, 0.84933865325945646]]], [[[-0.21658032500269986, 0.3577678919980245, -0.45811953300659614], [0.74464836159055525, 0.5744314791108418, -0.79051970419648088], [0.2143008201105574, 0.94708708041537215, -0.56391413033842497], [-0.3304513378486682, 0.41603553960335482, 0.44327098715211499]], [[0.57455848778616581, -0.035353716345185138, 0.9533352334648082], [0.31942795515401357, 0.046378241285741195, -0.87389269014637971], [0.88642762158216737, 0.67575595031402269, 0.045411084110254185], [0.75522277809768856, 0.57434289821607143, 0.19923433245657951]]]])
        ref=maximum(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_minimum_Symbol_rank0_and_0(self):
        sh0=()
        sh1=()
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=minimum(x,y)
        
        xx=numpy.array(0.905098343034)
        yy=numpy.array(0.319973263286)
        ref=minimum(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_minimum_Symbol_rank1_and_0(self):
        sh0=(4,)
        sh1=()
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=minimum(x,y)
        
        xx=numpy.array([0.38021719297600365, -0.82749944618931459, -0.22185501442158873, 0.74350447861309421])
        yy=numpy.array(0.00675587596743)
        ref=minimum(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_minimum_Symbol_rank1_and_1(self):
        sh0=(1,)
        sh1=(1,)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=minimum(x,y)
        
        xx=numpy.array([-0.95683276290182806])
        yy=numpy.array([0.093983397053202689])
        ref=minimum(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_minimum_Symbol_rank2_and_0(self):
        sh0=(2, 4)
        sh1=()
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=minimum(x,y)
        
        xx=numpy.array([[-0.96816259628873369, 0.92450615264052538, 0.19583486565676389, 0.17313959712998939], [-0.94274188145981475, -0.43329272298937727, -0.030195587772193555, 0.65747364105957118]])
        yy=numpy.array(0.407831767695)
        ref=minimum(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_minimum_Symbol_rank2_and_2(self):
        sh0=(2, 2)
        sh1=(2, 2)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=minimum(x,y)
        
        xx=numpy.array([[-0.7263177547172055, -0.82078791706145826], [0.70904012409011252, -0.042906425155778694]])
        yy=numpy.array([[-0.56616243089845941, 0.087695940427152008], [-0.38204864182820364, 0.31047568574346718]])
        ref=minimum(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_minimum_Symbol_rank3_and_0(self):
        sh0=(3, 4, 2)
        sh1=()
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=minimum(x,y)
        
        xx=numpy.array([[[0.84990217640534849, -0.62993417634542737], [-0.85813308408068201, -0.69195996970044349], [0.18133884460977878, 0.55077421127892223], [-0.7768522194302272, -0.75530640775629809]], [[-0.52978154668910538, -0.22856677274210768], [0.082397111215010588, -0.62913065681529012], [0.65513325434399494, -0.73369887642643228], [-0.13537747439129588, -0.79712502747006764]], [[0.44049872636901832, 0.18557433186319039], [0.9232184867780544, -0.80881499852508609], [0.27722480769024371, -0.014787662256253054], [0.33611862043761143, 0.8090772579918275]]])
        yy=numpy.array(0.442324293978)
        ref=minimum(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_minimum_Symbol_rank3_and_3(self):
        sh0=(1, 1, 4)
        sh1=(1, 1, 4)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=minimum(x,y)
        
        xx=numpy.array([[[0.70531426780351403, 0.32189233575978426, 0.72804055573854765, -0.68535375428235823]]])
        yy=numpy.array([[[-0.78216929260983492, -0.44484858893780221, 0.49450820603617252, -0.018483491616907877]]])
        ref=minimum(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_minimum_Symbol_rank4_and_0(self):
        sh0=(3, 5, 5, 6)
        sh1=()
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=minimum(x,y)
        
        xx=numpy.array([[[[0.12130941623536029, -0.49469011502024918, 0.66311775313300925, -0.90067080459949911, 0.77520092255641648, 0.47692258389921993], [-0.44774676290934967, 0.40513475119892028, -0.42596862320696705, 0.081110578223650975, -0.52668877807765124, -0.83570034166424767], [0.8497061824290657, -0.35378356627280105, 0.71274058244395277, -0.41195205650045308, 0.048472081856204108, 0.26971242925098582], [-0.63685113087260503, 0.1887811819079932, 0.74850973526038067, -0.28038972465302781, -0.12391301780442943, 0.20785199708959978], [0.65585617278545083, -0.64541232491728096, 0.5873444270674204, -0.80595803041469805, 0.48144413253316642, 0.052161702664582865]], [[-0.72010945818385474, 0.85485076596939624, -0.4554196534705055, 0.6163791923127393, -0.9572866128211579, 0.36451647565485623], [-0.69177033568017632, 0.28602215798405561, 0.78006641811257404, 0.0020134512972871388, -0.51271821385760519, 0.78346379569909308], [0.73196357730287587, -0.89135265400148467, 0.33782759758938341, 0.3575179076123427, 0.86200843058591703, -0.92546860282119225], [-0.27955542175802495, -0.28188031203304997, 0.30271554085457342, -0.82094110882924687, 0.74639613344402433, 0.80869098076643464], [0.75402343124540483, 0.21409611647832882, -0.45680819637818448, -0.85570983684227886, 0.34519864061562622, 0.12565631720124371]], [[-0.94010743100338234, 0.90160070420788974, -0.64529207308339687, -0.1128534828284391, 0.88161290511005674, -0.73494854504041096], [0.19753329919764773, 0.31563825294890724, -0.19746296333249358, 0.041119469110770579, -0.037702477686447411, 0.56378766881662745], [-0.23129837194881442, -0.9711345853188813, -0.41984888170710355, -0.69185520274607182, -0.97785140721995178, 0.84207447447247619], [0.22292371624252394, -0.98896898284392476, -0.72441987077726266, -0.006675894337995425, 0.94631667817043841, 0.42655835915499929], [0.28509372544174583, 0.54783059475907225, -0.038957985372607418, 0.9271048689258603, -0.014059931151010341, -0.65319140357686978]], [[0.46461625781765226, -0.063070964596549262, 0.38827300834261291, 0.32011503530992735, 0.011096600807725787, 0.01629449193419874], [-0.74823091834601052, 0.30349703965233865, 0.33863338864322001, 0.46092354199935959, -0.28047979512812526, 0.05190894138116886], [0.42437551356686076, 0.60313188533361539, -0.19214688907226174, -0.98963964394130555, 0.39885865796442932, 0.49749768289240759], [-0.03602444395584059, -0.70625239047036725, -0.25214098188006795, -0.65003821269436135, 0.92698148793681523, 0.65087417953287674], [0.40532693462395186, -0.27386062528934452, 0.97663476448614928, -0.78098324189447155, -0.66418634818465283, -0.66192137626880787]], [[-0.10677447324263412, 0.26717839906698471, -0.12155525456168759, 0.47734564040872707, -0.67382913027349267, 0.44994075154077406], [0.3315805223582271, 0.56329049896898553, -0.26053207684866653, -0.069964019754989337, 0.093042192683364444, 0.04657675732963007], [0.39364174100382865, 0.13792916308296088, 0.19174541909066645, -0.83336200553225637, -0.39024822644958546, -0.99683625491720429], [-0.18807553041254632, -0.21782090697625178, -0.25476014493319865, -0.07051798254202013, -0.18039758320581356, -0.11730854284647219], [-0.52227388309655076, -0.38495573349287593, 0.24076189132632431, 0.22220567845644101, -0.94581816263001506, -0.74336765083314282]]], [[[0.1496525085891347, 0.13188549298766028, 0.59091385074631164, 0.64294460169965206, -0.28932894339515181, 0.16011364244654014], [0.70475572635993888, 0.10688521100191473, -0.17197485869897644, -0.057947275407721932, 0.93172474052758769, 0.71437384920139024], [0.54806116547731154, 0.75530092421875361, -0.23917092335865942, 0.71178399929998504, -0.98756819041076049, 0.27392285374790193], [-0.84118159461398445, 0.68336600551157201, -0.90211778276758436, 0.87351550126672595, -0.32305971876536699, -0.67040073697346103], [0.40664266924469539, -0.99316482081483493, 0.98567391818273387, 0.67895971330152305, -0.085553547496692195, 0.15434887584868062]], [[-0.052183708397565809, 0.41795715347978502, -0.9100529864983915, 0.12908886127432329, -0.11671420435181457, -0.49855473926044014], [-0.95470987789102923, 0.89785994974881134, -0.99342441289647776, -0.92479831058266893, 0.25916393492225676, -0.40617388248950448], [0.2707746524575414, 0.89583274019414305, 0.71686742854313823, -0.85014293858933465, -0.24601538928132038, -0.36567006223529797], [-0.22016851649696689, -0.12682428121618905, -0.26917747204303044, -0.059690364865003565, -0.4758337068545837, -0.23171588519284869], [0.19549948872544687, -0.75453905928392229, 0.33096110841331261, -0.57105839173863293, 0.30458412081925279, 0.77287516192259642]], [[0.93113209535352337, -0.30034684176489823, 0.67595329730288745, 0.3368271786674486, 0.37918166431390188, 0.50452695099047773], [0.60267215976326693, 0.44414524287783252, 0.88688452378372351, 0.70907328574130357, -0.42174614975740377, -0.7700066031208519], [0.15859868371195085, -0.42399569341818255, 0.87731791789499969, 0.16364055523418175, 0.67510581123638991, 0.74337029798487086], [-0.96857217279150754, 0.44499020126188649, -0.016501701465388319, 0.33263443858859354, 0.46200286950753, 0.71339349689450748], [0.12470719720764434, 0.81595844865568434, -0.52393323804980207, 0.42241803424666324, -0.30440130440588331, -0.76808120195131502]], [[0.53600847140415375, -0.58192544583300276, 0.85186824949793372, 0.98149484801929288, 0.0080638438102003107, -0.66407678587165497], [-0.083773655678650583, 0.053681579475186592, -0.064558798647954108, 0.47141441325525113, 0.95392809493314079, 0.38487630742832346], [-0.71102885392453974, -0.63930715661635307, -0.81537223792768243, -0.48726125770590212, -0.23112396297363236, -0.90470867390367515], [0.38882617680594178, 0.84167305241791057, -0.13422965620797678, -0.32041003580112948, -0.49072360323254438, 0.99896118642120646], [-0.046056579547729903, -0.15099698416975316, -0.2355314270306843, -0.42277433139630616, -0.89916641624203764, -0.9152650031240257]], [[0.58363445247955426, -0.11889832252480348, 0.61376719174418204, 0.0027011747312946088, -0.18900145299798421, 0.12141066719933535], [-0.69954916144184964, -0.041015493475131004, 0.36071261513348851, -0.25329654347713348, -0.17118503211690883, 0.33289512426627477], [0.018748951716374362, 0.31993901440655859, -0.98415049064567195, 0.62357017600213949, -0.15052668542673531, -0.2002476177527055], [0.81117069906657235, 0.87612498904872238, -0.38111170962171825, 0.48340099389812052, -0.2393089816410674, 0.70012009396916342], [-0.75321787958978925, 0.62468299590600407, 0.74458967994955416, -0.67042326882979575, 0.74569364392220372, 0.76407541590111117]]], [[[-0.43336249508443037, 0.048197961047595328, 0.2192760071032831, -0.80778884269822426, -0.94366330501622175, 0.75639761129236072], [0.96166128485189906, 0.95943916139216134, 0.1833869434415456, 0.24109702269886713, -0.70667058657941562, 0.27024134911861752], [-0.64390613178916034, 0.35135015970815742, -0.1947715948713955, 0.82743218687776299, 0.14898313756830572, -0.6803544121924554], [-0.74635199391517748, 0.43209813171939904, -0.74568656009848233, -0.30234491366868443, 0.14701420411217891, 0.70921937830651327], [0.37229880889357236, -0.75963991895274963, 0.17782555496701602, 0.53961885402552268, -0.10173395003042907, -0.99170465770854777]], [[0.3037123264160877, 0.21261411776542527, 0.95863931568928407, -0.82565601504956532, -0.78056525744317828, 0.56208308877026503], [0.95300525493987354, 0.21450389541138226, 0.044062910936394584, 0.47798426757809942, -0.45914531974742667, -0.95634501030911689], [0.83661451883801274, 0.26306471636465023, -0.2063078873359212, 0.59298280570082729, -0.188785346800322, -0.083420117164317853], [0.4117641154184033, 0.48618068443490148, -0.26428125123445789, -0.87858863674386245, -0.70596859260048594, 0.0021133554575367697], [-0.011008072306699868, -0.55446325387894579, 0.77503922812484261, -0.80816511547148329, 0.22790912153246889, 0.0014242474707995001]], [[0.60247912484777455, -0.97658845374523962, 0.070249733844002016, 0.44432908404065685, -0.18131740072455393, -0.66044771781957468], [-0.66253147390630929, 0.18244317445634928, 0.58945180461661262, 0.93003708825167442, -0.57315113428989095, -0.79560757575329055], [-0.094933747857099959, 0.30818156122429574, 0.93835989126230612, -0.40163514462455074, 0.79543569495004252, -0.32432652098306036], [-0.70022189609858199, -0.73997025852979026, -0.4373035988812557, -0.01963010788048436, -0.27667841895119194, -0.13854526024126423], [0.75456310328084086, 0.029024403588910452, -0.47157000887756229, 0.58514428934823415, -0.023548063982407719, 0.80565080635376374]], [[0.96633840146192029, -0.9097460575104328, 0.98867264718929238, 0.39061845434610554, 0.28474273482251178, -0.011408713136590087], [0.6349748655366354, 0.40902640807989421, 0.24932104807415945, -0.4344119147594232, 0.51820850561136012, 0.92270371744904378], [0.051768310236909088, -0.82951305753526383, -0.30202088833477947, 0.97672221553735161, 0.33379920391819962, 0.61278691625722859], [-0.28009629807019354, 0.51671483694881237, -0.77176322206553927, -0.20790135145857214, 0.71979005261854745, 0.84076892399769765], [-0.077392123388422718, 0.71241615105468248, 0.25097602221786497, -0.042154837499271292, -0.48476007089031214, -0.72843190905456012]], [[-0.78911299343775898, -0.62556743374888413, 0.84449819514954161, 0.9304919430126013, -0.92987953252183342, 0.21892214984775493], [0.38031641262689386, 0.39276206631694444, 0.23358834578217236, 0.64895824312120998, 0.52137403402496507, 0.84450462004266336], [-0.44654200939215904, -0.29339057233893628, 0.58192764182941348, 0.87846994168972281, -0.65572176301709484, 0.30215671141386036], [-0.74137030616146848, -0.6159144271707595, 0.40982805496144459, 0.44392076266262381, -0.99629981826121705, 0.24313013737981648], [0.63156855966319725, 0.90805195089632162, 0.69583439997774588, 0.26571447325792596, 0.62248607805855061, 0.4376227720602186]]]])
        yy=numpy.array(-0.796100816379)
        ref=minimum(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_minimum_Symbol_rank4_and_4(self):
        sh0=(6, 1, 3, 4)
        sh1=(6, 1, 3, 4)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=minimum(x,y)
        
        xx=numpy.array([[[[0.9438826642388316, 0.2495605197267341, -0.99462652944483176, -0.59568559043044433], [0.87409687712310036, 0.048020408177257057, 0.44257932954040458, -0.29669336976893468], [0.56969418931662874, 0.40421281197015979, 0.77193087694273221, -0.049159774731251327]]], [[[-0.87000873673345791, 0.11150069411483066, -0.13079003625267926, -0.99251599083172692], [-0.996492388191345, 0.14751916025831791, -0.1926865272109286, -0.66293122189792242], [-0.3977830909884108, 0.15453639347515957, 0.20536531416313508, -0.27094267459406796]]], [[[0.41285136614455142, -0.13444081086099424, -0.28833481301680286, 0.76340269473162503], [-0.1696196466011386, 0.55299314212219364, -0.30293797301315339, -0.78901351115180773], [-0.86989920444609359, 0.032406641869980879, -0.54408912852195934, -0.96532070798090119]]], [[[0.44112259129590337, 0.99021320951475333, 0.20004401861161547, 0.31869811666655168], [-0.9081610901395214, -0.27425113894078978, -0.30562186301084071, 0.42658659601703941], [-0.76096789396916287, -0.20105633273719703, -0.28279875594861403, 0.22856847701219252]]], [[[0.76665874285826741, -0.79590732819803289, -0.88089866311422926, -0.80781373275498125], [-0.05618754827139294, -0.016972443648347157, -0.70739572892521441, -0.30367220413259743], [-0.16873088120759627, -0.61171530491847714, -0.90167550407813657, 0.73552706818044622]]], [[[0.2532822812600537, 0.9377934555614349, 0.22163921316110136, -0.76444697757954172], [-0.54001922774240718, -0.38352833562064625, 0.35829852511057991, -0.49848254226431754], [-0.74224288473666933, -0.063811748129915635, 0.8863653615032876, 0.72630900994078695]]]])
        yy=numpy.array([[[[0.61500038757980091, 0.32924063572582107, 0.30647704719453883, -0.85883900574764627], [0.43561643309212217, -0.92489555864416606, -0.35171348877236874, -0.3314814157476409], [0.57591638573973825, 0.71986227109350809, 0.9135912539769202, 0.27416865985042205]]], [[[0.17906760676407885, -0.5198762567354196, -0.6021688230925788, -0.71619331359153815], [-0.4532856130422529, -0.21679739833515854, 0.67583546746157963, 0.41491292103828159], [0.56451506614849767, -0.35166735105700386, -0.41985799375689004, 0.39966361342267365]]], [[[0.27408293405921946, -0.64656904574720508, 0.5015305199881539, 0.83969944006643304], [0.50417012448353771, -0.24425444518827466, -0.76626696466440758, -0.0049445343601510761], [0.77459733966207689, -0.58455716497155974, 0.080972124321432082, 0.33337030075919283]]], [[[-0.54122061015020062, 0.76523805025587532, -0.39225097174139867, 0.089236264090692963], [-0.57704690148101134, -0.015488974210261963, 0.26518161885057734, -0.80808127698228005], [-0.55427660328283013, -0.14373330760602476, 0.19791954722992067, 0.7943591651685129]]], [[[-0.50752112559544971, -0.58699010560388865, -0.20998520742960425, 0.80989845666604476], [-0.6078312631318048, 0.31084845057460475, 0.13372584053787651, 0.81662675090153192], [0.41790077275121451, 0.32804108918766683, -0.056436010139421899, -0.10909960745539249]]], [[[0.72860471723213105, 0.10886392793475297, -0.4053489793854852, 0.466829787485044], [-0.30993347351111233, 0.5693396749613826, -0.39431121952659276, -0.24621403197187286], [-0.71375176694159981, -0.082526599999229067, 0.31460310284068327, 0.068683153372442129]]]])
        ref=minimum(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")

    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_matrix_mult_Symbol_rank2_and_1(self):
        sh0=(5, 5)
        sh1=(5,)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=matrix_mult(x,y)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[-0.5807217576549224, 0.1940046345331814, 0.11026974349595298, 0.95069025306283028, 0.45077028605161096], [-0.51643481823717763, 0.3186436814397513, -0.66633051830899381, 0.46246462378421871, 0.23702827500456647], [0.72274695562110192, 0.81383810577719173, 0.69561698417322027, -0.49904309420884041, 0.74199885532188325], [-0.78248958531399104, -0.71357081455014137, 0.75493536205266065, -0.46111402242911281, -0.27193471600606989], [0.17893604816296294, -0.35236297572340169, 0.43399780860165293, -0.59748110271173127, -0.77632777170555922]])
        yy=numpy.array([-0.79447184260638193, -0.63226317536776189, -0.38122138367328762, 0.38282310183062096, -0.066818376427914439])
        ref=matrix_mult(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_matrix_mult_Symbol_rank2_and_2(self):
        sh0=(1, 1)
        sh1=(1, 4)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=matrix_mult(x,y)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[-0.14040539684323528]])
        yy=numpy.array([[-0.99421538925453468, 0.89299255639999364, 0.13492666167263478, 0.012948471836862874]])
        ref=matrix_mult(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_matrix_transposed_mult_Symbol_rank2_and_1(self):
        sh0=(2, 5)
        sh1=(5,)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=matrix_transposed_mult(x,y)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[0.26573918304892397, -0.09067965666631439, -0.51911213076097851, 0.30344984756845395, -0.45816664090400705], [0.8320081677505573, -0.57671101880417397, 0.090667274431242673, 0.59137294755291547, 0.85382954695892899]])
        yy=numpy.array([-0.67266024057207274, -0.97848730512735327, 0.80479504726677575, 0.71389436092409309, -0.64762935666045673])
        ref=matrix_transposed_mult(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_matrix_transposed_mult_Symbol_rank2_and_2(self):
        sh0=(2, 6)
        sh1=(6, 6)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=matrix_transposed_mult(x,y)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[0.35335191618539019, 0.72053971466104039, -0.98001552371436595, -0.40535789826967639, 0.32219143615252532, 0.63725460515339249], [-0.091053092513137202, -0.85964965605855914, 0.61083863914921754, 0.31144520823428978, 0.38172361099768803, 0.00059243376940543158]])
        yy=numpy.array([[-0.42173776173778643, -0.89508774922361001, 0.76077271917765588, -0.39159609856831534, 0.82825521064562913, -0.077493579282996938], [-0.35864805761947283, -0.51267216051181852, 0.73162937827330343, 0.053918283198105987, -0.59340770094699669, 0.44170958342562883], [0.71853165118938689, -0.041305245936298363, 0.41102931349882255, -0.96528041322264624, 0.46824863839311948, 0.62804385943891727], [0.67361113041305343, -0.84234790389004544, 0.63084742982418729, -0.58845015139966916, -0.5353349677890713, -0.54486535853324636], [0.67573383284329669, -0.29189367932074783, -0.61283654939707888, -0.77849588708633477, -0.15672537874614156, -0.25621599811625551], [-0.17109233800351054, -0.28566429196363408, -0.85536172636572294, -0.73554514519060654, -0.71653132675181985, -0.51614094845280367]])
        ref=matrix_transposed_mult(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_transposed_matrix_mult_Symbol_rank2_and_1(self):
        sh0=(4, 1)
        sh1=(4,)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=transposed_matrix_mult(x,y)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[-0.86095940430134221], [-0.63280786371547726], [-0.5726868590741061], [0.70926693084409154]])
        yy=numpy.array([-0.4760557457382899, -0.66579037714866951, -0.92218609875940305, 0.93806364012726817])
        ref=transposed_matrix_mult(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_transposed_matrix_mult_Symbol_rank2_and_2(self):
        sh0=(4, 6)
        sh1=(4, 2)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=transposed_matrix_mult(x,y)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[-0.64648588045828803, 0.87767840662074459, 0.24379987452846219, -0.86919842071287512, 0.57507393715896571, 0.74466901595694002], [-0.77338003023366775, -0.10621552452111871, -0.0012413492075700194, 0.85973503614448221, 0.34687737553426512, 0.51809471028688292], [0.79136809975098976, -0.21605425129483224, 0.36141200138664398, 0.23958469807062399, -0.26327154982046763, 0.66288681112404979], [0.44992133904861098, 0.04211213185565188, -0.14078462365238731, -0.98963520037060082, 0.15755281922632403, -0.01437403192252118]])
        yy=numpy.array([[-0.40957193213729592, 0.62259699607891861], [0.070364664340261118, 0.14752204713604788], [-0.0092961447096313599, -0.38780910370505195], [-0.9397894760171992, -0.30692582934070844]])
        ref=transposed_matrix_mult(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")

    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_tensor_mult_Symbol_rank2_and_1(self):
        sh0=(3, 5)
        sh1=(5,)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=tensor_mult(x,y)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[-0.83804349145850643, 0.73232484529659847, -0.039487340111552749, -0.89582764948592164, -0.71481989728776996], [-0.9179920613816257, -0.56424918495432053, -0.0549176483963838, 0.73135394186359282, -0.46190908281832921], [-0.55499972266469721, 0.31353051203583604, 0.15650163268532546, 0.77095627351921348, 0.55684088138621735]])
        yy=numpy.array([0.90629012143900689, 0.2462362819241426, 0.5392966272774109, 0.43639291809652248, 0.071163488432884892])
        ref=tensor_mult(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_tensor_mult_Symbol_rank2_and_2(self):
        sh0=(5, 6)
        sh1=(6, 3)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=tensor_mult(x,y)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[-0.58319185531183271, 0.44786084523903846, 0.1599584442989026, -0.41849697092642413, 0.84408310444581769, -0.76184588548468968], [0.035140045123768671, 0.77210762092552865, -0.0030795589276180202, -0.79085239333185586, 0.86387924376361203, 0.84779393956134519], [-0.76876946011479652, 0.11213784250080749, -0.32879148904926181, 0.58060340835992497, -0.28386086485129591, 0.61925755267024041], [0.10195637018130843, -0.059957937926809812, 0.63312120788163462, -0.81680612440685341, 0.82882239819755243, 0.62419116233154259], [0.058733367511780266, 0.70001238705364721, 0.20708100245978511, 0.7162655799223292, 0.86273816664496072, -0.0055033904349373053]])
        yy=numpy.array([[0.83147127591724446, 0.33756100075226203, 0.095073349815957942], [-0.17238786044686272, 0.15143343967169254, 0.076612852367598183], [0.71012371873672286, -0.15502506024311491, -0.16191303429723236], [0.33230754310926947, -0.028477001325667883, -0.1440299005903245], [0.64652980840167107, 0.42765445180082295, -0.41465614562372566], [-0.85497384271524512, 0.23429381105655844, 0.47300039607964539]])
        ref=tensor_mult(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_tensor_mult_Symbol_rank4_and_2(self):
        sh0=(2, 4, 3, 6)
        sh1=(3, 6)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=tensor_mult(x,y)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[-0.5627883578448325, 0.179347130158237, 0.27534920374580896, -0.49961456328549514, 0.31548262810312422, -0.93518454188915823], [-0.25087455608427089, 0.13745484903975247, -0.58655488888134766, -0.012050739694797308, -0.062885245829013003, 0.63621178932311628], [0.50042028950225048, -0.32207924111009256, 0.06337486620613908, -0.28843663474425507, -0.96290253075942278, -0.9706059192605403]], [[-0.47870677924702765, -0.99062673476489116, -0.24411531616870263, -0.52591810462945099, 0.45169363302141674, -0.35650953862148471], [-0.8306839652817779, -0.72658852105219229, -0.06856095804487361, 0.94633506636889009, 0.52207614257441204, -0.68130449203232879], [0.17372330194470487, 0.8955485077184453, -0.92913404734214433, 0.50636201764151467, 0.72393828434742491, 0.3410201854153545]], [[-0.94748024081394822, -0.62547413316157852, 0.61608633083696507, -0.23810980891864775, -0.54974520808121641, -0.51861863639366779], [-0.9559829926376453, 0.41250358715892155, 0.28650573541975999, 0.90526618840068607, -0.75888575908776756, -0.0098616281288022023], [-0.039433842770614458, -0.87726496707206647, -0.58498232514992021, 0.79135336077660323, 0.3838466862294776, 0.36365128945965641]], [[0.58613214793458912, 0.11677696371353452, -0.034293737226628096, 0.70260355346401004, -0.46075425863910024, 0.17010835901590182], [-0.036918587880492959, 0.24888023291790007, -0.72722893232339092, -0.50374441993233687, 0.14309204337556469, 0.25881169025963557], [-0.32652146150939343, -0.8341132015524173, -0.58811178786857088, -0.53991629584054479, -0.15311870604030808, 0.61532385862636207]]], [[[0.0093587472823357665, -0.82529747194768555, -0.64122991374882909, -0.43650937658050593, 0.083089387657978131, 0.62305376230383058], [-0.96363159892315764, -0.64619062056021792, -0.56518237163044316, 0.91538049620702644, 0.32581342171777838, 0.59216746806219067], [0.18605928155981721, -0.34313117503887969, 0.77962886911037454, 0.78253310839333801, -0.48690325340345875, 0.37445147322035899]], [[-0.78471070439545398, -0.87035002840227005, -0.32221782525544351, 0.68603941834325766, -0.10554601599406732, 0.11108152032879381], [0.26259008362548708, -0.011437170403533425, 0.75115467973874228, -0.2823065424441602, 0.043536503370013691, -0.67748423253873868], [0.68617907399596501, -0.56329469746471239, 0.60731716013432635, -0.65394346716611684, 0.72956033889502514, -0.70360193350214262]], [[0.25706279672539711, -0.13572581295200847, 0.42670778104294937, -0.67864891359049384, 0.90170426312202734, 0.054291679845767327], [-0.95991906566986751, 0.5644089969690147, 0.19336380485190552, 0.64778752779313664, 0.31218860863210218, -0.97695292183298821], [-0.028821666100414367, 0.97730537808358475, -0.61936657621617353, 0.70159697467750548, 0.78692953793068177, 0.047995883204329237]], [[-0.47710151654804434, 0.66284139822369026, -0.60531585965554879, -0.33411976418476153, 0.56948527538930027, 0.68683102111686711], [0.82730548435943052, 0.72317875853167712, 0.47607119624897276, -0.42765503829701568, -0.81694612603379002, 0.83586779894129126], [-0.072380471393789669, -0.1172126667935971, 0.86591604684119194, -0.96670646510124247, 0.26491947598837773, -0.49531696042619999]]]])
        yy=numpy.array([[-0.65700500769388426, -0.25806067967967761, 0.4186517608560123, -0.33838347442280736, -0.031157230497691257, -0.94299895340715167], [-0.89586965473487634, -0.79536361468171535, 0.95739827485998874, 0.16691661180583672, 0.93547739125079654, -0.10455147052477809], [-0.24468180384485128, -0.44546049319612768, 0.79358199863161993, 0.089895721981451127, -0.18498223206422626, 0.44478809895368787]])
        ref=tensor_mult(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_tensor_mult_Symbol_rank4_and_3(self):
        sh0=(1, 3, 3, 5)
        sh1=(3, 5, 1)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=tensor_mult(x,y)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[-0.97132225907459069, -0.58970580913643644, 0.91102824277930483, 0.94057547791374407, -0.64632056335511945], [-0.36106615860464664, -0.17451360574261021, -0.36344672134868294, 0.16801431115688992, -0.37784225053340781], [0.68504235183332396, -0.31421956150045904, 0.8991837359769066, 0.070754366673845936, 0.10671048129009408]], [[-0.67890043470485284, 0.20525983717705021, -0.20808469308399324, 0.841425824035402, 0.41360362588502197], [0.70624831904772956, -0.49423153743022707, 0.79804309824033748, -0.39764647921487595, -0.21350965750349848], [-0.0024776414112661627, -0.60992281225780287, 0.69702338477457615, 0.94256611159063275, 0.13277049927071882]], [[-0.79966683807269612, -0.85135636384924007, 0.24612424314704984, 0.24181680056252342, -0.81167860347324838], [-0.1895352501859231, -0.2896225509550201, 0.1152051981572535, -0.44320143977890991, 0.47408117125595473], [0.78594700690709662, -0.46215519956712647, 0.81596798215577349, 0.41115267162575786, 0.95593243719864951]]]])
        yy=numpy.array([[[0.15803233027804509], [-0.77113272688845957], [-0.43334936176970618], [0.57636202015303173], [-0.90145577611996552]], [[0.54717986531830243], [-0.24471930567546396], [-0.2449523101653206], [-0.32086153250137994], [0.1674536484606115]], [[-0.11125487180806304], [0.1763802411200579], [-0.76248324321290384], [-0.18178553528993713], [0.74075260562339662]]])
        ref=tensor_mult(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_tensor_mult_Symbol_rank4_and_4(self):
        sh0=(4, 2, 5, 4)
        sh1=(5, 4, 5, 6)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=tensor_mult(x,y)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[-0.38377608448363065, -0.078716567402552728, -0.45341674555738387, -0.80799551740359221], [-0.15678009363686618, -0.70369489808726016, -0.20988422689670672, -0.70536405161189353], [-0.6631826241127472, -0.033946166262202482, 0.20524627097707904, -0.38798381338197774], [0.49449245881782722, 0.30367846503203588, 0.49026191465323055, -0.82662359099878002], [-0.21309879916896257, -0.56460254705137181, -0.28360522043223657, 0.043788897084349632]], [[0.11615695044073493, -0.36594054757855288, 0.54487315991837493, -0.79245311659491868], [-0.27493701132852832, -0.69124921256394289, -0.3611314512320023, 0.99135834029482783], [-0.64644184798366289, -0.093738202828608896, 0.92445567760413017, 0.58160235253753578], [-0.23860161183554074, 0.18848898164955474, -0.95840063489079985, 0.42885376043996049], [-0.49808808497005841, 0.14432141254241881, -0.8608646042079322, 0.6292636718408009]]], [[[0.36478772807987303, -0.97531424765056718, 0.58759558506200338, 0.8542641535983202], [0.50301019334231234, 0.83475633750263278, 0.67289746147066976, 0.029816377835301777], [-0.45175472049140653, 0.90381582088871726, 0.71210851874577719, 0.69157958153343757], [-0.98613281148672693, -0.58377539801141221, 0.097831909974858133, 0.11679640717200868], [0.39978411922976997, 0.30172565497348058, 0.69941039214696787, -0.49903940148797976]], [[0.1587247608026765, -0.4658741196794407, -0.85712390010422768, -0.9488299910305642], [0.078976071432801165, 0.40561417332312555, 0.99186974514467829, -0.95781690224821392], [-0.79644132350197405, -0.79908173909041658, 0.46822328856182605, -0.41206113930499511], [0.00055293582983662048, -0.055516560082836897, 0.47795922525303158, -0.88905728089774905], [-0.070129948046000479, 0.67284726944246609, -0.53553017115204482, 0.35725112175929286]]], [[[-0.66469838991409125, -0.73642426462867672, 0.27633766245101232, 0.46965869117174575], [-0.48942459199329003, -0.026982415033139917, 0.78057772623826893, 0.97991033761443136], [-0.28942515505416222, 0.61631164986489995, -0.74288898187184871, -0.058890642196609777], [-0.35436482392615276, 0.6780354136353357, 0.40727353353843077, 0.90984447223372], [-0.44007367851069201, 0.38108799428723517, -0.93545770895636116, -0.59252037304389393]], [[-0.944102425159143, 0.17957217223518307, 0.66690780172579611, -0.71210432594866502], [-0.67542983484525765, 0.96745670250692251, -0.64811202126132561, -0.041997240789470203], [-0.34414864900622266, 0.4595938051802384, 0.81467617016610827, -0.33579527240732099], [-0.89175600608343553, 0.43596224327431732, 0.22289379483033045, -0.8057016059812272], [-0.99051918631631297, 0.79666568162109774, -0.91102291903128685, -0.7257682567538406]]], [[[0.85077824474290997, 0.56731907618677369, 0.77381213893128442, 0.83622019267001257], [-0.20208542208022506, -0.80712434505855013, 0.69302148489453819, 0.56442736805786331], [-0.66206025833550508, -0.81456051461671319, -0.61423264310334025, -0.2496119893532962], [0.39243213295088708, 0.18884635053376053, -0.074930557816846877, 0.46415121695861195], [-0.88365007459951439, 0.35901620477763552, 0.6182071521542245, 0.21583606506387598]], [[-0.63500286092961722, -0.85827893718766179, -0.94734956801521508, 0.62445261707937405], [0.30229575382236207, 0.20669154443406512, 0.90783061839495161, 0.53006691014735074], [-0.75704529843600943, 0.88472565498880917, -0.42562739962819318, -0.79757808872691438], [-0.38279498107411203, 0.8408445697320186, -0.78997317509657194, 0.85559215386343546], [0.17637392942280505, -0.41891749122021849, -0.21045327645630452, -0.69398157959743512]]]])
        yy=numpy.array([[[[-0.6387310551624803, -0.1245684373622451, -0.46097832842485231, 0.10700499936673302, -0.27646284756295314, 0.34516622701242761], [-0.58322878208808238, -0.012253573823820973, 0.9208339516900701, -0.076235275541589598, 0.31309945970834274, -0.58384899426182568], [0.30563559689571362, -0.54695881749627318, 0.48307197873081553, 0.046662455548062365, -0.90732136662166352, 0.22919652266342827], [0.99151939790059251, -0.56827647023345107, 0.019636817264364836, -0.78173367618853096, -0.02101885749801391, -0.36243620661678277], [-0.98080513958932913, 0.0071025788022598402, 0.58788749927864603, 0.74131041499367845, 0.7102938430303618, 0.39193873872111906]], [[-0.08021675584514365, -0.81125609710236679, -0.30861724609016394, 0.051438646505533203, -0.42696950089193031, -0.4299212955193632], [-0.21001521678819768, 0.97855805173034049, -0.97880960738520906, -0.018991781363782545, -0.89042765152423997, -0.72396182755662286], [-0.52668019129279808, -0.53948331640310165, -0.46849015963456586, -0.67420598398468323, 0.99400373239788364, -0.69166068831731242], [0.4777597471587316, -0.41438617531752309, -0.055700610660936567, 0.97507842594342264, 0.99894179508967285, 0.32642171963752631], [0.85576262986365226, 0.18506367741931173, 0.89300901810207867, 0.18704089942133373, 0.8646558402499902, -0.58376452162567394]], [[-0.66898639931616488, -0.28385522351848724, 0.42405125725840009, -0.18492611531741421, 0.44384785522623349, -0.61924608959244809], [0.088664316949683908, 0.88693979687179869, 0.83575218741983526, -0.42846196922413204, -0.40695508943738834, -0.559986995329252], [0.97461766889650892, 0.3992302710994331, 0.017349128739033715, -0.8204011032118288, -0.0060439182787777046, -0.42731292543584676], [-0.20871400026591602, 0.60609488540984535, 0.2766087257277503, 0.06043348716489727, -0.94489266991598719, 0.49847949434187688], [-0.78237648501486023, 0.21622029529814757, -0.28680855009365813, -0.24766128976560031, 0.29624008176460359, 0.78560950562288334]], [[-0.9489897436469148, 0.41648515954131304, -0.18906019595447687, -0.8173499200829617, -0.82101720935217815, -0.19126410793345716], [-0.36016184523105932, -0.20148534898567161, -0.44598583409498183, -0.3850312273007277, 0.4658421999942095, -0.81512807482165739], [0.60569318849804876, -0.34215183943148619, -0.98317645760611616, 0.77553558816689971, -0.8869117261568138, -0.9737556544680368], [0.49332189377320734, 0.53549900358801383, 0.69448653802464433, 0.80169730060513245, 0.66324354214553116, -0.30357946637936473], [0.34679064995858266, 0.71170723050099216, -0.6646749730351269, -0.86344534101341575, 0.2862123026018657, 0.2915503689726644]]], [[[-0.66967950201874649, -0.13660595233438055, -0.79595031470513922, -0.043749046397861147, -0.12951391867346063, 0.8668747803277066], [-0.85688187939534344, 0.20696153320746835, 0.068613177564529337, 0.30321004503364324, -0.00072422229320601161, -0.32530298588399753], [-0.35874644308128301, -0.85732436412992929, -0.53396243673476707, -0.22811288907985672, -0.79141444360259539, 0.31135805235109859], [0.82208727881823562, 0.18152320881713879, 0.48915777569974983, 0.98703743956409751, -0.56940544682628524, -0.19971140444217084], [0.16981770292483311, -0.30315418544331996, 0.42404043756695931, -0.9031798560494555, 0.41020975067672794, 0.43012294844409849]], [[0.34032422651597938, -0.81314728425813154, 0.89061979294613325, -0.50947625721919421, 0.2203575052637925, 0.1009920180175532], [-0.88438152768674261, -0.058669843700287716, 0.75882391678830863, 0.5774173510642131, 0.78559736807655334, -0.69268553600904936], [-0.84310001574589122, -0.33389702308614244, -0.45722320796606519, 0.72866937057600834, -0.93004579400763476, 0.072185583745554727], [0.84305431857730029, 0.66609738099996352, 0.16793488543416712, 0.59507870056743073, 0.071888383271182521, -0.77612146209285204], [0.74313410319053652, 0.23901715723737005, 0.98096534028608051, -0.88413790342124909, -0.13296530908116644, 0.44846897304738609]], [[0.057244742805872884, 0.62877044742908739, -0.22363272709097615, 0.14388022509779463, -0.098590513778036071, -0.93244703980886356], [-0.87509273671028898, -0.98972320001918246, 0.14422345289498084, 0.50393542372639932, -0.0076442908939737819, -0.34390491160534498], [-0.21633810422866406, -0.95833837073327, -0.14338227932039094, 0.32359495570035257, -0.94579308682745622, 0.33895422779091211], [-0.52761572821622149, -0.6755867937517579, 0.90459677680830386, -0.17056426299276795, -0.30653718565170629, 0.59140929522422403], [-0.89827925483218229, 0.74515762669619856, -0.21595701418401436, -0.68837959869092624, -0.95079239363244628, -0.84612499777781647]], [[0.084143171508667125, 0.46193236765969892, -0.59105048676563166, -0.51936529468341508, 0.9415374354862871, -0.20628152259058807], [0.84291822746928036, -0.20344756709140355, -0.51221019990291872, -0.64040686036239203, -0.49326095499875811, 0.11896557524643669], [-0.42519854372285248, -0.34033245452432537, -0.028328943120691896, -0.80573061216600061, -0.47080947226128878, -0.39185297650880879], [0.5404990443046267, -0.98970147452148649, -0.70326559671813138, 0.60677193116916239, -0.94724901577472975, -0.5297115491663591], [0.46479946548224627, 0.54355305462263348, 0.39381710549187376, 0.53162630900307239, 0.89291592867903735, 0.55520039803580223]]], [[[-0.75278368003896001, -0.069694023703121166, -0.26170059007293056, -0.16861528894325151, -0.6464977834158292, -0.59458888466883475], [0.79716898774184575, 0.40369098424941785, -0.23916834922811314, 0.26183685023149361, 0.10807386316905809, 0.060907400725998873], [0.35213385761137372, 0.3133563762206335, -0.85877408378855757, -0.30650620026993547, 0.29223584414824777, 0.22108426818688742], [-0.72864408304401218, -0.26960661550174025, 0.17263163534869963, -0.77425512563018861, 0.47088081195899245, -0.45096069168116348], [0.33533688034266307, 0.50928229585120666, 0.70826875293405189, 0.25105575082102516, 0.33367098092942782, -0.53518089634191646]], [[0.36349569833775885, -0.30899826635980698, -0.97496758900190428, 0.39593837401517762, -0.85105480626296326, -0.41390798212818591], [-0.23474533996499347, 0.039329777698746904, -0.9490461195828348, -0.39487844456601673, 0.11206256185112395, 0.3598954656122384], [-0.64557066869082624, -0.72830506486294944, -0.11194861223800823, 0.47941097653430043, -0.046630550375467372, -0.60143793020376246], [-0.065350469932514255, 0.97500559523932995, 0.84035596746292929, 0.62557560980627414, -0.78812802299543105, -0.77305315799742957], [-0.56457234268709322, -0.80483956026424552, -0.030149468189834439, 0.2959552867552131, 0.21751459077092905, 0.93456543562836725]], [[0.96140723526187655, -0.1981728090028656, -0.74712836051926179, -0.76135347030429967, 0.57021166302366666, -0.053774427069607444], [-0.59398520804296662, 0.32584538692865062, -0.6316112388296049, 0.087291508135097118, -0.7676430317329539, -0.73047011458379374], [0.41653400144826302, -0.012550359200897976, 0.10142500368479856, 0.49941695420491916, -0.40861008591333481, 0.34462950698051253], [-0.50697798519909765, 0.18211850384560191, 0.12024037587488889, -0.96125049190108403, -0.41079774302514527, 0.52720218083399062], [-0.42540858638338119, -0.82980055874512004, 0.45278580974106486, 0.11795195579200968, 0.41670330191861682, -0.69547320223970832]], [[0.60240170792275261, -0.88391312514452114, 0.56079329249809806, -0.45108446419645709, 0.57427469332293923, -0.20001027493307344], [0.22234692679909873, 0.52667282659784864, -0.6699628492340135, -0.031037031457340047, 0.15027394126280136, 0.57356276598818612], [0.97211897065361641, 0.51746310750126079, -0.3306595445542595, -0.80094838560373915, 0.59265073418973002, 0.3102757673375538], [-0.54730387520871493, -0.23837021686249882, 0.92707519144016715, -0.84915598025150141, -0.26555244858732219, 0.071787404232572127], [-0.70878486864130563, 0.64429560788588924, 0.79120346485209203, 0.15879488835714173, 0.46486286399392052, 0.87906774598123039]]], [[[0.82675173385821665, -0.6469045177287216, -0.92751598570341787, -0.72273116746368316, -0.011410266721519902, -0.7739450284467515], [0.39723306945673631, -0.00047753431850949823, -0.017732913790588833, 0.8608655749100913, 0.41146251554181079, -0.028844984925184614], [-0.42204474481681231, -0.25965828770256683, -0.85090324238620907, -0.36842297845276417, 0.28458795266895454, 0.66601517752766881], [0.76123349035158649, -0.15766521651771392, -0.86682895508860058, 0.28409995790767062, -0.25061669288012145, -0.31822380875479372], [-0.53934371378674206, -0.39721582637548614, 0.326474013861344, 0.39245436642598097, -0.292542237040472, 0.04220974028975788]], [[-0.2933128038345767, 0.82824752182895911, 0.96388882310677859, 0.98364252424931542, 0.98327204618861619, 0.78049474020616239], [-0.7584960768768183, 0.30792878115339084, 0.076530601639201556, -0.57469117904444955, -0.15803625847953873, -0.92923689843617696], [0.81684105664836282, -0.58293869851767588, -0.22117891827854175, -0.90197484777413339, 0.56707793973592358, 0.58649772954880786], [0.086279617427988287, -0.78205981595054208, 0.75819658298621162, -0.39651630679341232, -0.14125953467321928, 0.34138638192427639], [0.88544699230846891, 0.55416504808623657, -0.86683634651370101, -0.070605132770537482, 0.16543980827816407, 0.070962076127255358]], [[0.063251189400982399, 0.35021000251605772, 0.14984767962964507, -0.11763672863772112, 0.018227032446955338, -0.41012571288335065], [0.21603724498573684, 0.61543931823864129, -0.68076946393829507, 0.005068485677920842, 0.96952348286640588, -0.53946784981780227], [0.068426465418539362, 0.310419818134545, 0.88914453336779253, 0.99016392960409916, 0.79746046438023899, 0.75089274028580033], [-0.97847938890356811, 0.51518856836554261, 0.21203186675611718, -0.17070292924515074, -0.58473325759309924, -0.38208994859224865], [-0.87777932275621406, -0.51570647122763291, -0.9921082811893791, 0.82480854198086062, -0.10317600139178107, -0.2046513355991133]], [[-0.8239696297044139, 0.22518451730645639, -0.66839448916538857, 0.87021638593373773, 0.23090117570784652, 0.70038825381592296], [-0.35967299142993947, 0.39405100200782228, -0.18203355125057152, 0.16443147433741467, -0.17390288077931348, -0.93132111259504602], [0.13145768759278398, -0.64203731359672034, -0.79966700976166605, 0.0092178302876793072, -0.47105213140565483, -0.3337806012449045], [0.8079888179661745, -0.85721793134727542, 0.458587762766969, -0.91656785143960096, 0.84770987026758005, -0.44902244812243453], [-0.010209902375462265, -0.26238018776714878, 0.18884911481135047, 0.94660617735464658, -0.38970998776426002, 0.63940400564885591]]], [[[-0.70052488766142273, -0.4690599833249125, -0.93747679684066854, 0.66510715213769589, -0.52413945301628662, -0.710048790905216], [-0.95565304215701774, 0.85558315088234171, -0.56432435990224628, 0.14308407802795831, -0.51545428544280658, -0.11712214205903582], [-0.20850783946519291, 0.79102805269902832, 0.53130918445955477, -0.26342135807309441, -0.68896754131223825, 0.52515714663738566], [-0.037635352788426779, 0.71129859535108442, -0.64957685898742978, 0.34298242227401832, -0.26455137752629843, 0.080977401304310304], [0.92404669896845104, 0.6197157224406038, -0.57366527400845979, -0.85031684643007077, 0.21493616152158213, 0.71443074229196246]], [[0.90255998159145223, 0.51118097240949067, 0.90580814130530984, -0.63462063303251526, -0.96377110825698176, -0.58288227556486749], [-0.85340460452785916, -0.75013699309998882, 0.714936400298819, 0.71429312400938882, 0.15635227493381509, -0.068777226515894352], [0.38404014500491446, -0.7484555477159307, 0.30106633314994258, 0.84841153754494414, -0.74363690888074285, -0.17468296941091754], [-0.54655329237835204, 0.59659034938870437, -0.84969476421884615, -0.53332223849863092, 0.41726447844660286, -0.53559965050630054], [0.02246815120926704, -0.18043498164999217, -0.82386718753943722, 0.038851666987641087, 0.93734247399760018, -0.11686155659318787]], [[-0.5553419327381639, -0.26234602835861054, 0.11098892549906614, 0.066583756878081823, -0.50095799850889433, 0.33909989877696023], [0.095855744255329833, -0.64834235179967559, 0.50526941891049826, -0.50308822674671694, -0.89194300108683477, 0.84183611710460493], [-0.12063379330466573, 0.88748770892358375, 0.61468614598897298, -0.77009039740680896, -0.064511701360063345, -0.036882661954759977], [-0.91284564038045501, 0.38116987443144912, -0.088354017526079964, 0.40905749013349535, 0.18704668254454515, -0.95087088561220789], [-0.34655107961098786, -0.73726916837861256, -0.68599480361926313, 0.25610359946996719, -0.75591084194653413, 0.39387570760932111]], [[0.37010402010300036, -0.009258699677647364, 0.33635143257167655, -0.31667179315901683, -0.05542547112581464, -0.79324876988634907], [0.73391118596076743, 0.14486157089685525, 0.37108200524160484, -0.21313902180238498, 0.46427207254293812, 0.085552151152604949], [-0.30665894922320036, 0.30420445520387451, 0.1588453320838179, -0.79914522433514024, 0.076289877186551447, -0.95750481769732843], [-0.26581676039076774, -0.21298781565711966, -0.86351513623482212, 0.0019636643051881286, -0.98066361959368153, -0.075193475776914154], [0.53959127869313028, 0.41181354718719243, -0.14663754315074584, -0.29281460149263205, -0.46053811884149631, 0.52256506802705505]]]])
        ref=tensor_mult(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_tensor_transposed_mult_Symbol_rank2_and_1(self):
        sh0=(6, 4)
        sh1=(4,)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=tensor_transposed_mult(x,y)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[-0.74184278438425344, -0.43722499374477453, 0.54671842154218875, -0.96888634619295], [0.062853320119935496, 0.93350416068310782, -0.97121475311589034, -0.15813152346796966], [-0.16891835304302183, -0.36680699853719645, 0.56636323402760391, 0.29601803768437884], [0.65735948770199948, -0.027061019678721765, -0.70142680845249572, -0.65424729277553761], [0.97700669300228538, 0.48809907330381752, -0.4577898965610554, -0.43706287577082881], [-0.15673874818570588, -0.55353249040124486, -0.86465191062720659, -0.6407164044917677]])
        yy=numpy.array([0.53961741318287437, -0.75970993220342109, -0.74059961236086558, 0.15216735307337026])
        ref=tensor_transposed_mult(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_tensor_transposed_mult_Symbol_rank2_and_2(self):
        sh0=(1, 6)
        sh1=(4, 6)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=tensor_transposed_mult(x,y)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[-0.43476689035710692, 0.085551040945417878, -0.45224398629287244, -0.87258584294904318, -0.46160240598045044, 0.7993819714474717]])
        yy=numpy.array([[-0.22303927749771435, -0.42323867862113218, 0.22719674757502673, 0.15873909180754664, 0.89281561521345676, -0.50638321204123304], [0.33565793657392273, -0.40159697281226658, 0.51454193696098915, 0.86891152289992735, -0.38146344602852356, 0.9385720426998132], [-0.32479715109088758, 0.28257423311444207, -0.42718757760216208, -0.72847854991487737, -0.77119185291617454, -0.46988545687789762], [-0.61500990207323514, -0.86010343558856905, 0.58030156478508377, 0.77870610701031917, -0.60212597820304103, 0.29051357741755113]])
        ref=tensor_transposed_mult(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_tensor_transposed_mult_Symbol_rank4_and_2(self):
        sh0=(5, 2, 2, 6)
        sh1=(2, 6)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=tensor_transposed_mult(x,y)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[-0.9940037420613097, -0.33361798742887427, -0.049912850833570888, -0.34570288167131946, -0.020495392417615221, 0.42745704767173631], [0.59145403000086372, 0.74552796142021771, -0.28649627661533272, 0.92266776087599434, 0.70275004279656272, -0.026961244313562505]], [[-0.047590888152186261, 0.50922407346925547, -0.32967997624884116, 0.0027253792439276836, -0.56548599369910901, -0.46105278037676722], [0.3693865501588729, 0.15317469583292431, -0.29402435012463934, 0.29065520194031613, -0.32941422259575348, 0.47909934000581189]]], [[[-0.094341270869856109, 0.48113024552738048, 0.1127153555947018, -0.42961703176237442, 0.91405857828123604, 0.7585980682447615], [0.066930506961936809, -0.87121138987331381, 0.2593846107283635, 0.63229746648898999, 0.90565106945256391, 0.24318871585429291]], [[0.80525208345889676, -0.92654183588359063, 0.036765924565639985, 0.53919350916842168, 0.74148121831309499, -0.4988303471522062], [0.72135142025864374, -0.079175129638672903, 0.54184985112365114, 0.50413747791156149, 0.4681526288462321, 0.013922425224406343]]], [[[-0.62105441984584453, 0.17955047056845763, 0.39803815956116884, 0.84794957491925316, 0.52825505321876287, -0.79441085991990246], [0.85205362505705473, 0.39283482331785358, -0.87920065934233871, 0.7385632085642726, -0.0083493397045975026, -0.078583222643678452]], [[-0.11237213244369948, 0.80591494755393778, 0.5940055260996675, 0.30601068068013038, 0.78805108766559107, 0.98180025168493623], [-0.99517010460447364, -0.24059236976724518, 0.22091864436381337, 0.73515450334504928, -0.30794271746264079, 0.59126199286970427]]], [[[-0.96834046686308706, -0.3081635290670357, -0.58066048686553562, 0.27004694307596022, 0.75163698111420119, -0.95135038202919642], [-0.78418374529444845, 0.72082487679022789, -0.33550173411084372, -0.19234309144533279, -0.67542307547378244, -0.13242729361507388]], [[0.58111001045660005, 0.71995447873223628, -0.27527696435010518, 0.53203704097011828, -0.75140123759983446, -0.82131554585880573], [-0.068124410073376662, -0.29013176147558384, 0.031999394849357099, -0.39400634136932933, -0.11139031155966661, 0.56831015652587591]]], [[[0.93882176248046045, 0.22014913783932744, -0.88908720830037358, -0.25982062754441926, 0.076582228039617783, 0.70195164176435854], [0.1480151533865075, 0.016555167417486638, 0.27394605563020913, 0.32942439827804093, 0.65335363538660363, -0.30203107331960677]], [[-0.02892243149038487, -0.57855344542220788, 0.3664480568065227, -0.57054224954582056, 0.45041457659213813, -0.63403647604779279], [0.32215743013893849, 0.7008895495576013, 0.18985005256816989, -0.5971004835162228, -0.041593680853091675, 0.4595963358541475]]]])
        yy=numpy.array([[0.039934528273952496, 0.21963052693858498, -0.4336966137305529, -0.15243791386067351, 0.23768425399025972, 0.83940553372290316], [0.67795710781665974, 0.51731629841230564, -0.51110995861868669, 0.89729624011681408, 0.048767080306076238, -0.62670570848199825]])
        ref=tensor_transposed_mult(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_tensor_transposed_mult_Symbol_rank4_and_3(self):
        sh0=(5, 3, 1, 3)
        sh1=(6, 1, 3)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=tensor_transposed_mult(x,y)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[-0.42094342048668576, 0.024087545291369583, -0.53349695855842927]], [[-0.25705252318237393, 0.13687703988919764, -0.45669052449699055]], [[-0.46083884170437783, 0.37743565863204154, -0.44718860300775232]]], [[[-0.65729664583756708, -0.28869905516897076, -0.91804851359699313]], [[0.81203303690727058, 0.76684207842673913, 0.16342896204461632]], [[-0.21582327133415746, -0.69050960523895233, 0.37010573711897732]]], [[[-0.51901758418048138, -0.35433018275890271, 0.69965741085544852]], [[-0.1878959726625633, 0.95693547084275199, 0.38191627997551802]], [[-0.26231272041346809, -0.55255306771546664, -0.33012057653390503]]], [[[-0.49203548970448252, -0.47884828093561005, 0.40125059410130581]], [[0.60460263913682533, -0.13298946443483861, 0.24960564605561131]], [[-0.90194386119231718, 0.81502557851051094, -0.42974483635665672]]], [[[0.95194893275842807, -0.80682042796619213, 0.041531091818961974]], [[-0.97840019084976415, -0.20474743282751939, -0.67379376667861535]], [[0.69774739199412128, 0.11225383548721246, -0.45502780090087303]]]])
        yy=numpy.array([[[-0.92812670098068328, 0.29183513928185301, -0.76622196558339373]], [[-0.28857543102256922, 0.69956767576113621, -0.88384711500823454]], [[-0.050177571360215056, 0.69323720534006483, 0.64426980232079356]], [[-0.7962899076043608, 0.78229676405838, 0.67174806010036736]], [[0.97447947399388912, -0.42438770565298389, 0.067469972832907343]], [[0.92773721516308472, -0.42641842539842911, -0.36364383928788357]]])
        ref=tensor_transposed_mult(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_tensor_transposed_mult_Symbol_rank4_and_4(self):
        sh0=(5, 3, 4, 5)
        sh1=(1, 6, 4, 5)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=tensor_transposed_mult(x,y)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.3286726117898271, -0.85450203095641175, -0.34556876437689432, -0.19274377822339805, 0.82197803372121858], [0.00011970112242631892, -0.35888543183725119, 0.32928256115924093, 0.29910494974930324, 0.2417559119821906], [-0.087636270121034476, 0.40239981492291554, 0.022589738706079832, 0.57868444576221134, -0.2347554463098811], [0.9021265907524576, -0.37699014304663114, -0.92072987520486893, -0.62474521032059194, 0.98297200014321695]], [[-0.61404060786601367, 0.88811739022046132, 0.89921368629741538, 0.67345457146110754, -0.084450766831336788], [-0.65907276751725119, 0.85562923787365541, -0.98692635431475972, 0.3132623793579159, -0.31192066288794829], [-0.68380854226593635, 0.28260280268227, -0.13741273433130341, -0.69989971260488493, -0.26162330132448752], [-0.80081655555671238, -0.87848350938138431, -0.86991974401585903, -0.98865133527584259, 0.97836015484535332]], [[0.33031233317115949, 0.59903169617448926, -0.95213194642404142, -0.59060495965395665, -0.89054428656752216], [-0.96641067736425379, -0.17675388657747204, -0.49450614449967212, 0.42173696337110522, -0.26133502913745543], [0.098023349239120705, 0.28246812435745028, 0.14915137934466305, -0.64466264542202323, -0.031252545093494843], [0.73770661503410206, 0.89540980801414793, -0.16260301256742915, -0.27194353943938987, -0.68301643326568273]]], [[[-0.39971010452993294, 0.13546177373871671, -0.29808083659853191, 0.89621362031612706, 0.71067837206744144], [-0.43171009996336007, 0.76256615595524213, -0.4800026626682905, -0.11939968745804941, -0.45582050806917729], [-0.17396192518259945, -0.097712622543586036, -0.57300081860916841, 0.71653211756310564, -0.53524947947779378], [-0.39371043135475547, -0.8456525612524628, -0.93143061282354367, 0.75200534098343952, 0.65949822494253163]], [[-0.56089314983685967, 0.54530839063308179, 0.57981285882334577, 0.83572959637442268, -0.23377282114002007], [0.9167918154198722, 0.38411521429594653, -0.44061522545877829, 0.78283310398314421, -0.064798726998352985], [0.69629047365163799, 0.6610393520710145, -0.2110829483772918, -0.84038476962629649, -0.88371573295845152], [-0.66801757344062862, 0.17204196742180056, 0.3498504252984318, 0.092692193213838481, 0.20107578056988373]], [[0.74554733067188783, -0.03428356504024066, -0.30667508558362466, -0.41377425507421695, 0.47739260737029277], [0.65962929714933072, -0.81616084386652599, 0.1636106785730107, -0.37184448168689466, -0.083510992518722515], [-0.20599352228483259, 0.30128762833246459, 0.99459469147830437, -0.92724355986303442, -0.46491922301357147], [-0.84130299179405887, -0.32146109460520678, -0.030422641575442499, -0.22024917949396516, 0.87996777963754802]]], [[[-0.91952442832608861, 0.92246913276392584, -0.41736076053473403, -0.74492728899645577, -0.97135887345312089], [-0.87457379469030672, -0.35341017446200107, -0.07385169813903647, 0.70464280981611727, -0.76764223164458478], [0.61960684709746472, -0.54287763705361702, 0.54554706640445283, -0.23738592770186395, -0.93897723241441478], [-0.25542946257706345, -0.51215514918942961, 0.070976382244732239, -0.69188536656012212, 0.87422402347412476]], [[0.98301002005270055, -0.12470941221136589, -0.52805452714348511, -0.1716884156213152, 0.79856930541891824], [-0.88111801556672709, 0.42168832055827909, -0.61378852923104477, 0.010897853295253945, -0.87379838208563121], [-0.89611966145002797, 0.81209909110039558, -0.83439360604784496, -0.43012456230495988, -0.11915984453455919], [-0.58356678567199838, 0.12700191961182461, 0.54664983633255049, -0.36579651118434575, -0.35650395915983291]], [[0.72924594177871427, 0.44093402974135865, -0.94033969969579978, 0.58585733308307208, 0.14936182760585837], [0.083672923812909694, -0.32883832377891697, 0.0065693379996578649, 0.61788467416931958, -0.78117137566034156], [-0.15230880650847256, -0.25717550104347708, -0.44643937646045062, -0.95258545947473117, -0.41638481662483162], [0.48529114537962026, -0.87030537670925145, -0.7714907340469066, -0.80972027583022665, -0.95703341988717794]]], [[[0.90373992312625373, -0.23500027936221457, 0.50149303770571674, -0.46127528496313897, 0.81887147574131225], [-0.4254933896680797, 0.32202902723801774, -0.2080347546123853, -0.84908733322807861, -0.40032333351260929], [0.8399371877781161, -0.13453326693467149, -0.25548263447668451, -0.92404691996143717, 0.49068466609782324], [-0.010994011016787875, 0.30183747887398127, -0.45830865633322171, -0.13172767369052196, -0.49857884771107353]], [[0.15882752097604613, 0.42539334697731634, -0.17373376656919581, 0.62025649815049833, 0.09384146349769118], [0.052825584833204209, 0.38289931910012553, 0.98355348858053127, 0.067108676420790658, 0.76173245904055364], [0.707332623030001, 0.61608920472503215, -0.79616136193364984, -0.58804381557605545, -0.98726266861958378], [0.88743294261332561, 0.54014175454603164, -0.059018654786453295, 0.0017558414379128529, 0.21625982289266754]], [[0.46036664588487208, -0.85011491366453851, -0.43307653049927231, -0.27955167899657618, 0.23497776127821624], [-0.19261020770434278, 0.28710646228632908, 0.13469405896084252, 0.55507701897452666, -0.10832271976594554], [0.34733447806522255, -0.67812532110655832, -0.49371346697806651, 0.34262854642270324, 0.71818133090113401], [0.65740300406545504, 0.79126446893526814, 0.18918922567023433, 0.92087050238111834, 0.49004708280642206]]], [[[-0.65585475364890811, 0.39309014963098154, -0.7562883313569384, 0.98779998893489784, 0.91040582705438822], [0.55391478939777605, -0.83255989118298968, 0.35981615761365049, 0.58879738319401276, -0.88665238231194698], [-0.52636858486503924, 0.49638233650670616, 0.66875728108190735, -0.19338443106897518, 0.40873356917065706], [-0.47954192879707502, -0.10505150530892093, -0.78486596704950085, 0.82343424816562605, -0.43878415902040979]], [[0.70821034963377594, 0.51991386672909723, 0.061363946914968048, -0.58785092393716698, 0.24582656318635587], [0.43448278099216164, 0.87144717667007843, -0.75661315784049976, -0.82479738530449076, -0.47353499357282813], [-0.2031722521260777, -0.58495927797947456, -0.3425002963525976, 0.58137632757299906, -0.36777898680907128], [0.54446482923413475, 0.41739584740466928, -0.20412221916745876, 0.4125121115533994, -0.64136315177445358]], [[-0.63182930155226136, -0.6684138811604512, 0.61027771454903168, 0.098317109322948681, 0.071386912614282094], [-0.80718607445402935, -0.22706546012579976, -0.328867594709638, -0.58637244471015881, -0.12282366043824466], [-0.95651745246541853, 0.8786325424353314, -0.78703608994458696, 0.55702033538913209, -0.17354512565028957], [0.78836405826050959, -0.92577926191696802, -0.029046248638723959, -0.35417649589188716, -0.10732517095692762]]]])
        yy=numpy.array([[[[-0.57099309215082972, -0.71986552617493715, -0.32746510396904616, -0.29457900285056571, -0.87109750182804935], [-0.38567419270456571, 0.5186618392011435, 0.80688530910972789, -0.30157563583828373, -0.22402717950380269], [0.17358737474885544, -0.70550797441683133, -0.62129412559492825, 0.52840701210198504, 0.96857344549360547], [0.73713840075789094, 0.81264820127655746, -0.94292035087210357, 0.86353538383513362, 0.36797962395963246]], [[0.61182669904609654, -0.86305247797254969, 0.054597840209777759, -0.77317476535313734, -0.98157968399732409], [0.43903936273788347, -0.80362916567043108, 0.052768384717363892, -0.27953364909296918, 0.012410463575606823], [0.1789924452572107, -0.82064942978784816, 0.77834968114501368, 0.54511619119591059, -0.078312424802514213], [-0.58997547775749348, -0.90798115287264447, -0.52319000042260511, -0.25967707100817727, -0.090388461393795749]], [[-0.057360691965293364, -0.35643901073370143, 0.94416701240537093, -0.12975963800605195, 0.24344891105647815], [-0.30407980830662629, -0.60935762771229718, -0.36953051065620568, -0.13516253927153898, -0.76424800971229678], [-0.11158839452129876, -0.29925460809117999, 0.090793003279214357, 0.034698910008308603, 0.52955393183725419], [-0.80590071543808905, 0.41552725721304484, -0.54467184155648485, 0.027157170819695597, 0.21927800600457759]], [[-0.91567671408746576, 0.089721430695949511, 0.68874479606969241, -0.47484852692751289, 0.32103324077353079], [0.10932893553650169, 0.72259367439405531, -0.52856484077907506, -0.33980390273612859, 0.21193749336396528], [-0.26469409766359075, -0.031192019873024224, 0.92407396820890386, -0.56863776066383087, 0.50631690393700213], [-0.091835663858494065, -0.60900630770581099, 0.16504103799481085, -0.67497900621314866, -0.93761349764479185]], [[-0.090528110855556898, 0.91542983281997881, -0.21760644926769057, 0.35099218783559349, 0.57700733427549333], [-0.62869477790491701, -0.18267295377221338, -0.78084313643905912, -0.62190487191447841, 0.44123246426926199], [0.38065262999904159, -0.53755926300504875, -0.039390757626917239, -0.28601952070323611, -0.33054668299921408], [-0.92702102718728785, 0.57025648682495, -0.59098431316922118, 0.23697126764777732, 0.59384832386354769]], [[0.44861421359254683, 0.43182428037561249, -0.97637515415813403, -0.24698341941562618, -0.12946075318063399], [-0.021941646533727655, 0.74517621865386685, 0.52756704121035014, -0.35182980176106593, 0.79202343651616891], [0.46156988447730285, 0.30211653817827155, -0.78991450707682254, -0.096922049968725776, 0.72086226521143137], [-0.21066751265537764, 0.57651740235435556, -0.93114660007233185, 0.63855298931145144, -0.57118797770247087]]]])
        ref=tensor_transposed_mult(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_transposed_tensor_mult_Symbol_rank2_and_1(self):
        sh0=(6, 1)
        sh1=(6,)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=transposed_tensor_mult(x,y)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[0.75714969237997609], [-0.053478518418210053], [0.13457096425616966], [-0.90849347127825664], [0.5696956302876226], [0.28138906475823977]])
        yy=numpy.array([0.27491073193427007, 0.61421554490525576, 0.16174521223400595, -0.8741133472910807, -0.38520233719960539, 0.076198614119637131])
        ref=transposed_tensor_mult(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_transposed_tensor_mult_Symbol_rank2_and_2(self):
        sh0=(1, 3)
        sh1=(1, 6)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=transposed_tensor_mult(x,y)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[0.29088319167894894, 0.28180319632966411, 0.54558255646778031]])
        yy=numpy.array([[0.89755359650944078, -0.98885217830250038, -0.57514506786679398, -0.71863400669542354, -0.27127571164570918, 0.65922301681106621]])
        ref=transposed_tensor_mult(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_transposed_tensor_mult_Symbol_rank4_and_2(self):
        sh0=(1, 4, 6, 1)
        sh1=(1, 4)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=transposed_tensor_mult(x,y)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.0090185154747182139], [-0.13053698629662769], [-0.65747876702055486], [-0.029264529694897901], [0.17629577517951822], [0.18578288624823891]], [[-0.76062194826911256], [-0.91713084670235245], [-0.71596132601595741], [-0.8067066926260027], [-0.20029455339984437], [0.71470038604239061]], [[-0.17491370168359399], [-0.63445991889982678], [0.75120153753599417], [-0.046644443851954875], [0.50551937616119691], [-0.24292804562279002]], [[0.044930683687816941], [0.077475924891841075], [0.88655296538176054], [0.26133903470846076], [-0.21923844060578213], [-0.38275898501032746]]]])
        yy=numpy.array([[-0.21891241915260684, 0.70478694200674208, 0.035739611808814908, 0.032781916382063514]])
        ref=transposed_tensor_mult(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_transposed_tensor_mult_Symbol_rank4_and_3(self):
        sh0=(2, 3, 2, 5)
        sh1=(2, 3, 5)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=transposed_tensor_mult(x,y)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[-0.93072655575112995, 0.672330080072431, 0.71705214022251762, 0.3677206047228061, -0.43822126179768905], [0.27971374278945405, -0.58456407612980699, 0.37102014745559808, 0.054929085954495305, 0.84351411004733623]], [[-0.42512989659986578, 0.3655980951365323, 0.6470492246805819, 0.6525785689911261, -0.66787867234648024], [-0.8673092278053991, 0.45219562164202554, -0.082683428348641508, 0.22124672242886456, -0.22962948188634091]], [[0.41540868693534105, -0.15959144805441827, -0.32762700743366313, -0.35350253380572272, 0.61089225014280735], [0.85372559410077908, -0.75364472138710825, 0.75210836956193128, -0.59186451481654201, -0.95753372287062666]]], [[[-0.34047830548224245, 0.15779980700995644, 0.01108258102014692, -0.38019324025648871, -0.91302778828444953], [-0.067316979827180878, -0.23045099968993221, -0.52416520665965693, 0.95542576220200126, 0.20680468648356798]], [[-0.35450776994375599, -0.087367963022568107, -0.65764156794085271, 0.29479134704769372, -0.053914649841272144], [0.16152634636452357, -0.025326250040164533, 0.40349393053344684, 0.21710916855081486, -0.70206172600247174]], [[0.88373290189648546, -0.53756098516683659, -0.60468108949652821, 0.45435155268035832, 0.560546264586675], [0.24379077394497495, -0.9704515896062933, -0.67199989119446091, 0.44981632977274622, -0.47802251991410172]]]])
        yy=numpy.array([[[-0.75762262715469153, -0.80928908018588341, 0.56743864317259196, 0.30106121108649919, 0.87662898356164232], [0.35428837952808578, 0.77697059175348948, 0.67005680654309629, 0.76769839374065119, 0.88585506115442891], [-0.40365935995810109, -0.32567916638803984, 0.14055934175527951, -0.81288313225711817, -0.25487959091539292]], [[0.83104016054094476, -0.44620869437779165, 0.78984490110460492, -0.19575723838683978, 0.54711621122160659], [-0.19746169070204256, 0.4544993174958567, -0.8947616632177442, 0.092404373047010768, 0.065207141583017103], [-0.32007805991205296, 0.54420793776180187, -0.51567150146517715, -0.84974691393370883, -0.23559965280025441]]])
        ref=transposed_tensor_mult(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_transposed_tensor_mult_Symbol_rank4_and_4(self):
        sh0=(3, 4, 3, 6)
        sh1=(3, 4, 1, 3)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=transposed_tensor_mult(x,y)
        self.assertTrue(isinstance(y, Symbol), "wrong type of result")
        xx=numpy.array([[[[-0.52103331387105012, -0.24467366865622653, 0.07717746279108928, 0.868808169605638, -0.5611577641741996, 0.12138353812183222], [-0.64035239681065481, -0.8533207303947774, -0.91548749513204952, -0.60139253974562124, 0.087304362197311747, 0.17469404859913218], [0.5737100022221191, -0.21292763511967094, 0.88634795737840721, 0.64825554295971743, -0.68447750186860534, -0.53162859690369801]], [[-0.96479680648474453, -0.063538962661914278, 0.37796940952163327, 0.75544996099499717, 0.31020806579863924, -0.70259504740969336], [0.17440358796274746, -0.48182300913634957, 0.30397352441101755, 0.48120622666907376, -0.9641134736949768, -0.086613219394629404], [-0.58087938332220213, 0.61168436364010215, -0.14123068387577264, -0.61774837984337072, 0.85126398283491245, 0.19734691411452787]], [[0.39586557419915347, -0.21063558986537823, 0.18495741079868666, 0.1444071224887209, 0.56335909659888705, 0.18181237094822755], [0.17967138291994122, 0.16561642560963796, -0.075901581487074932, -0.22219568243160115, -0.46765609221976168, 0.81922922443912416], [-0.2143778248039514, -0.52292534587312023, -0.39296980647624014, -0.69183657521175235, 0.41398827227752633, 0.66989771454011549]], [[-0.4271167072431088, 0.16587053788759265, 0.37669531827256653, -0.44887305574855252, 0.52364543816047782, -0.33164330403517872], [-0.57809070627828141, -0.28940898196455156, 0.4485494811276256, 0.60895929772207102, 0.53283309915563359, -0.61240330129877441], [-0.58164366765245012, 0.47222887184691631, -0.40360570154307518, -0.45191074272413001, 0.61600507555127204, -0.57449666748665362]]], [[[-0.92410787617368828, -0.33448955836683192, 0.17416185008199125, -0.51654473424251712, 0.27828274838252409, 0.86102416131402393], [-0.03492051223625281, -0.18239542847426371, -0.52006839720022313, -0.5949035309574775, -0.29008310634191781, 0.29747606666175685], [-0.17584229880832014, 0.016288514558784772, -0.14185547881379001, 0.17393750604744884, -0.26656839199947968, -0.84637001654540156]], [[0.38420188280169687, -0.047006848307007409, -0.74957201431561882, 0.77445059953536854, 0.31928123622695881, -0.43334435076510402], [-0.23788563256217188, 0.74112991744976764, -0.73317218458993372, -0.5727103122970989, -0.28708219617749275, -0.3400111571043547], [-0.38238688168923907, 0.14914700456700336, -0.65191005113605849, -0.2953880204327386, 0.40456480541780282, -0.2865217587606117]], [[-0.15755595449386361, -0.16647305340121621, 0.92133719819926174, -0.63092176249595111, 0.70875359659691184, -0.39052998799557481], [-0.99302398654484292, 0.15048931196716087, -0.49004579380017321, -0.76661381329790479, 0.40210202476587864, 0.43856955034024958], [0.12053495245422918, 0.20708086951342186, 0.24332639622422803, 0.49448092641469432, -0.61445244341730287, 0.062398331170835819]], [[-0.037310462145869527, 0.82838715909065264, 0.19447532672577039, 0.87677385032709632, 0.92783340421834026, -0.35708933687610434], [-0.23045402945673876, -0.48164993487882413, 0.0015964201221456698, 0.12916121089944954, 0.81168729782694871, -0.83263588848526737], [-0.10762040291720476, -0.950201101604079, 0.41334849493001324, 0.41232328384127248, -0.8103891483130512, 0.98230654155891894]]], [[[0.30724322342031662, -0.63702394757889658, -0.29107897221888912, 0.029981201159668736, 0.77834678313038208, -0.48995460717234129], [-0.5695132147598756, -0.69942454199955106, 0.6670170493410208, 0.90469930521555142, 0.74272213055697867, -0.69780598944503969], [0.59529799847713138, -0.86604600619356953, 0.72842304904155153, -0.76510317264936667, -0.22229100362561494, 0.94458242672846793]], [[-0.94862928033497895, -0.060390404167768308, -0.72809708428005449, 0.65248187182971873, -0.80206324665433959, 0.57198669177979622], [-0.72039136707743912, 0.9606570364582081, 0.41023190359568806, 0.47692355020119193, -0.61094088735904162, 0.76645774693284685], [-0.37468033936944978, -0.15941209288644931, 0.67541423370090148, 0.83523830651774311, 0.47272131347113522, -0.19604736980840509]], [[0.25928451869551838, -0.62584581230967973, 0.91483586961693031, 0.40171882196342534, 0.62695833936118284, -0.73710577447321457], [0.24198233050646856, 0.70658783924723578, 0.28061550273076552, -0.42767405155605731, 0.062550692501628369, 0.3019100197438358], [0.65470798398130681, -0.077819360391526926, -0.52566085614858649, 0.45330661191141419, -0.72777683695748152, 0.94030960716096867]], [[-0.068587524870884486, -0.66854961778467881, 0.76244713759525218, -0.89031479837566807, -0.21495387011017164, 0.49078238157264176], [0.44285487249552347, 0.68712630199996227, -0.84008201399995186, -0.87777126412510897, -0.64479681705119729, 0.54840777276553454], [-0.74856318248288778, -0.40179970883936411, 0.0012015653866548348, -0.2863262350665019, 0.76133061975075833, -0.25114931133570728]]]])
        yy=numpy.array([[[[-0.63292034755128701, 0.81129060591118574, 0.28031268158885236]], [[0.45929654176560142, -0.057718534972486024, -0.67996575143602134]], [[-0.60518490581406437, -0.34733123131512644, -0.5451780531868804]], [[0.83174614694543259, -0.87051399332589252, -0.78585048120864243]]], [[[0.1779155066081477, 0.88643823586911497, -0.53053867229866802]], [[0.4965669371331789, -0.82261236410550609, 0.91967462583054527]], [[0.79773798080756042, 0.3639629441173069, -0.8792552273646641]], [[-0.45066747823448616, 0.048705833843714519, -0.85937062509997197]]], [[[0.93622911333583358, -0.93778227945673986, -0.46528187929536435]], [[0.28276407977609264, 0.35556889867908725, 0.44245452017511799]], [[0.45259594080680099, -0.99178084806069511, 0.8569845663691511]], [[-0.5977083982922573, 0.78534375785164823, -0.64285403146788966]]]])
        ref=transposed_tensor_mult(xx,yy)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")

    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank0_and_0_offset0(self):
        sh0=()
        sh1=()
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array(0.120602326674)
        yy=numpy.array(-0.196030967052)
        ref=generalTensorProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank0_and_1_offset0(self):
        sh0=()
        sh1=(6,)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array(-0.718841346737)
        yy=numpy.array([0.24669366182422658, 0.31616030085940205, -0.052159173127139136, -0.20755814432714481, 0.110874597602725, 0.53184000498566286])
        ref=generalTensorProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank0_and_2_offset0(self):
        sh0=()
        sh1=(3, 6)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array(-0.94112391294)
        yy=numpy.array([[-0.63421228474658942, 0.72037677616183582, 0.80762624010419204, 0.85062135267932737, 0.32604144012642933, 0.18364719056371426], [-0.0020862642453147728, -0.097948148506669552, -0.57481660973481863, -0.68705393057580189, -0.85836497168288606, 0.74839726565330555], [0.60111055620800458, -0.97750483929734022, 0.38508350182648887, 0.75663582414845654, -0.15498414697716778, 0.63491171761757736]])
        ref=generalTensorProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank0_and_3_offset0(self):
        sh0=()
        sh1=(6, 2, 4)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array(0.465214210533)
        yy=numpy.array([[[-0.0085863207442669065, -0.34800278824014308, 0.1928285214777874, 0.3215393410605174], [0.96373053271900821, -0.93478346466743667, -0.37610094953244411, -0.56415948744448841]], [[0.80090752895493567, -0.12947931007811198, 0.12408242065551311, 0.13049421414238527], [-0.37556059967356492, -0.26441097866481211, 0.64908636096752437, -0.66447618139445508]], [[-0.76168267577670146, 0.82042821757926188, 0.80108980852812439, 0.53788101991238046], [-0.57111055695578461, -0.43700321940705367, 0.012191555592468317, 0.056304230927500143]], [[-0.41719799307822059, -0.18956864628134373, -0.76859506079281492, 0.8926200646583522], [0.49212009188644568, -0.53508777362209248, -0.64617367471377851, -0.69750334035955985]], [[0.37099616564230087, 0.62110589314866593, -0.39581075013412836, 0.52445695862611208], [0.12312392319003296, 0.14312041731905478, -0.98021638826018709, -0.32525897389262992]], [[0.5721009136573485, -0.37105608406865453, 0.54120531761521962, 0.62260339019660038], [0.47054164058140602, -0.25174682508014157, 0.11496334096383354, -0.56591598756552153]]])
        ref=generalTensorProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank0_and_4_offset0(self):
        sh0=()
        sh1=(6, 3, 4, 6)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array(-0.623589698814)
        yy=numpy.array([[[[0.30809192698706189, -0.75650192665563676, -0.084796317618335282, 0.88397339742531922, 0.61440037674779679, -0.41589396172229942], [0.91736721266649934, 0.89358681316420729, -0.068852192387581113, 0.18112589517512889, 0.50997726906474483, -0.21029544967389735], [-0.64225421833825447, 0.3343171123204709, 0.82271546012939489, 0.049835556456493402, -0.81559708913462292, -0.77516257684283141], [0.41456468015391379, -0.81475937545697774, 0.66842834334836376, -0.88376113829942593, 0.54407752836808987, 0.1627910780515549]], [[0.44285351998550326, -0.42428618146481112, -0.74935906414604703, -0.30605860729994139, -0.17939289206469256, 0.77314872947667479], [-0.68961320680716254, 0.98103521601191601, 0.30104170866818736, -0.90782348689022463, 0.98462482881669922, 0.069888899744066979], [0.24343476275961962, 0.057969068718103589, -0.9428923815123309, 0.55269778899232769, 0.13201400614113501, 0.7677984458385323], [0.99959548544251819, 0.45066327149315799, -0.18772737585254107, -0.69852401755491877, -0.14735547461921827, -0.54470712603509996]], [[-0.029736318444876009, 0.62525649085017987, 0.069459361429594635, 0.18840807338599386, 0.17478695556731183, -0.75348006561160852], [0.63706359565763648, -0.45007314156843847, 0.70969266038329226, 0.43999948329900329, -0.047833030004410082, -0.21063789610815897], [0.15114348028188052, -0.60438834024511934, -0.62204832795822496, 0.92617015136410719, -0.80701646044483755, 0.59660067974184705], [-0.4126039361961229, -0.17416955288533709, -0.052746345431290864, 0.76356924067612808, 0.38863653830899403, -0.38060339098986495]]], [[[-0.74274968420338006, -0.78547317159432484, -0.69220197475609768, 0.75067888144198025, 0.17151000576078723, 0.24367380253815996], [0.9913688346879419, 0.85388738362087291, 0.76453807787295647, 0.94103987235602027, -0.033836831285585234, -0.41723221228921648], [-0.27927098273605222, -0.3080565934915076, -0.030192885873532749, 0.62440317149892821, 0.77278543125872834, -0.017691440116874846], [0.62142202789709478, 0.26844946357750366, 0.53487746203639475, -0.017281821644421047, 0.77176095361740082, -0.54453368221632448]], [[-0.56866914158470117, -0.76837228644493072, -0.075161797541761111, -0.33034812921155865, -0.39946852443535996, -0.87374470458795206], [0.55655779918092163, -0.47173976902091974, 0.7434228498789921, -0.85062712849397482, 0.1118664997169494, 0.41165223066434775], [0.58568834214731291, 0.59795222233675815, -0.85684990567345398, -0.72783269033771791, 0.046577121182521886, 0.1179765194610336], [0.94039799865912888, -0.49648265754034071, -0.044057626448851028, -0.72961801889449762, -0.46045054554537113, 0.028170139610844691]], [[0.24063151068416611, 0.27172076519517607, -0.14807512570221615, 0.079744011957922689, 0.69415937877344236, -0.1442551570457602], [0.024431112721924331, -0.49274679462854021, -0.14738907724064587, 0.22602114621623515, 0.77614439358926401, 0.51000171885354573], [-0.5934540667154764, 0.034360970528017676, -0.1042708116958444, -0.069876528866678278, 0.30374161514726095, 0.011100060343508522], [-0.55998540855351009, 0.81331856327558971, -0.94091749248525591, -0.63655875785250582, -0.45159271677149682, -0.049871684886751755]]], [[[0.80533152750965709, 0.64209866682531347, -0.81651166615891468, 0.58789639123969928, -0.093561280953656789, -0.9570274228661988], [0.90340020943053356, 0.25486702100733094, -0.09331466227023455, 0.54757564616205401, -0.70998931570825974, 0.3196097574168526], [0.42402826609113542, 0.23251430114745419, 0.60627245480634828, -0.15906985967824139, -0.29451220688113944, 0.73632702763426727], [0.75968693746767157, -0.56894337523052219, 0.39873438413195239, 0.6624750324472739, 0.92820684117107688, -0.0028547941343963767]], [[-0.77598160796937421, 0.58919445313513741, 0.236355236091361, -0.86860862196176947, 0.70727087112758347, -0.41250152562106623], [0.69670601960034984, 0.90700407839332975, -0.66585392128032916, -0.85914153339472232, 0.39201703279659772, -0.64118876358179477], [0.90796331230969662, -0.50556466576898118, 0.62538978293223102, 0.36649170783369378, -0.60430847854934266, 0.87579434116772248], [-0.52272449256096176, 0.23880048140159271, -0.25983285842793324, -0.9741750376088405, -0.85831097062660056, -0.90714273888277952]], [[-0.70491470722100424, -0.46647939695646179, 0.99320200042380469, 0.045264045772564598, 0.97789575175498622, 0.5799787663004472], [0.28923232127202891, 0.36361164760964293, -0.64400897883355968, 0.021305206224856876, 0.13194868938254212, -0.31373517670836004], [-0.080822630766081316, -0.98999085010284871, -0.66600399816916034, 0.57053737123421855, -0.35505583320260126, -0.91842183645141739], [-0.34316820994233743, 0.11049253831027772, 0.83694172783882381, 0.75725375727200128, 0.98906701664618946, 0.48937889966296289]]], [[[-0.70070775684456521, -0.6014526472180195, -0.23908275456415473, -0.092892748389648672, -0.20622403126824285, -0.44420110981607697], [-0.63629363554568297, -0.91337571469514822, -0.97476649621138445, -0.6452449575920578, 0.32214515266002808, -0.94617858181434755], [-0.68844245748810962, -0.89100446295759173, 0.70907932436347898, 0.89857021794880976, 0.57852148389846114, 0.62492662417111999], [-0.44112227204953558, 0.084747046129876047, 0.21153474300181641, -0.73432375367156411, -0.67607634134588213, 0.86385348824446995]], [[-0.62738511755313975, -0.65180718687835926, 0.050124082325634145, 0.34414445384490921, -0.61223873287310848, 0.99077450060265693], [0.18806192484327644, -0.8033457073476864, -0.13864885517344439, -0.39528267756761748, -0.6673646602291694, 0.14131839928059797], [-0.94744721827235501, 0.10051678952630128, -0.98438052701576284, 0.51494336079874037, 0.90856310923343386, 0.28469216266787378], [-0.45768528130148067, -0.42908632076555331, -0.11997683822120386, -0.99369287868794265, -0.63802418901017943, -0.92565267933139217]], [[0.72321409722443453, -0.087450612610178835, 0.72808924026809652, -0.027109409955309971, -0.31975421415920469, 0.92564651924402042], [0.050369427448890614, 0.97141433141690126, 0.36090891761063015, -0.67274157000457957, 0.10692423293106623, 0.69622349605570633], [0.39172005280012545, 0.4679190554124717, -0.61364660477166044, -0.90514568243172899, 0.34071960689059599, 0.49904068641575994], [0.875131551952399, 0.90483953760538394, -0.84870544143831861, -0.87674459001115501, -0.24196198392651835, -0.49930693224197209]]], [[[-0.95172799453441437, 0.20599150977171687, 0.41894515074663885, -0.65052218311591536, 0.14129817885098706, 0.11107209902347237], [0.69662082617222021, 0.71929278432002763, -0.66152764389866858, 0.76012259163867224, -0.077431800111708915, -0.63050285264308514], [-0.27077483359489252, -0.15527681941516458, -0.64291560392842473, -0.58596622636110252, 0.90842920916372671, 0.45911985167234737], [-0.012100419734182299, 0.25708061846056962, -0.021620769568513332, -0.66506216004308727, -0.77221330374794039, 0.11372673359751562]], [[-0.043703902533105188, 0.90175798953967834, -0.56329533007306742, -0.84769048560611715, -0.14738180093748809, 0.51842993237315693], [0.055631699072566709, 0.36215659607471329, 0.91614793275909023, 0.16451821952467061, -0.73399950819648918, 0.44322524733509017], [0.61145602290740331, -0.4138244104415747, -0.70178888995535194, -0.74721648924131334, 0.60211574990951666, 0.073010764051911314], [-0.90562460550403356, -0.81273060285089027, 0.094877268419823801, -0.68680990243715256, -0.054479729913023522, 0.50408973465603513]], [[-0.75070423318485791, -0.51215763018978855, -0.50018603949202234, 0.58033945871588255, 0.84519896740165512, 0.45419020537233479], [0.43302155926152985, -0.37730934731966803, -0.43460809895477936, -0.27593789307847527, 0.98951036891561372, -0.64992788719575501], [0.059768303259011279, 0.71966713738358945, -0.6624006545269332, -0.41914391315225608, 0.34416457466785655, -0.087077832402610245], [0.037587343562922815, -0.1537014176479905, -0.096047195014001385, -0.84513925248343669, -0.77893179343469821, -0.80071087113073025]]], [[[0.18441161004472217, -0.89085683407134342, 0.18169758388029433, 0.44127798118586825, -0.30823106479907292, -0.92491539024391223], [-0.066384090765519321, -0.93313884932716595, -0.62716306731618543, -0.9241096083108189, -0.81211088985651902, -0.89783263684929704], [0.76662515117789098, 0.50808411830277223, -0.74686818953994139, -0.31432933348725234, 0.45124801756158295, -0.13447238650378646], [-0.80347477823641955, 0.8236485442999697, -0.51247735509781367, -0.73835672919462048, 0.31664758467932419, 0.55356224656481468]], [[-0.3871374079654073, -0.46312906359385764, 0.74365795773686605, -0.20665122494002963, 0.30888179451246578, -0.16606184886766773], [0.26773483890875971, 0.62312282329390145, 0.67163653096195786, -0.15154356848961115, 0.44775325187326098, -0.26720345166863479], [-0.72463787539126234, 0.91640362190722024, 0.78376410523764406, 0.61902600050868672, 0.62368910285875212, 0.52873811830719974], [-0.51994764328263532, -0.31705896835353031, -0.70842729752888345, 0.99863025684732265, -0.9243923473543354, 0.35762942554081123]], [[0.021258743198713237, 0.58300028497310596, -0.77117292506681046, 0.97577590404749603, -0.21174627415511971, -0.49756767185201878], [-0.36802560342165158, 0.69709511186472195, -0.13079196750244049, -0.092098140161382513, 0.35456655078722954, -0.75388756374489385], [-0.68356002135949878, -0.28679759826218798, 0.45530671988199067, 0.89062957451705915, 0.098572622308220836, -0.33505375703764129], [-0.98484941417816274, 0.32179863892531202, 0.96321533239074086, 0.50450887676536516, -0.35194914233682706, -0.33528538372677996]]]])
        ref=generalTensorProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank1_and_0_offset0(self):
        sh0=(5,)
        sh1=()
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([-0.89392782546815952, -0.20765459535674724, -0.14170379720436799, 0.17710685740722831, -0.74718810082742459])
        yy=numpy.array(-0.934853821745)
        ref=generalTensorProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank1_and_1_offset0(self):
        sh0=(1,)
        sh1=(5,)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([-0.04024927340761919])
        yy=numpy.array([-0.75671641212655683, -0.78911522259266631, -0.84114244097416524, -0.63930442951874755, 0.47683765075115758])
        ref=generalTensorProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank1_and_1_offset1(self):
        sh0=(6,)
        sh1=(6,)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=1)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([-0.085403351520651816, 0.90921707200235047, -0.53359718407355961, 0.16893394412719731, -0.094118421542999098, -0.27790468500634335])
        yy=numpy.array([-0.92320870969164592, -0.97481776439396994, -0.24828901714465146, -0.54262493198697448, -0.03085089333883495, 0.2843460291626918])
        ref=generalTensorProduct(xx,yy,axis_offset=1)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank1_and_2_offset0(self):
        sh0=(4,)
        sh1=(6, 6)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([0.31350620735662482, -0.71749092789621649, -0.94195440394427776, -0.3597589388283573])
        yy=numpy.array([[0.33549410180771955, -0.8399397605558423, -0.78101537487651385, 0.21420623183545184, 0.75553815292439985, 0.90125575908770794], [0.0036123282413720315, -0.028457523654510375, -0.3256196830547835, 0.75413893307576907, -0.40670706807482904, -0.017175718795275019], [-0.20263165656749016, 0.43130455507953713, -0.53637821762870397, 0.83172379994694445, -0.57207921737330425, -0.38310746467060608], [-0.064217543541840394, 0.83334982952321535, -0.78045396934925626, -0.43505781135931931, -0.87910549954419781, 0.60031728438051535], [-0.55419156767962718, -0.8525160296163905, 0.58793681006219289, 0.56297768411872462, -0.47003754294991129, 0.032039398348186809], [0.59272311074888351, 0.38340659018515599, 0.48664083080730447, -0.69942444577824414, -0.18861464415977003, -0.63489922136494648]])
        ref=generalTensorProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank1_and_2_offset1(self):
        sh0=(4,)
        sh1=(4, 3)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=1)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([0.98502296440950321, 0.53721698463364231, 0.91906700312154821, -0.013116142514781659])
        yy=numpy.array([[0.36751435026510526, -0.81069888033394633, 0.86319146373928279], [0.85282881552325307, -0.79747637572910901, -0.26070160283100341], [0.4834344477082797, 0.27016863329654472, 0.94081943494800302], [-0.40197319920723795, -0.96675346437341036, 0.50098100664463274]])
        ref=generalTensorProduct(xx,yy,axis_offset=1)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank1_and_3_offset0(self):
        sh0=(3,)
        sh1=(2, 1, 6)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([0.52873876298268252, 0.99027248582532779, 0.30383230850548104])
        yy=numpy.array([[[0.52619612172861374, 0.4508395376389096, -0.089358242058781068, 0.5426154885689598, 0.45342822464819554, -0.071795511901164621]], [[0.20034786668832782, 0.06968453350326409, -0.98245744204649266, 0.72890490993932477, -0.19475273394058656, -0.22819153919670909]]])
        ref=generalTensorProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank1_and_3_offset1(self):
        sh0=(6,)
        sh1=(6, 1, 2)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=1)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([-0.86534855922788978, -0.90616896486067411, 0.29241706384393695, -0.1434200153512879, 0.71535736726337973, -0.75656761566862629])
        yy=numpy.array([[[0.58411747715302509, -0.57490309867598488]], [[-0.86887391738225039, -0.15808691039723688]], [[0.39683335222352967, -0.89777674247867245]], [[-0.54607135830324349, 0.026703666406978188]], [[-0.73181034119624044, 0.13598835189845593]], [[0.54828432111221193, 0.77670652648680805]]])
        ref=generalTensorProduct(xx,yy,axis_offset=1)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank1_and_4_offset1(self):
        sh0=(5,)
        sh1=(5, 1, 2, 2)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=1)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([-0.94932697333728067, -0.76939775792095211, -0.60084545659872401, 0.09442373566161022, 0.49932470791740902])
        yy=numpy.array([[[[0.82333058653367552, 0.76283350207709022], [-0.86453757754859439, -0.16447298226322604]]], [[[0.14998198415596731, -0.77312414194100576], [-0.432079736242583, 0.31037211310308566]]], [[[-0.87372710815346299, 0.95281449555718956], [0.62607105469222613, 0.10021551751729008]]], [[[-0.91278275963346878, -0.41410153456167476], [-0.94933411786934108, -0.24174073876718061]]], [[[0.67237323195104737, -0.93755957249090383], [0.99724327419614256, -0.48860258230602627]]]])
        ref=generalTensorProduct(xx,yy,axis_offset=1)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank2_and_0_offset0(self):
        sh0=(3, 6)
        sh1=()
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[0.44666730798982734, 0.87020627143488438, -0.42472256646725581, -0.62072959865869826, 0.13389272233171523, -0.88425759205976129], [-0.31932802256570736, 0.58712856527569723, -0.45815988090940385, -0.69079203735882366, 0.23147281119934005, -0.6076908236578662], [-0.59517291108601333, -0.1331668664763177, 0.59779051550999962, -0.81238732336051411, -0.3853473892840289, 0.36937631126118564]])
        yy=numpy.array(0.976267085512)
        ref=generalTensorProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank2_and_1_offset0(self):
        sh0=(5, 5)
        sh1=(6,)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[0.5998539488924266, 0.99855322114749767, 0.28127071829395711, -0.73058111255729297, 0.27669099671277864], [-0.79038988608455107, -0.41252776451057316, -0.020512948178222024, -0.5693619340635121, -0.55187023070809249], [0.80728194547666843, 0.73629371188743131, -0.76072352699668033, 0.023079312752607217, 0.13707592684276904], [0.19904116575067543, 0.19422985463283049, 0.37916264032960489, 0.94956208799784281, 0.49156735546067232], [0.34778567634475621, -0.88633197020022103, 0.85501428976026816, -0.3390126490203329, -0.91635406265047159]])
        yy=numpy.array([-0.50534507900906456, -0.46676471259254737, -0.92513551062444721, -0.52740161994111334, 0.84449076991328087, -0.73583491048090632])
        ref=generalTensorProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank2_and_1_offset1(self):
        sh0=(6, 4)
        sh1=(4,)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=1)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[0.95485746093786883, 0.42320715718233703, -0.11972512443295624, 0.11978254446810577], [0.80098148971536354, 0.99379598131118319, 0.6039351110581137, -0.45013863583867941], [0.47550372179416067, -0.23674559194316314, -0.95616032995772393, -0.89881200911359538], [-0.71942307925060489, -0.8721103354134716, 0.9908146983491819, -0.46281272441592369], [0.33508003798252006, 0.66702878712393709, 0.78280512861017404, 0.81087492116171278], [0.74664433621467508, -0.79977407358730201, -0.63399021444684567, -0.83705325280372578]])
        yy=numpy.array([-0.52317758164383132, 0.39608736542564693, -0.050426996951934422, -0.76485362266186163])
        ref=generalTensorProduct(xx,yy,axis_offset=1)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank2_and_2_offset0(self):
        sh0=(1, 4)
        sh1=(6, 6)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[0.063536642405825905, 0.97541698941013588, 0.045263023753985721, -0.17864614490970787]])
        yy=numpy.array([[-0.42888504735980848, 0.27759336426245862, -0.773004337105895, 0.72625922543423038, 0.26535566034571034, 0.077893180841854592], [0.46799465124062678, 0.58851837101223814, -0.69813825950185882, -0.65257584255548529, 0.90460242364276233, -0.91962139464361292], [0.41497807371441042, 0.7830148704999631, 0.80178125871923767, 0.2993774905802804, 0.20782412570308018, -0.06828241772773791], [0.78060289490957135, 0.8403940698936665, -0.97918361435476231, -0.65724686630727613, 0.33042929863111326, -0.38347659314874716], [-0.60871460320959891, -0.70755746884274306, -0.093081586114871939, -0.19868399752601418, 0.53815513798115266, 0.73916187350434193], [0.18153381377523004, 0.61344179520295672, 0.2140343762347392, 0.35094753997706185, 0.62926328960963773, -0.042155393754747417]])
        ref=generalTensorProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank2_and_2_offset1(self):
        sh0=(2, 6)
        sh1=(6, 3)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=1)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[0.14241434468030656, 0.45055778673871694, 0.48824716927713818, -0.61519735687514343, 0.44893513917620642, 0.17494643202079341], [-0.34036728537130845, -0.90556362122224576, -0.53627472142022126, 0.38363046159394476, 0.33551791146842858, 0.39824987192768013]])
        yy=numpy.array([[-0.20717977971510426, 0.39251024684044444, 0.26038305176661791], [-0.66890343833045951, 0.4386316119066096, -0.14040749359439109], [0.33215809570671984, 0.35131892119966257, 0.74116663520216575], [-0.93318002048130766, 0.66918015332850644, -0.53891245528260745], [-0.4544805023663776, 0.23356345602952366, 0.052978993259679141], [0.35187684220947335, -0.46072919358558817, -0.016458180547667789]])
        ref=generalTensorProduct(xx,yy,axis_offset=1)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank2_and_2_offset2(self):
        sh0=(1, 4)
        sh1=(1, 4)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=2)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[0.62293581577913582, 0.43570015209899848, -0.36543356314489861, -0.013733038143970644]])
        yy=numpy.array([[-0.85440701004591268, -0.60739582984729945, -0.49218123299639727, 0.63965289328512043]])
        ref=generalTensorProduct(xx,yy,axis_offset=2)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank2_and_3_offset1(self):
        sh0=(6, 2)
        sh1=(2, 3, 2)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=1)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[-0.90274949693172069, 0.85778591767760304], [0.45272282580420664, 0.16038489646116827], [0.10916850960686975, 0.41751865508303654], [0.36563473799024226, 0.64019188640322766], [-0.83100628734389348, 0.7790484796532311], [-0.31548194953083475, -0.95524542876256735]])
        yy=numpy.array([[[0.481433958366559, -0.18949649458144524], [0.78074792420795602, -0.45695613217550957], [0.54741667232531133, -0.61576445056935314]], [[-0.83318048928716015, -0.97999795281025737], [-0.27503088453032087, 0.8199410929570139], [-0.019918700813287726, -0.73456677462272202]]])
        ref=generalTensorProduct(xx,yy,axis_offset=1)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank2_and_3_offset2(self):
        sh0=(4, 6)
        sh1=(4, 6, 4)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=2)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[0.70842142263875285, -0.0062642909175190109, 0.79370658473974509, -0.77634013653604494, 0.94169907048857482, -0.0039108451580656123], [-0.29043065879823216, -0.049881593185522322, -0.87142193337887575, 0.94021481641950055, 0.90330309537987374, -0.58639459289545037], [0.16296082492442965, -0.024099980662619425, -0.90975178696329495, 0.034561286631014543, -0.23550488427722338, -0.70622298933341665], [-0.27135342315758426, -0.62295250547823566, 0.41824074164348701, 0.26321672753426162, -0.022072915675011018, 0.40268138380134011]])
        yy=numpy.array([[[0.63195249971818268, 0.44248437159833487, 0.58536984695851446, 0.6701044781477612], [0.36336926672682246, 0.63791083779564417, -0.37540894600571217, 0.789811882407494], [0.28736943322901087, -0.85241548569859615, 0.68439333872787356, 0.9364550318044409], [-0.43147804714330951, -0.29176878758916014, 0.41440967962714903, -0.47244364534386651], [0.22407781925201542, 0.61844532841903699, 0.10813043233210085, -0.26260199572322951], [0.1382431160677684, 0.49553175912122516, 0.80537530324212558, -0.97071305788471673]], [[0.075685962045163091, -0.60338909960729992, 0.8967278264381815, 0.88166934055511748], [-0.40984032739495091, -0.44549406863304886, -0.98724768530364249, 0.31015276836792971], [0.5606166295018935, -0.26892708872410331, -0.51575562713630019, -0.00040122644805573593], [0.032593568974800924, 0.26548897859237353, -0.17237453697970029, -0.3662939051069205], [-0.22799832508712292, 0.61461711619417203, -0.8322924796955975, -0.01741930254362023], [-0.57095005512326691, 0.93845747345769803, -0.69503704340929673, -0.70906304850935831]], [[0.00073333440245115789, -0.79653585088148859, -0.80634542660853126, -0.39779838346701846], [0.098891947828331439, -0.9622078664330469, -0.32841500281555391, 0.95948923184360702], [0.057942831398609451, 0.73137995255981947, -0.34954312194286197, -0.60626626249723081], [-0.0067352064006529488, 0.022667300934303247, 0.87457286706374315, 0.037596853497300575], [-0.025936402136939929, 0.69214785683950475, -0.72091616200547848, -0.99166285164461732], [0.0056210593597940672, 0.017572586162935444, -0.26508114316369658, -0.29546906413516294]], [[-0.18451383206681804, -0.52356399040496648, 0.057589903182133417, 0.32652727262010717], [-0.32285768968952988, 0.87449754502220634, 0.33562060354213274, -0.91205537907709799], [-0.030911209575789966, 0.13697724249144172, -0.78180207613472619, 0.69835412731860824], [0.38034483785101436, 0.041317134857763671, -0.77051242219430227, -0.68704372707785866], [0.46123029577315711, -0.45561545322437302, 0.9428061076760037, -0.25280448759064389], [0.9902732076203451, 0.81290737035343885, -0.77681305208943141, 0.59655181843946758]]])
        ref=generalTensorProduct(xx,yy,axis_offset=2)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank2_and_4_offset1(self):
        sh0=(6, 1)
        sh1=(1, 1, 3, 3)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=1)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[0.21327743563250978], [0.31618059635176832], [0.37665974677148961], [0.3491398965729573], [0.10112340447935875], [-0.62331226137403051]])
        yy=numpy.array([[[[-0.95290455227966242, -0.39946313055506688, -0.31844379895620301], [0.99445590759081459, -0.92633858399107871, 0.2247754260458199], [-0.075161895338294427, 0.31795663322997569, -0.95105350090717766]]]])
        ref=generalTensorProduct(xx,yy,axis_offset=1)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank2_and_4_offset2(self):
        sh0=(3, 2)
        sh1=(3, 2, 5, 5)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=2)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[0.31397944118577437, 0.36611307283290673], [0.87474255086392327, 0.6434194311337591], [0.025560381128179044, 0.27939739468058211]])
        yy=numpy.array([[[[-0.11159021467004049, -0.69228090613928583, 0.33077815099988261, -0.021624646826759353, 0.03993064206228758], [-0.1908129645151535, 0.74078153621977694, -0.57189859584236258, -0.37675016546279605, 0.55916609691864316], [-0.76797701226042236, 0.25557894189963681, 0.52853799931015577, -0.59487338246242483, 0.37938907206377959], [-0.51903758171197945, 0.99495483748699298, 0.51690673205185345, 0.6052279723116325, 0.88352950926198881], [0.75458059620806406, 0.4687938038361672, 0.56135890678357736, -0.77799141837971098, -0.57139330843376412]], [[-0.88917649037254365, 0.35615915534795994, -0.12006088277926974, 0.32146269102179725, 0.15133724528867964], [0.58996836221255289, -0.58443947069589886, 0.92422476046096991, 0.4104511817586638, -0.22499606686811635], [0.25532105188629206, 0.10516541829101467, -0.56926741543304415, -0.42387356094216155, -0.076756176904466233], [0.55094080612606011, 0.6859361858494466, 0.18331686902167066, -0.0080836102805050825, 0.74552897400023044], [-0.49507224580748144, -0.17466790803151744, -0.042737278564148884, -0.059633702516596054, -0.8655880119159729]]], [[[-0.96355201719282735, -0.64278635092938274, 0.69673033772418003, -0.62148910747611952, -0.073474847228904849], [-0.31543531330671604, -0.013429264026418419, 0.50406639742157378, 0.32528702539450727, -0.57423857385046562], [0.67982034336849484, 0.62901078891766371, -0.69529083912060807, -0.31473190804605555, 0.46757937628830315], [-0.79100270846626808, -0.86161082451502069, -0.53180760655985737, 0.26826307514660463, -0.4423416445423507], [-0.19474039562427881, 0.99345106490358304, -0.62377633125952725, 0.13795082452610297, 0.79450884761802709]], [[0.4768568109198108, 0.75217242005182117, -0.80888490463504015, 0.94386055690375414, -0.88645185122784498], [-0.16685266327240189, -0.98712364802943342, 0.63680914440590319, 0.30113335831783172, -0.87028737792159827], [0.98328018451571464, 0.35181414637641839, -0.79547526932546408, 0.83297025899896648, -0.92049013386485123], [-0.25082157461829069, 0.43497347304737177, 0.67887078949874513, 0.50917229315739609, -0.93261372194912884], [-0.097824852498045844, 0.46695956647612014, 0.87055057217960363, 0.10627960190345886, -0.19867936088502169]]], [[[0.26859090349320414, -0.90473797330700578, -0.34700717333351006, -0.69177636189367786, 0.258203768310173], [0.58091078713956068, 0.31045873171646221, 0.63165565086837083, 0.43904448361864867, -0.99141326173148259], [-0.10813635245755182, 0.053017491171686304, 0.13397146726472675, 0.11660916026970858, 0.73720117873091828], [-0.083764436394385244, 0.37299126458666021, 0.15677835441865096, 0.023723370241955921, 0.06855473841578319], [0.42314879644077519, -0.072960738763700128, 0.070922246503301922, 0.30425836056543543, 0.82105997786022966]], [[0.034053216147234, -0.27364775082996307, -0.72891077829480233, 0.30546218456429042, -0.55480251363549549], [-0.58386958435697278, 0.4052534062076627, -0.19835951605334756, -0.095975667822810529, 0.43611990796242073], [-0.87172390500924357, -0.086179439948517178, 0.41408772917281067, -0.20527166828877452, 0.99985772858435285], [-0.71364034968478873, 0.095708371927174518, -0.16146464553266782, -0.82746797743824319, -0.38070062966405693], [0.12002067174230024, 0.90167742202430889, 0.57060315051613997, -0.14782278161534612, -0.81518294957980819]]]])
        ref=generalTensorProduct(xx,yy,axis_offset=2)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank3_and_0_offset0(self):
        sh0=(1, 6, 4)
        sh1=()
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[0.85126043796334705, -0.94262324997755198, -0.77353267780700996, 0.0094479666813893637], [0.45910271568306649, -0.40197130164804107, 0.43675715917064539, 0.52600744533711907], [-0.28975901108288138, -0.41257603996894088, 0.58367903521291242, -0.16023692722789407], [-0.81113856258042216, 0.55661459337116437, 0.053481051981193017, 0.53807563669639324], [0.44636120955947045, -0.37638415031838179, 0.43140558188420441, 0.65568765734981138], [-0.71472677928146466, 0.21262101406901945, 0.72061284292119709, 0.51782025379485552]]])
        yy=numpy.array(0.354413768855)
        ref=generalTensorProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank3_and_1_offset0(self):
        sh0=(2, 2, 6)
        sh1=(4,)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[0.18847958660574737, -0.8841279358918579, 0.19108849344341339, 0.16327511657841409, 0.55241958963156734, -0.88961993572697473], [-0.35188592603621105, 0.16097121472904341, -0.16064358409216206, -0.37273609744653102, 0.54405599564361862, 0.24253052272532205]], [[-0.61503607074657096, -0.98186308051958715, 0.41942384280424561, -0.86340040053419176, -0.082922476096516151, 0.12183400160720947], [0.50090966486412314, 0.65474884814979117, -0.028385226880084602, 0.68964288138163887, 0.4478836963920565, 0.36462549117661891]]])
        yy=numpy.array([-0.26648624252246988, -0.53891975610472365, 0.28630863051509148, -0.22787476598428524])
        ref=generalTensorProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank3_and_1_offset1(self):
        sh0=(5, 2, 2)
        sh1=(2,)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=1)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[-0.47719132873680459, 0.74259259873628713], [-0.058338919766196318, 0.18265650230192421]], [[0.67536135613287973, 0.45654812670440359], [-0.45372980767098547, -0.53309471412078935]], [[-0.22818438753119885, 0.91411843327063536], [0.52856600348994975, -0.37121753816131609]], [[-0.77328066363302428, -0.49604323991950494], [-0.84507119120735763, 0.031618177013813531]], [[0.29208337714832022, -0.71867282310563474], [-0.17526621612096593, -0.4349675019637449]]])
        yy=numpy.array([0.26848165070009755, 0.56076102479430179])
        ref=generalTensorProduct(xx,yy,axis_offset=1)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank3_and_2_offset1(self):
        sh0=(3, 4, 3)
        sh1=(3, 4)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=1)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[0.93778575873458947, 0.011711168974000152, 0.92001244342576571], [-0.041912859143540926, -0.1181187465394995, -0.23158209885077863], [-0.41614455554334251, 0.27657816343613395, 0.65575172718124008], [-0.31746437455283005, -0.67520375918698905, 0.17563731066956079]], [[-0.94716704375043781, -0.27172898546526691, -0.40006441592349651], [-0.2036939614376625, 0.80395717928051402, -0.26007423588555256], [0.28558196788626056, -0.95790946963152268, 0.90707764921157974], [0.077997971329522908, -0.79574841216523429, 0.79031162415083367]], [[-0.72349205761270152, -0.98972288399421626, -0.19298839893661524], [-0.66922811885428413, -0.6543647037485778, -0.17005771442037698], [0.3662223731736951, -0.13532130646401064, 0.38286904205580097], [-0.046174609748070417, -0.87288388783588311, -0.58661883114795943]]])
        yy=numpy.array([[0.76879943218087021, -0.94668064729944845, 0.44042130052239026, -0.40864978809179919], [-0.81176430152084111, 0.16166045563591491, 0.48790201722189042, 0.99711446525217506], [-0.49472715062921524, 0.15062989593240905, -0.86327179037900326, -0.8444010000828408]])
        ref=generalTensorProduct(xx,yy,axis_offset=1)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank3_and_2_offset2(self):
        sh0=(4, 4, 2)
        sh1=(4, 2)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=2)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[-0.25403029174870606, -0.45920253477425144], [0.33385577408814537, 0.0040520098236476176], [0.35410888378305883, -0.92993931226659332], [0.57374975015013452, -0.44457723210312627]], [[-0.04986969850970091, 0.92908013826757618], [0.60829633309402076, -0.61904972592471319], [-0.70089515625471011, 0.81666110874985498], [-0.43505232914896386, -0.9675556842370423]], [[-0.76948596410466275, -0.48556600153118445], [-0.29394100257760702, -0.80954902713450871], [0.9876313468972564, 0.4194912426055013], [-0.24228672510171512, 0.83452322044634175]], [[0.32604111841043437, 0.012374216570138596], [-0.34654196794154557, 0.71027949404072754], [-0.45900607917666347, -0.7466622909337961], [0.87944147617900836, -0.02770881464480679]]])
        yy=numpy.array([[0.76836481722906136, -0.8943872185057935], [0.47896890801859016, 0.18277183871519997], [0.76296181803425656, 0.82393741077236515], [0.93492975357638586, 0.72226962312016019]])
        ref=generalTensorProduct(xx,yy,axis_offset=2)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank3_and_3_offset1(self):
        sh0=(5, 4, 4)
        sh1=(4, 2, 3)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=1)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[-0.32504817845143186, 0.94009216831105125, -0.30542359204871938, -0.19449203180933217], [0.7295027155533631, -0.51204237492337956, -0.82536337164093254, 0.84595847925213796], [0.62404551714337075, 0.29798103909296469, 0.87628694614863667, -0.83588091349514171], [0.87561436678087556, -0.35868067062099751, -0.99606742002627291, 0.61524286096330782]], [[0.1919218276879715, -0.59064932697603312, 0.18340517783853882, 0.9703504869077475], [-0.14054040824592162, -0.096721099475152172, 0.050060722720745465, -0.4225055921657348], [-0.20481346960726499, 0.85103923624718436, 0.040732015430431145, -0.85615190671695318], [0.93713391006490077, -0.7999474473075141, -0.68519388228035027, -0.74644552988632462]], [[-0.9704097194850545, 0.99216764230589094, -0.94879659217951984, 0.32893725262230444], [-0.11939990748034779, -0.38394648153003264, 0.3866860493173907, 0.64365347943730811], [0.87750414782475405, 0.35616417607855411, 0.49620586631951347, -0.71117264811239056], [0.85558485905642101, -0.48935567853063633, 0.44923950690852554, 0.81340723248907176]], [[0.017962421030639719, 0.75689809805563857, -0.072526548191173656, 0.0036816243086834621], [0.98971194693715892, -0.48282826607448692, 0.19139816300673407, -0.42974922995326925], [-0.39402306320650582, 0.97260546554555471, 0.79424845792245025, -0.78660593253702649], [-0.60935733289441729, 0.14880451868214561, 0.29982888822109266, -0.19549858731431335]], [[-0.32748875496442054, -0.49286118985309191, -0.85637233292555304, 0.58829990849704505], [-0.80790564977152646, -0.73165944380196768, 0.41106927531470205, 0.06049919699445172], [-0.31344840591317569, -0.039172892072101062, -0.32867874687395027, 0.88041685704518446], [0.83336306343925526, -0.76313008788937187, 0.46219087956704752, -0.19807193478146901]]])
        yy=numpy.array([[[0.47836371916757403, -0.39814760741433797, 0.42730584252559001], [0.60862034849975477, -0.56286008772975049, 0.57558724906776471]], [[-0.98065404511517729, -0.20372297056290667, 0.65484640334992994], [0.45089529056146072, -0.57837100447000767, 0.76313268913567311]], [[-0.090125470952181486, -0.25430422089381755, 0.56469989338338888], [0.72753777109886175, -0.67492185237079783, 0.76123811245343598]], [[0.66971268984966925, -0.73234457821344212, -0.79841895256184259], [-0.49798501313455934, -0.15815685524651646, 0.57607015718034082]]])
        ref=generalTensorProduct(xx,yy,axis_offset=1)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank3_and_3_offset2(self):
        sh0=(6, 1, 2)
        sh1=(1, 2, 5)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=2)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[-0.39751478222570968, 0.63090519776198417]], [[-0.43321028130910255, -0.78388947618720262]], [[0.66555471856864301, -0.33403307971919483]], [[0.59170280421695742, -0.49931787041216191]], [[0.76060320300053119, 0.24845347590717859]], [[-0.062950709861707699, -0.13371456910725632]]])
        yy=numpy.array([[[0.45974686204803361, 0.51230717461642561, -0.86281487733195505, 0.46855145615824156, 0.90606400977679447], [-0.9627517486637962, -0.23655571065410586, 0.69140829521053426, 0.079822823489626771, 0.33987126258621281]]])
        ref=generalTensorProduct(xx,yy,axis_offset=2)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank3_and_3_offset3(self):
        sh0=(5, 1, 3)
        sh1=(5, 1, 3)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=3)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[0.97961511805446744, 0.28057775794250994, 0.21134134902902102]], [[0.25674972032329424, -0.48834021430354868, 0.067410853019557404]], [[-0.41349296183614737, 0.73783089002247504, 0.84589043206706749]], [[-0.070106497345671315, -0.27399864531772944, 0.4593206087669699]], [[-0.59975712549571125, -0.49631810616893013, 0.27973164512632165]]])
        yy=numpy.array([[[0.33351952552468522, 0.061555930452222407, 0.42413425680831529]], [[-0.0038294101851636952, -0.79908909113609883, -0.51711641298465016]], [[-0.56849064761849188, -0.14803264141889683, 0.47712093186980264]], [[-0.24174597714463886, 0.90322950660001067, -0.11680554654003394]], [[-0.69368421230599742, 0.18441848738430977, 0.74894304403901724]]])
        ref=generalTensorProduct(xx,yy,axis_offset=3)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank3_and_4_offset2(self):
        sh0=(2, 4, 2)
        sh1=(4, 2, 1, 6)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=2)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[0.54534881331652962, 0.92143303441546487], [0.27300100711910313, -0.67799013916569639], [-0.30787251455375531, 0.77724408243903476], [-0.81839130961223838, -0.60630511627339922]], [[-0.89532902206838694, 0.58953724967275067], [0.53664291331941971, -0.1156276218259078], [0.80738337782309144, -0.31581591208217774], [0.61968448483670446, 0.95813138844699575]]])
        yy=numpy.array([[[[-0.0011637047597723438, 0.86560822882261768, 0.95219309646549988, 0.14495354107546055, 0.80391930386951538, 0.49006551973316737]], [[-0.93738073161684943, 0.51924040531520421, 0.62808397691248907, -0.2037186491127112, 0.23518990439035337, -0.85806227793030421]]], [[[0.083660332850568064, -0.28283241616613508, 0.81123408828128096, -0.2294163907157678, 0.058903103157633252, -0.11345645757141543]], [[-0.26832093608258467, 0.23471258813129725, 0.47894361187936951, -0.85055878704748467, 0.24600732257222657, -0.0089329065708263489]]], [[[-0.72038196517289865, -0.00059088151332420402, 0.5953839173235147, 0.98784718742142852, 0.56436673842274887, 0.95413653131987486]], [[-0.69304666365472922, -0.85683818298102166, -0.61411135794747729, 0.84797965287070332, -0.82044599479094371, -0.44720223861138186]]], [[[0.69925994619149923, 0.79060831863070491, -0.37366419951383389, 0.45205471333574709, 0.3607842967726258, -0.7901474833400024]], [[0.67777382813990883, -0.63420405269782387, -0.44714475931054376, -0.44285592563799425, -0.15996435964213407, -0.24478580573123376]]]])
        ref=generalTensorProduct(xx,yy,axis_offset=2)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank3_and_4_offset3(self):
        sh0=(3, 1, 5)
        sh1=(3, 1, 5, 6)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=3)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[0.50114269640381437, -0.071315588630171511, -0.15158257823336463, 0.71461008190092423, -0.077370666693586276]], [[-0.64955202080430818, -0.2252044543939371, -0.79934303442093735, -0.58205673032247196, -0.0095683177293814925]], [[-0.1809221773561478, -0.67318357467856926, -0.93211658170211131, 0.76575239362175185, -0.30134256363561152]]])
        yy=numpy.array([[[[0.80136531835015501, -0.41196108593601077, 0.76443334103774996, 0.61559716351423077, 0.85341618820391552, 0.92399292111309239], [0.53356655901985395, 0.9352446205891376, -0.069855856791044335, -0.36412864894644481, 0.93160463711800068, -0.27170520075766236], [-0.53273689900826726, 0.74076481672282113, -0.5400402889934659, -0.3732859543181879, 0.34757467681079324, -0.92805986590035716], [0.8830475463023979, -0.26870801928072385, -0.94030180163875365, -0.61589949100723529, 0.8610346343718096, 0.13626213648871666], [-0.44765452153964014, -0.14099264516064069, 0.69225300709995308, -0.82284505961286403, 0.82654752239546969, 0.92586376879085397]]], [[[0.91711712479104324, -0.66976286820037556, 0.10865162505613379, 0.01226579947710249, 0.77320397635199334, 0.46165012387890947], [0.51563697808032272, -0.71791298376612511, -0.8772354109930911, -0.024480744036732949, 0.14097564621626835, 0.75239212238106412], [-0.82418337113470286, -0.023409275964193066, 0.77321754332713488, -0.56712313037247952, -0.088038562416382415, -0.13880997659251193], [-0.95828705759105892, 0.97232840085537164, 0.4496281046615207, 0.91078556826563983, 0.34154361885185081, 0.20961421455192175], [0.27765362346754308, 0.55499671774140569, 0.84141295897867185, -0.74237788978407226, -0.055709120365928344, 0.7011076709526165]]], [[[-0.66922745697957309, 0.99646189058816614, -0.69276075685698246, 0.48791232183364475, 0.4929557887010021, -0.23405772622280741], [0.94738523379867168, 0.70679782023859428, 0.555475098713063, -0.60097913445605866, -0.68471960031847079, 0.83837480734964087], [-0.12357225911271486, -0.97203661566906097, -0.29138016490657526, -0.35718582323433279, 0.55403444802603774, 0.88799838608300941], [-0.9618610582166407, 0.29200145250270526, -0.92485141935310966, 0.53324507282073053, 0.86572371396789416, -0.91545539025267986], [0.90972403084881148, 0.6722389921921379, 0.28251568464905774, 0.83746155001792877, 0.8499985023430543, 0.82779653229419847]]]])
        ref=generalTensorProduct(xx,yy,axis_offset=3)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank4_and_0_offset0(self):
        sh0=(2, 1, 6, 3)
        sh1=()
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.073917423877604138, -0.76545026378458969, -0.60568631199752998], [0.8455014387040658, 0.77654693271312492, -0.41204797539799176], [-0.30453790796131774, 0.87273075624227148, 0.42073278560321214], [-0.79735587358875915, 0.69550959875305662, -0.62367117886500711], [-0.15092796789791718, 0.40367166383063524, -0.63942588708946224], [-0.99422001098073354, 0.077964813794479282, -0.520947311468277]]], [[[0.26718435384008932, -0.14653345568250997, 0.18532954905452104], [0.89966253385747863, 0.6582630540005352, 0.76588032914048254], [-0.29796719411748551, -0.45417256822621321, 0.89944765522980186], [-0.51623779128362668, 0.94898290395440732, 0.2852463182471483], [-0.149015072111087, 0.99584123455131879, -0.62158568165330919], [0.60637721875199246, -0.81169916906648565, 0.79922944312734612]]]])
        yy=numpy.array(0.365225384835)
        ref=generalTensorProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank4_and_1_offset1(self):
        sh0=(3, 4, 3, 4)
        sh1=(4,)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=1)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.7271541969948474, 0.69813379645496143, 0.073000795328191037, -0.91661523018060009], [0.17030332023805883, -0.59539018198213478, 0.53980523606153108, -0.99712702456295221], [0.25727081420341991, 0.90288373315265358, -0.74512345722479711, 0.72280596758506399]], [[0.95487594890138827, -0.24612298949010714, -0.85148429389514413, 0.89055481701880135], [0.745028344765855, 0.0050404535258294914, 0.5346159184640038, 0.40574813944863286], [-0.75947823083929444, 0.53523658064305102, -0.54516647902006565, 0.54609028591946696]], [[0.98844538795542447, 0.68290834341811002, 0.94238269017774856, -0.46818262959047141], [-0.46625820433549348, 0.20328643093995757, 0.49958057405167966, 0.93166713686952973], [0.77006160857343597, 0.42686054476678104, -0.20498537357455904, 0.14949790140845565]], [[-0.30224446468915223, -0.48917954201602476, 0.97106547166172708, 0.25004567341847217], [0.11773044789134524, -0.87826946050930976, 0.98308508448324861, -0.078751547392817089], [-0.16721330644767085, -0.090074287014505039, -0.84943646757306634, 0.090883200542891229]]], [[[-0.55042941460032235, -0.84740760184572173, 0.017388387307386566, 0.5548237320277376], [-0.20432911085566108, 0.96077368537527041, 0.96777149256674, -0.58316152098439189], [-0.52156017432483659, -0.31363822085893367, 0.50473714951186399, -0.6466578237068541]], [[-0.15957255415649185, 0.42813540856699372, -0.39549795724237713, -0.24037417451232801], [-0.051279773324264699, -0.78523221135974697, -0.18728504294559944, -0.6699987602155657], [-0.47743768077375259, -0.65130288781848078, -0.59184719403151531, -0.6739729188656336]], [[0.7573975007923659, 0.69730873495743495, -0.69448049870638728, -0.67334593478631821], [0.26647876035009288, 0.83295948015287147, -0.39931162917323815, 0.86360438917879834], [-0.034685048078263225, -0.68962937286601056, 0.082752560621685678, 0.25481348573924612]], [[-0.84590092086826663, -0.13964225879966019, -0.70303827338537705, 0.93784588685729076], [-0.71699567625036087, 0.82339713791997893, 0.9155655297569858, 0.13301456657441557], [0.51904388512310673, -0.90910064330695484, 0.4488540792861786, 0.91837489833869212]]], [[[-0.1492461807589287, -0.73296662449574401, 0.14612224021935361, 0.4602093847740385], [0.48353107619223068, 0.68420461285294332, 0.94713730499103899, -0.56112504699397303], [-0.025905488769053076, -0.74486402436086219, 0.098532895621847416, 0.38331468985717465]], [[-0.2764786384593636, 0.73344526921321451, 0.31851882642335783, 0.37161925145801433], [0.46780062778949372, 0.84729216551600017, -0.71108448909794064, -0.77708250783750388], [0.78903464744455754, -0.078906655297216854, 0.018510349743168453, 0.86781642109919277]], [[-0.13781773952000353, -0.75103694387934672, 0.28996039940262386, 0.023226782919087752], [-0.548486401772178, 0.87892086128433999, 0.77661044624524589, 0.34427852180276708], [-0.82648250852196936, -0.19139533675190479, -0.975387125614533, 0.15867060445070225]], [[0.94044053809023165, 0.75473895057833662, 0.35484570868586141, -0.42184798486622466], [-0.95206977072463861, -0.47921712892127233, 0.010062745730360811, -0.8390506407699041], [-0.47363082742780516, -0.091767584076293929, -0.57213984708423116, -0.19233557941275214]]]])
        yy=numpy.array([0.28295944005556417, -0.21235612810457982, -0.10038958452829516, -0.080610955458413791])
        ref=generalTensorProduct(xx,yy,axis_offset=1)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank4_and_2_offset1(self):
        sh0=(4, 4, 5, 1)
        sh1=(1, 1)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=1)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.7660773104526486], [-0.15521944581610914], [0.79513768125806705], [-0.24142493558860445], [-0.5139504770445309]], [[0.57268968653413155], [0.58357706353716043], [-0.9733852763044939], [-0.60400312051351523], [0.092825370155676934]], [[-0.77829223506751499], [-0.84403469599421443], [0.78089242988973995], [0.9805920853227712], [0.86053003627893854]], [[-0.86498118855296968], [0.606218480285178], [-0.67040734364914201], [0.17760964021346992], [-0.42935607126800357]]], [[[0.71338372210875534], [0.61867096998738558], [-0.45557766510450826], [0.24382411068442433], [-0.013059440010512846]], [[0.68373731255276304], [-0.73918318547517203], [0.61824536122343932], [0.29177799108109492], [-0.16265040082991367]], [[-0.52886177930225675], [0.44295475132528694], [0.93328623877738037], [0.66720287815545776], [-0.37923749747915236]], [[-0.31129026650703695], [-0.41286805129927351], [-0.78634546173712727], [-0.15664994245287667], [0.50338966249283934]]], [[[0.57318411843528527], [-0.10359611162720328], [-0.83869241150955398], [0.57575107872166931], [0.19061045879159533]], [[-0.41489335093638191], [0.087578408561490573], [-0.030222029696512998], [0.78537424672206235], [-0.45744324127187097]], [[-0.057239757866082375], [-0.85188601088592497], [-0.69691735817443767], [-0.84685844268158839], [-0.17298082495120815]], [[0.75865279033153588], [-0.24891758002517861], [0.81102610697343569], [0.28079952829735055], [-0.78927485393703889]]], [[[-0.0072240864808619243], [0.99523962666043153], [0.73871477823271148], [-0.54296385910097711], [-0.59734115870052129]], [[-0.17592070308676044], [-0.0068742538002071196], [-0.73899054742036041], [-0.24459939246705686], [-0.82956533923131626]], [[-0.79804699743026397], [-0.71456129233241628], [0.69365083195805011], [-0.28639439701374458], [-0.99562622306085324]], [[0.20136092422411656], [-0.63608486666698205], [0.20313803676848829], [0.25425100344995299], [0.32297560292610017]]]])
        yy=numpy.array([[0.34352734070082791]])
        ref=generalTensorProduct(xx,yy,axis_offset=1)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank4_and_2_offset2(self):
        sh0=(4, 1, 2, 3)
        sh1=(2, 3)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=2)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.68754402388066205, 0.22608090229503652, 0.82590579857586355], [0.50058161772380005, 0.84461237135735145, -0.67500666368000517]]], [[[-0.92012902975191202, -0.66000969323171654, -0.9848001583020396], [0.095706553531983207, -0.10031585375423768, 0.81480504246299623]]], [[[-0.34965639738361687, 0.40273423954387555, -0.82815298593598041], [0.30420137251725454, -0.227049696414098, 0.25426574926072054]]], [[[-0.065457550963285316, -0.9733195831328938, 0.99607359489942393], [-0.31778942955806144, -0.48137761977618521, 0.84282730970777209]]]])
        yy=numpy.array([[0.6977194664582631, -0.34515410665522284, -0.44905070381024714], [-0.71391591905985252, -0.46523941548515779, -0.42045444782993324]])
        ref=generalTensorProduct(xx,yy,axis_offset=2)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank4_and_3_offset2(self):
        sh0=(1, 1, 4, 1)
        sh1=(4, 1, 3)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=2)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.32578278957416318], [-0.81908651076400485], [0.6101718610393394], [0.79182777155727457]]]])
        yy=numpy.array([[[0.90571164923815073, -0.95718551728724544, 0.60673110871984726]], [[0.82369123476057515, -0.053781141931296128, -0.56290091421789601]], [[-0.88005082782273836, -0.25443352779805095, 0.84217826187322253]], [[-0.76842133986437089, 0.83810788614123233, -0.046759435227831991]]])
        ref=generalTensorProduct(xx,yy,axis_offset=2)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank4_and_3_offset3(self):
        sh0=(4, 3, 5, 6)
        sh1=(3, 5, 6)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=3)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.85983409926692023, 0.88688215570137552, -0.58044103825376125, -0.45044857594110499, -0.45255301296553019, -0.3655455272624899], [-0.33821355080986693, -0.3708479018547719, 0.63418347224599714, -0.95038963474894556, 0.95878105262981772, 0.72279662394904975], [-0.70396939272860792, -0.32197626539534907, 0.19622039021361415, 0.62941849038037478, 0.96862572389966983, 0.075657232500621507], [-0.060388486865686541, -0.44350517405743362, 0.33742869132085396, 0.98604006295541624, -0.4450004366231799, -0.27272993879659158], [0.65724460866422496, -0.95609219647490873, 0.3318218250590792, -0.39170948742280443, 0.37512293824079701, -0.55268596594850283]], [[-0.45400418673444642, -0.58031980641327485, -0.86412679388684976, 0.62389034810598476, 0.017832381980027678, 0.36109842430328887], [-0.91219913774285177, -0.92961776495448478, -0.72584748396507925, -0.035835244973491331, 0.9817035762708306, -0.62779841554267857], [-0.8075380977784623, -0.4022307464632624, 0.98435796780383411, -0.54475317445401839, 0.92655834316447994, -0.8384507804024941], [-0.38498221162001767, -0.012260422764190038, -0.7318588928171843, 0.84324043029484841, 0.95127217247012585, 0.84092153126433411], [0.44289059179440238, -0.21678313549019679, 0.59666278527091565, 0.88322140072800037, -0.60538491180174558, -0.45592312955741732]], [[-0.047351416039508987, 0.16239500236303561, 0.21865942109756742, -0.72535881826996973, 0.19708184048062805, -0.10848206406812988], [0.2930378944064933, 0.68856647026507045, 0.44721643545011114, -0.4319489358058366, 0.80182039316629816, 0.21639861639829849], [0.00010642540787819676, 0.68537652341558175, 0.51452400625048655, 0.56704607075581781, -0.37813430287254945, 0.41195496768653861], [0.77919774124795493, -0.50037380361725248, -0.64135468160114839, 0.023514855368969467, 0.63232907080105183, -0.30235546058989815], [0.24932192799778097, -0.19209963561535282, 0.42369208509368272, 0.74149642252720072, 0.52218733703284204, 0.005351122872758074]]], [[[-0.46547617404342168, -0.89817555925717629, 0.96959280055154551, -0.49208657018084123, 0.77160744003821247, 0.40863772168383816], [0.86857339172705528, 0.67839783540685716, 0.99240242008464752, 0.71152479213718944, -0.59592795058626935, 0.043408607228088147], [0.82248641317642224, -0.31110726237207542, 0.38230075218436665, 0.16318485330105825, -0.43745597625866584, 0.60820032008983205], [-0.96765238815496502, -0.95261864708448662, -0.031757597809699778, 0.015912392330896363, -0.38009217243452076, -0.053137973805209571], [0.77323259571195324, 0.83624127764827882, -0.5599857966531645, -0.983276882397774, -0.049691910222898095, 0.17851994863677145]], [[-0.56391881547594469, -0.26141176913030129, -0.54688026372085541, 0.81771725921688798, 0.12947012446545547, 0.23618650818898734], [-0.68251137677827467, 0.018870803549529525, -0.1727821258999207, 0.68188106274098859, 0.92679003039216745, -0.73590501512412843], [0.28434600008307553, -0.75155234585006858, -0.74431891955863216, 0.71081794652010943, -0.66798452584440238, 0.47860503530228771], [-0.20246570400961383, 0.27690197213448364, -0.060801368115062759, -0.48853695393278951, -0.81798490348886355, -0.97175111881798681], [0.92492108476130963, -0.42907084422134867, -0.28261506148497384, 0.62398924584720428, 0.82973019127393322, -0.6880008989726254]], [[0.59296764052362794, 0.20750290300381669, 0.37643221801130777, 0.98110576355349699, 0.16756260568465642, -0.046839984334381191], [-0.13386491835002845, 0.35169838819355248, -0.12546103934788899, 0.49419981564637738, 0.42050628273271595, -0.17555717320509823], [-0.086694252168977526, 0.94997446640582184, -0.51499504212236125, -0.21479977780279214, 0.31168450844904561, 0.21237519482040157], [-0.84020070273257508, -0.24035540995548055, -0.97036715410825813, -0.70405538826979086, -0.50109536655600895, 0.19463467806364054], [-0.48028380049560404, 0.88714313811670031, -0.74492131768433789, 0.52619142862575097, -0.64708895334970706, 0.31730291581512327]]], [[[0.6498693620401903, -0.92117987111269284, -0.3843314336921646, -0.15590311606659912, 0.33328112834617096, 0.5595058114020357], [0.67595843772112185, 0.56781006607354434, 0.69486816131207152, 0.77892219942194085, 0.17013282168404409, 0.41403216652841257], [0.28873873721427001, 0.50539736313804018, 0.10309206807278248, 0.25980582253733209, 0.99824283728154439, -0.99106712893931537], [-0.81749881980671968, 0.13768749248520029, -0.29218933758688781, -0.95819882605639961, -0.085218915548848084, -0.41549278022834057], [-0.66517138656953212, 0.69009179893274331, 0.78221410564570504, 0.14503251449779309, 0.22902431691473168, 0.85691465888015506]], [[0.98806340603675458, 0.79262799923354721, 0.1861709993459697, -0.90658820751421687, 0.18573123557610316, 0.94861896266908352], [-0.69719461857657938, 0.84070925216505898, 0.64217271310241397, -0.49915368969387397, -0.39450157399953723, 0.74618844653983518], [-0.010740592700428486, 0.73724648232342482, -0.34105809154847888, -0.34136145671923557, 0.4238338042527221, 0.7062582551251555], [-0.13266106953805745, -0.17982687837984157, -0.97202455109796748, 0.59078731320132305, -0.29961466883043131, -0.030723734825482962], [0.70178135945933406, -0.95652300770425502, -0.41585825125042164, -0.40088911313834918, -0.45712460465329863, -0.3788871319046776]], [[-0.372648256723209, -0.19489724650093354, -0.16839159151959548, 0.73853913788238512, -0.78320063707232834, 0.98452069821349886], [-0.25214292743220112, 0.87065025770189819, 0.27963265144004712, 0.88559068898369864, -0.3122771665407047, 0.8294026965128567], [0.9337757898692145, 0.79926256947765828, -0.29800167658860466, -0.639240207002987, -0.70870806767327266, 0.77844536642692863], [0.96762039702388458, -0.85038231762857475, 0.18867694690348569, -0.039454781417562756, 0.18454683458508669, -0.11125795779292647], [0.51200206247113678, 0.1682554690164979, -0.43014877255074868, 0.9055778131183525, -0.099342272546588894, -0.91870417214047251]]], [[[-0.61618970527100214, -0.71686265947787886, 0.75897520357492132, 0.6624399180633207, -0.5336502871780493, 0.88463943773564013], [0.33707241476809102, -0.35699817687623958, -0.75125700926891392, -0.074802876053597256, -0.88547428112443871, 0.8393185360909623], [-0.84974698143345528, -0.21811062029271122, 0.56871033888317513, 0.66881025861875432, -0.96312398173664682, 0.63916605444303132], [0.23404009152779426, -0.10031561457510385, 0.31139682136823721, -0.95827473635928206, 0.54129281857270395, -0.25263952623938968], [-0.26425149989694163, 0.83758513708668292, 0.65363787659683603, -0.037259070118206061, 0.55558113209058901, 0.86182494093091]], [[0.53620569150878605, -0.42375714515770002, -0.52867754037675208, -0.75384325474731551, 0.27733484740793179, -0.83057342059096362], [-0.15263568874026556, 0.038091826629979897, -0.16652653743521451, -0.1079180515809961, -0.36599147788641528, 0.39450254628867421], [0.9203279553846444, 0.78938871086060591, -0.59828289016527214, 0.82183021064029327, -0.97316275135342933, -0.62894796743038128], [0.82789725800192637, 0.83316580567160625, -0.68909196888817448, -0.24661335901256609, -0.48773246089922129, -0.11211169618981187], [0.057922376168434653, 0.49576619014310719, 0.59854530323202026, -0.78381235691259143, -0.85960632813836013, 0.47034288307051986]], [[-0.62269153617159412, 0.51609194450278895, -0.50839183785545128, -0.56112593926924337, 0.70904732087242106, -0.84753633898427161], [-0.56574342475900341, 0.90338798451010827, -0.17852962344383094, 0.80923651614863457, 0.93870657137509061, 0.23041680989421076], [0.088679213781033717, 0.77508934793625528, -0.081670901839521193, -0.20414782115995611, 0.42418481525850082, 0.87723845767160502], [0.79858292599723857, 0.89091474770132728, -0.12978081645211659, -0.88858576560381297, -0.11610451104013997, -0.2893088948921605], [0.56403485588172608, 0.94550799015712705, -0.48054151045636151, 0.30727185067527985, -0.29173454614787797, -0.20896492441640868]]]])
        yy=numpy.array([[[0.37187225176302285, -0.039371054387632665, -0.811621051744424, -0.14145430840231699, -0.59207571282672933, -0.43119730584925553], [-0.48559014227160557, 0.34090843215947486, 0.87134313892762782, -0.12695355250342044, -0.68560684177920495, 0.79143130344654056], [0.3254029074506104, 0.38205296271169709, 0.287997928085993, -0.59443332195909981, -0.082987260457175305, -0.28283793639202903], [-0.36183826752674908, 0.56672030912471816, -0.43543402837950884, -0.31632015696339977, 0.11990425874684218, 0.69721590017475554], [-0.9314491119476811, -0.40660695046376483, -0.38498288387546276, 0.90435675867436105, 0.59576471607897274, -0.5917484302796594]], [[-0.93454659342100976, 0.13762980459575314, -0.50949026598725333, -0.78773529986507351, 0.67174267524204234, -0.097752082108036653], [-0.70690361760572373, -0.73311308828439037, 0.0097661032905980161, 0.49701504488511405, 0.40859065192112221, -0.29845510025053734], [0.83342908995145626, 0.092869612713177174, -0.33154515823158914, -0.42252929228856551, 0.36587178699766731, 0.24154467804410307], [-0.16080342480740151, 0.95268255493409026, -0.86353985072183459, 0.5072234785232006, -0.45505635922100929, -0.66714374465915838], [-0.2656489267424671, -0.6775422703084597, -0.52690684605602733, 0.88276297886735144, 0.35312743822433279, 0.066151269091338394]], [[-0.86108663340209524, -0.4173390782035975, -0.81220610674427918, -0.12162360077025136, -0.15709391839907672, -0.25293193756911969], [0.51454713812711783, 0.38732463778986803, -0.4084572220130791, -0.65932326759153881, 0.082639813042141519, -0.29571940206685499], [-0.78747849793168845, -0.7529712537254114, 0.40830286651685666, 0.0055761507164933111, 0.68289015719217039, -0.17144032941337772], [-0.13480650056753696, 0.60102438891636334, 0.70987750452633924, -0.57398785800378294, 0.62075923681377132, -0.11563606776126334], [-0.18648202075697928, 0.39468352972287124, -0.015390682855992432, 0.89092425773542128, 0.36093417745969814, 0.45912917911189099]]])
        ref=generalTensorProduct(xx,yy,axis_offset=3)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank4_and_4_offset2(self):
        sh0=(5, 2, 1, 2)
        sh1=(1, 2, 3, 3)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=2)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.66488628306927966, 0.47130915534775175]], [[-0.50276076759337784, 0.56976083520150134]]], [[[0.6480586404223716, 0.35055011544099424]], [[0.42193955366929048, -0.49028594242989088]]], [[[0.010693276619099912, -0.31005128525032322]], [[-0.60840517742618916, 0.78795593288610877]]], [[[-0.080745118665582982, 0.064861343594157406]], [[-0.50983727399634571, -0.99173015522338703]]], [[[-0.053508862059963302, -0.97861516955990613]], [[-0.8301038507387295, 0.54429652799363781]]]])
        yy=numpy.array([[[[-0.28728294867030701, -0.8176405733384875, -0.20783374785070508], [-0.76462209490725397, 0.11266387989323046, 0.31147060473585486], [-0.74750162655142161, -0.12831524704378561, -0.62662343524080644]], [[-0.1476666905594084, 0.49262961788050807, 0.93794041593070965], [-0.40834497409104942, -0.20005848931421655, -0.59916467046228727], [-0.55276917975482376, -0.88592344766562725, 0.033741750717907637]]]])
        ref=generalTensorProduct(xx,yy,axis_offset=2)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank4_and_4_offset3(self):
        sh0=(5, 6, 5, 3)
        sh1=(6, 5, 3, 2)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=3)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[[-0.22924393677293353, 0.46046680658329042, 0.8255897924195339], [0.44943057946251397, -0.14735041083629397, 0.92358883554875471], [0.93631428595051602, 0.76049322311393897, 0.38393854440298303], [-0.19858445237240274, -0.38383877061226634, -0.70255917971765425], [-0.26811936164632599, 0.99862117088613767, -0.19563155852053904]], [[-0.41770685804572416, 0.85066404761950087, -0.71447765458184942], [0.95464583620794108, 0.59202042843765379, 0.26311080499807837], [0.95866009842953837, 0.47349389011635257, 0.028146568240065672], [-0.99828911948478916, -0.023838536361476592, -0.096170414981747276], [0.9657122373900362, 0.478110665927022, 0.9936111122004172]], [[-0.27621051468680569, -0.99405600125637927, -0.77660014534483257], [-0.35664459699187168, -0.61449134874646516, -0.13111970452321398], [0.31764520012935327, 0.68209351978340127, 0.71032233882646745], [-0.1716956203736637, -0.34858006707699096, -0.87465012631890238], [0.15720971250310756, 0.81106635775114877, -0.10821312465065591]], [[0.073877227097276288, 0.59488255869078732, 0.24535145448808571], [0.44132441893018681, 0.49147333046501807, -0.47492917223762854], [0.61805883587330834, -0.54043009368993444, 0.014716044036845899], [-0.94526146177016335, 0.073408423193638273, -0.74414323785304237], [-0.24692855276067238, -0.50823143022900052, 0.16719726314774963]], [[-0.43792000419830912, 0.042521345506686625, 0.55530885551961018], [0.23774407295951505, -0.50674441194026798, 0.003633923430796715], [-0.086515783157743664, 0.65104928726512368, 0.74519925744790227], [-0.86541187134246322, -0.33165261942906188, 0.44598290725180956], [0.29906398385108357, 0.58959321341288762, 0.12775144375461145]], [[-0.7368588765762496, -0.90882419649020307, -0.082205480840443546], [-0.019528061453417678, -0.20466936422373871, 0.91508252069904072], [0.80470513281362699, -0.91187107758150066, -0.1772125567477203], [0.78842653293580289, -0.92695334349003589, 0.43021476602380448], [0.76017416000937899, 0.50765251217629159, -0.3556023426922017]]], [[[-0.22972706635680051, -0.21583880024333957, -5.6695125199679453e-05], [-0.49323415087776912, -0.01997804044911855, -0.3836199862195997], [0.63417381857258315, 0.97802351315573, 0.39460012885923668], [0.89219363720931955, -0.54847361403777617, -0.25007550769545617], [-0.63685080620048651, 0.6640080979884051, -0.69134297274719003]], [[-0.20976467099844576, 0.79244326095954931, 0.80592281284944911], [-0.85318173558098542, 0.065467082565622059, 0.22512755028122622], [0.994286233636964, -0.92735732323817643, 0.76269450381477544], [0.17093859698694902, -0.50601795450445897, 0.46078500999114946], [0.31922115327025535, -0.057134898337034112, 0.37514758205259136]], [[-0.84265554637310935, -0.16217181460314567, -0.30727059593960249], [0.80110760868994135, -0.44034137383461336, 0.3553089901285158], [-0.54854108793541023, -0.11885047565551221, -0.30652053497432363], [-0.38053546372595282, -0.36536123237263074, 0.010822373867906077], [-0.92184032380785208, 0.81174332889007572, 0.48504115588555896]], [[0.14993441373839134, 0.30538877221542826, -0.65606983955033571], [0.80995483460754514, 0.58279768422273182, -0.019269696806665904], [-0.39610630763522314, 0.6173611127943448, -0.059065550612096729], [-0.81551506908132843, 0.38753226552826581, 0.25834021453250866], [-0.30000705886932111, 0.78055702129342364, 0.059518092588869642]], [[-0.20556889959637381, 0.90305750438747379, -0.34035303922373394], [0.18984543599306103, -0.41392962813997847, -0.3080543158284077], [0.5507907301981807, 0.984317270382008, -0.47044223185674827], [-0.13381066386494322, -0.64954932868497828, -0.71264121319666374], [-0.79112341652721141, -0.14773480033887187, 0.34982063872868774]], [[-0.62415278004836661, -0.89190224587804989, 0.93602952130100747], [0.17678358221800194, 0.98046108922123398, 0.98694545974473846], [-0.69899937422120639, 0.12997555021090856, 0.42054126418117788], [0.083620779076555518, 0.92448883967656958, 0.52578080744141742], [-0.8089273114314206, 0.8933449404499787, 0.28799800349096327]]], [[[-0.73354674186515978, -0.37233760692445861, -0.091212414905283978], [0.083429487173168893, 0.26832975319788677, -0.22911909403471253], [-0.35379983898298129, -0.97209279826644934, -0.31812851041789059], [0.46858336135536627, -0.90502279930358975, 0.32341522803097122], [-0.08070201042482017, -0.44005209537464252, -0.012695543543932208]], [[0.66476587802339493, 0.64510733592480274, -0.59095759281096982], [-0.31976416908606309, 0.6944999368351128, -0.89172005194014625], [-0.30537546596167564, -0.34298108187304877, -0.47988384264175021], [0.56734193345219008, -0.49401023016170575, 0.78987882889589844], [-0.80158556720146845, 0.65532151979510589, -0.70876327278941043]], [[0.57239903619416399, -0.25297889853713862, 0.85307589285294072], [0.19583105893706043, -0.29051010753856388, 0.37611213091439955], [0.73616030154676793, 0.40610432167842014, -0.71483323334175775], [-0.63055519047922548, 0.49187445670500773, 0.26534393805008261], [0.050935616896009339, 0.028716786689521934, -0.67299284962595141]], [[-0.17110434607248304, 0.84987815157831781, 0.45233746594127622], [0.4763040792979385, -0.007230650725004617, -0.9143117049192222], [-0.15358368373680675, 0.59672631617121885, -0.68929915632020466], [-0.38930783402640157, 0.89645449993767912, 0.46428448756656904], [-0.97476642290408089, 0.13934443708386168, 0.059745450141814871]], [[-0.1179969482305907, 0.9641231811389408, -0.017563722836033024], [0.30076391411459258, 0.60110259790526333, 0.077293688569980423], [0.16265400372210492, -0.80299703425383329, -0.1493882871604586], [-0.97990875875339589, 0.74886783523041611, -0.35252892031564342], [-0.19385653571154138, -0.89578671926931253, 0.66446242641376951]], [[0.022021145496140981, -0.86819125962550503, -0.71279775432598402], [-0.18793630301936659, -0.87634784062995341, 0.17146620493423859], [-0.17603995732820477, 0.40172686112706679, -0.15963020679587081], [-0.34043716235286237, 0.59346102300702253, 0.95971407311928703], [-0.93640236172344848, 0.41937585451763382, -0.61295731446179902]]], [[[-0.5981405114325824, -0.30629613971218239, 0.084274114649544485], [-0.40448628815903875, -0.76270464911659963, 0.29393410102864714], [0.22286821148555158, -0.020040792337018942, -0.10253053489364694], [0.69156590618312275, 0.30217374291270849, -0.90180329126327474], [-0.02212130092923692, -0.12073995825955297, 0.76725541752606419]], [[-0.60916702318164795, 0.23106807445555466, 0.95600814070313689], [-0.37618123629588052, 0.4785201464540112, -0.61619521525665721], [-0.65636075892826384, 0.7271003070298796, 0.33831891090168731], [-0.62366455775487717, -0.024654954016054997, -0.94819220898600909], [-0.68871575972924481, -0.079163244016515977, 0.025271434256672443]], [[0.45632429515721662, -0.93366819325975259, 0.62533560073432648], [-0.65610060267536152, -0.058918538927281494, 0.56774682735367055], [-0.040883313205618332, 0.18716414043964846, 0.82389672976327688], [0.18141065118248756, -0.4120959522372154, 0.35095642083612888], [0.77567944639085362, 0.070130236808384483, -0.29474441339634239]], [[0.23356574901163962, 0.25932650061674645, -0.91373326372169084], [-0.89772383100697839, -0.17177570427823463, -0.72276781238533117], [-0.61776252692121281, -0.35289507439284162, -0.1397044158846541], [0.80290638134740155, -0.81335120729871857, -0.3998765006555387], [0.95768446938433138, 0.39485367796974513, -0.57099918863874377]], [[0.25622334226360177, 0.28694607867415645, 0.86511878111997143], [0.20873406180599674, -0.7089703796696365, -0.34358000034005554], [0.75844105889501634, 0.76464241750846718, -0.6885177613739708], [-0.52839976186213855, 0.13726164810413222, 0.32271994964171946], [0.64375809948109319, 0.30110157738475674, 0.77205600109644146]], [[0.93562362004778077, 0.53273767310932074, 0.11015091413401357], [-0.30399036500176946, 0.63565576803763335, 0.060356122896516817], [0.85669974176060282, 0.81579801500543758, -0.2267967707397065], [-0.31170791609863957, 0.84809670596193065, 0.6354421486295776], [0.84564788010017278, -0.72332485460540852, -0.084985136108125969]]], [[[-0.47444786593750976, -0.74907249232650175, 0.59615309501785219], [-0.63110487585457453, -0.79247634231977893, -0.3009687672331931], [-0.56081842179141228, -0.77210076338789779, 0.42692105031311978], [0.73578980579262665, -0.95471458359060457, -0.87324816439314312], [-0.57751475710866584, -0.93313357074750192, 0.82107648348084683]], [[-0.47925874305301974, -0.46959359570887327, -0.13748356705605014], [0.45057343367081493, -0.58954536097345112, 0.67024164874890735], [0.50174722563693019, -0.39836469984965595, 0.67757717016081176], [0.0096393432104981969, -0.25810781541791195, 0.85302176109169858], [-0.46914807624071475, -0.43544987228713294, 0.99401247682874394]], [[0.98654098005288349, -0.71863294977576175, 0.95566337730011841], [-0.37769117792900508, 0.37898207171502962, 0.14290523746180939], [-0.25459797406964046, -0.23820939624757953, 0.40673975369961113], [-0.77391186266992396, -0.23859546686112121, -0.99672603676777327], [0.79619665792072403, -0.45230528117331392, -0.47438847512700533]], [[-0.090816122106270436, 0.90672033831502952, 0.9115995568972175], [-0.3389730944570235, -0.32573908068820079, 0.67039931623788251], [-0.25710791411107459, -0.22616501024491842, 0.68712285939645357], [-0.44293737219694651, 0.72642556799690516, 0.9166713333980554], [-0.49741465354693215, -0.91625299347532518, 0.84160678008747514]], [[0.334793112642503, 0.93824141282116447, -0.33928750877270031], [0.5951147213535346, -0.39264133365311649, -0.16512862867477529], [-0.60960747960064099, -0.58768455036951317, -0.31874709912111321], [-0.025254953886539644, -0.10705286323324037, 0.026432116576661224], [-0.91669421076395641, 0.91091746884383884, -0.56303714223814927]], [[-0.84621666794108319, -0.46644963541177442, -0.67980400082448345], [-0.59081580163811975, -0.93953577832130697, -0.23202045151492179], [-0.86437868353026981, 0.096335414797959151, -0.1984799224577638], [0.66720156105397166, 0.023871226043782556, -0.86593149789614898], [-0.66182630088622396, 0.26600617281934946, -0.79193306237542638]]]])
        yy=numpy.array([[[[-0.50359590440867841, 0.44808615682465502], [0.94247722736315098, -0.96452041678587386], [0.38106935861369906, -0.97784827002490093]], [[-0.88668273004145925, 0.70770444332065829], [-0.93131101569112951, -0.73172336090646728], [-0.75255519015686922, 0.27115124503116705]], [[0.44071437721099183, -0.62350945224327314], [0.21467210400873915, -0.82308717322733971], [-0.36487264411605014, 0.24352564106083552]], [[0.87939079964720412, 0.75928521284998651], [-0.81941274247538698, -0.51266047623742983], [-0.41722120937277607, 0.59855574752347285]], [[-0.15590751653264623, 0.35601164407909947], [-0.45704556976879029, 0.2109089251332712], [0.10272679080198244, 0.27814333316224249]]], [[[0.05069424327115879, 0.55445729537180233], [-0.13379040713487123, 0.32026877298991496], [0.94554796568884369, -0.83651315179068075]], [[-0.57484493597289998, 0.71667824679210312], [-0.39689888213582214, -0.18407653750729858], [-0.6474387541032165, -0.17109750263866519]], [[-0.65775860869139402, 0.99414039113925856], [0.43287308671214197, -0.82626095790047849], [-0.86557266567901991, 0.56557871331826393]], [[0.63017458412753946, 0.65449726994727575], [-0.71665567732460889, 0.31102357135061887], [-0.15149037908907736, 0.33777284070547497]], [[-0.19221538349209366, -0.42771059999578775], [0.25616630466285839, 0.26950987374353996], [0.87953264550314536, 0.69194910461790138]]], [[[0.95717956782088187, 0.17889492270216056], [-0.87287228040004461, 0.3889693415524913], [0.91345656427212751, -0.3572107828756963]], [[0.11154337379266366, -0.27666268292267038], [-0.57471457544035731, -0.15627635352508062], [-0.35583544518506338, 0.78339482003845862]], [[-0.71416487945041252, 0.71862274292660588], [-0.054075327244155424, -0.97366821608341825], [0.01457214008498231, 0.358262433616372]], [[-0.34563108610148552, 0.73414133234589585], [-0.27462417381920723, 0.73051107350908628], [-0.41994319050412687, -0.56388692644929872]], [[-0.64881098712006313, -0.51140716415436072], [0.35492557787368595, -0.96066974479908085], [-0.40404232007685703, -0.7439444896460361]]], [[[0.80223033813423039, -0.41431462107589878], [-0.59869000338617329, -0.038326300098362243], [-0.60639336613150419, -0.96837427021780598]], [[0.74913956936148485, 0.45248414668808956], [-0.82348087149908844, -0.45424507352932952], [0.98272755455289151, -0.44086258468811756]], [[0.43973974966483298, -0.59504489076459466], [-0.82310811589313015, -0.20111774942081828], [0.38490725541653936, -0.43933114633010395]], [[-0.88585004641609255, 0.077580209471981076], [0.47711073016627203, -0.49604736825645035], [-0.15395476696942478, -0.72273885888438527]], [[-0.82390039274201476, -0.29836747898211624], [0.66997472839232275, 0.87058643717481732], [-0.23949778444324199, 0.12053386270201849]]], [[[-0.26186533707728721, -0.38525440288118595], [-0.2358114301667571, -0.1662836997959305], [0.84839501385829807, 0.4409916192943526]], [[-0.68407592435297726, -0.034116202422602493], [0.44328020551764058, 0.31180780607772096], [0.42720253585498069, -0.39521683521379214]], [[0.65168140906473182, -0.8640719364256968], [0.33525428230493537, 0.33096547992328085], [-0.89465853653214134, 0.51429866747550146]], [[0.50766459174575718, -0.80940357443755184], [-0.79943732315379168, 0.10758566944671566], [0.25728582955251378, 0.36117449369125398]], [[-0.84201454012324217, -0.59003316578480836], [0.82290379895674937, -0.12656650747900522], [-0.78480646469398829, 0.58276195751183368]]], [[[-0.4397822394253097, -0.8942531180537967], [-0.98814073974741845, 0.043102688511826859], [0.6342848141577313, 0.52303002494559392]], [[0.11099358444424134, 0.46414995349060528], [-0.79960468130983675, 0.70450589204106073], [0.37635345978425261, -0.11021415345716634]], [[-0.31581571992458546, -0.91844158631767425], [-0.6396825934552548, 0.60344856195574081], [-0.29194937409681176, -0.39837453079966911]], [[0.87881882004440026, 0.054246428584838746], [0.89785112254281718, 0.32084280744235927], [-0.73222688179297668, 0.76012815252726074]], [[0.67061156286452506, 0.29494222579577589], [0.2847025192468291, 0.9133602219567305], [-0.33895089650879884, 0.26935795941925011]]]])
        ref=generalTensorProduct(xx,yy,axis_offset=3)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorProduct_Symbol_rank4_and_4_offset4(self):
        sh0=(5, 6, 2, 3)
        sh1=(5, 6, 2, 3)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorProduct(x,y,axis_offset=4)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.52558334085118297, -0.72494227458247118, -0.76148723213880865], [0.090748788955887338, 0.5658315699219989, -0.51328814503664932]], [[-0.79932180845841794, -0.71893608764141126, -0.65371872024138455], [0.33205672478175519, -0.78837773950928036, -0.7944952642125882]], [[0.11000247166509514, -0.85631577430750849, 0.22237696344823532], [0.67062523450470035, -0.22229270634399012, -0.91808334809424474]], [[-0.48548734897248691, -0.015966871066239285, 0.55203200111978146], [-0.90305325657329427, -0.44433782443995917, 0.1976568626312698]], [[0.7532916351802339, -0.87225048017375784, 0.61918237280623512], [-0.55074837835011969, -0.79842933984755105, -0.61400191382908043]], [[-0.36180202406467799, -0.47047159323210574, 0.22800932018683873], [-0.7539888869874618, 0.96540268130569218, -0.11979788949440984]]], [[[0.46838354055399667, -0.98862617045050638, 0.44752532384229382], [0.22749757435643714, -0.33106193318586641, -0.15390896562034406]], [[0.42840899238563979, -0.16636446888474699, -0.017542509508547965], [0.52715094867967616, 0.67531874225038413, -0.82660442153656555]], [[-0.8949720300186117, 0.39072166676506104, -0.58309534344195146], [-0.01071653599983402, -0.88150846677754258, -0.12012554241418671]], [[-0.14165507964631296, -0.80148986412684731, -0.31876719522501795], [0.76504576532542945, 0.88056349086984032, 0.27072166511870033]], [[0.73356089440088468, -0.35052522711268108, -0.26498104678214496], [0.28633506648956852, 0.95493937514924809, -0.1373009148379396]], [[-0.24048556567240298, 0.83124642738279686, -0.8318628602713547], [-0.51469818496999964, 0.3409335202205408, 0.041316002503984706]]], [[[0.16990201531197346, -0.2499538391000935, -0.92336812819692393], [-0.85755434534865871, 0.72555471375068281, -0.93938127633453505]], [[-0.94251307859346034, 0.14142974743078507, 0.57254091912708849], [-0.49331827092857905, 0.025520324068140976, 0.60183077499547766]], [[0.087394822127396354, -0.36954839150432606, -0.43205711098911381], [-0.10534839385138484, -0.32222402346361201, -0.14348615029520007]], [[0.77122663062249508, 0.51064023475613673, -0.60514457110188768], [-0.6661039602426817, -0.46406085807938657, -0.27240692361626206]], [[0.12794498042774483, -0.31742297916384055, 0.62136111923130088], [-0.035697883307088007, 0.023014134573368983, -0.64011192199047096]], [[0.54379174566699029, -0.87641067343329104, -0.6526848423270053], [-0.14721758590173351, 0.14606226607713957, -0.51264340361398819]]], [[[-0.36364528253253403, 0.98777056729370538, -0.082288349391463678], [-0.89240338284439069, -0.34207624552856863, -0.44957517143212589]], [[0.27399002991786547, 0.45686308204560122, 0.9062266376131094], [-0.10680909232856739, -0.43755072518193039, 0.15956472989293946]], [[-0.32440823151222875, -0.42502764566644879, 0.51443555211317848], [-0.74343286346343995, -0.93996283596084873, -0.36975579018637461]], [[-0.92845982349218015, -0.30844478814116671, -0.049337747671024612], [0.75284772037901782, 0.34567467053503331, -0.37218572221529422]], [[-0.56146481312109797, 0.02081609196891554, -0.25131803165483313], [0.65089622215603571, 0.21128675655651841, -0.11704129505237493]], [[0.001791771903825401, -0.13701705530022057, 0.79205030979051871], [0.35654816452329774, -0.92621565177121656, -0.76879719238333433]]], [[[-0.32891460154027197, -0.72892900873687871, -0.60195288332639607], [0.59191448101829125, 0.26646778739802568, 0.51934647603755213]], [[0.71863181319472735, 0.61108163181139585, -0.64703870841032352], [0.11051951158654094, -0.76741903966918734, 0.86690660138264386]], [[0.68502466067937107, -0.40870279222665373, 0.90122229170737023], [-0.55929810038437333, -0.27164061827271091, -0.42104282333650844]], [[0.078659102771017286, -0.37788248169803751, 0.13791633676534221], [0.89735458966561632, 0.83292231851187326, 0.78134507416878507]], [[0.92108760444767213, -0.63336699975432631, -0.20971984135147359], [-0.98472997905575954, 0.49903072223757339, -0.06579709983457116]], [[-0.72274426010664805, 0.64834423843366706, 0.02663911427761434], [-0.78095693360639751, -0.13614561324639052, 0.13293233593677067]]]])
        yy=numpy.array([[[[0.94695236017863249, -0.075315319481529031, -0.52437455835459246], [0.074202525611561709, 0.87500604674332072, -0.84760629575414326]], [[0.42161842259531568, 0.75242881612806545, 0.33150497732546524], [-0.67383907009033206, 0.8275762231812962, -0.31462291926296149]], [[-0.6967595908730122, -0.29601780981967862, 0.42757538938972717], [-0.80430646857739885, -0.56311619869251062, -0.93775156009031191]], [[0.81110078335896185, -0.72794485373079976, -0.92796357542298669], [0.32834230143790344, 0.28857135463106975, -0.76011725513016271]], [[-0.069727775397892211, -0.91311776167953007, -0.85286021118666766], [-0.81632140572410172, 0.098944111203070673, 0.63177789983422605]], [[0.60386541303969477, 0.77800837179110771, 0.21607161020619858], [-0.51994810627155985, -0.841501074505143, 0.093131306185907148]]], [[[0.89898656172071845, -0.61063725449296813, -0.87048297489849791], [-0.42251241989424004, 0.66587523055452347, -0.51512073382160395]], [[-0.5717514970398947, 0.94748692342215102, -0.18783221607624356], [-0.96725659473181036, 0.32185428169660923, 0.029586974921242959]], [[-0.34368802681048605, -0.57003935444454346, 0.93915100044346245], [-0.66471555010658445, -0.40296462091827645, 0.21286486870991661]], [[0.17218142981169016, 0.93716504124077571, 0.20002861167738062], [0.59453284405348383, -0.32851953662615374, 0.97923156648767651]], [[0.7865246607560854, -0.74918254110478988, -0.81580592885753567], [0.15642409922670764, 0.79340680707722089, 0.67233463326654941]], [[0.36599295507828744, -0.66452611442538001, -0.69072000440275994], [-0.46522650287045209, 0.43000943533277458, 0.41286325771615173]]], [[[0.37680433095437982, 0.27050015932204086, -0.45400396914860552], [-0.41029536334644612, -0.77986486233938268, 0.31364355634278374]], [[0.17100552207314568, 0.37494993921632802, 0.63674508377236649], [-0.41948966955630995, -0.32459081713442761, 0.6559944316166828]], [[-0.89897433679364136, 0.68867532038192469, 0.77063363272562935], [-0.59688644413395719, 0.37640914171488893, 0.70750081833395151]], [[-0.37438861436662352, 0.81931618212319246, -0.91472421070896748], [0.85908134873121345, -0.70733945995471204, -0.3135046431622206]], [[-0.3467661527987036, 0.13001389437276178, -0.80469742026280877], [0.6599264755730756, -0.83355204476049138, 0.92684213064043952]], [[-0.64686985151170706, -0.065297853624648683, -0.89059477382294405], [-0.37138876366659601, 0.54362611220042401, 0.17516291245973403]]], [[[-0.68340399678200137, -0.4241417349319665, -0.71332477986277798], [0.37575119560333037, -0.96390900579348116, -0.52950623329049695]], [[-0.38654770331983257, -0.20566816116140108, 0.48767978982020543], [0.61713404152599649, 0.42118754070795372, -0.80402695692302162]], [[0.53332658178629044, 0.41628925233504588, 0.25467141408168192], [0.68812464058772438, 0.69828558283330211, 0.56812442157773568]], [[-0.51161981923082234, 0.5211472610781962, 0.56468392695781677], [0.45225874610143024, -0.63534516096225624, 0.42962155146143344]], [[0.11409798594755749, 0.97395207300541231, 0.77034338651540257], [-0.6001555466152757, 0.85534016435568994, 0.051229614247123134]], [[0.31130140141315543, -0.8985083425408984, -0.071514781381159631], [0.67697830916521262, -0.93588853145708173, -0.045508604424378207]]], [[[0.34828031523807934, -0.53333586997730609, -0.42743744502519809], [-0.69130527116220986, 0.9682727331138401, 0.23435263059087585]], [[-0.21396707153745531, 0.89710486926238064, -0.79142921683026324], [0.91403307637007836, -0.47253309630007601, -0.086174160718936799]], [[0.88016100303674594, 0.29030072407571339, -0.27486862761492703], [0.73479492469404928, -0.39215677887669864, 0.79087632147753939]], [[-0.17002549175484116, 0.87024054769694126, 0.56603173512977856], [0.60344395247687888, 0.066646111031281041, -0.074412847486138078]], [[0.0074953107154132059, 0.13073014108453518, 0.99101397891804677], [0.038077889464549708, 0.083356971916701772, 0.16478858969484556]], [[0.57679851662849324, -0.36667028032790205, 0.072095519737182645], [0.5170458936141904, -0.86636170300271731, 0.87365107813106735]]]])
        ref=generalTensorProduct(xx,yy,axis_offset=4)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank0_and_0_offset0(self):
        sh0=()
        sh1=()
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array(0.387135077558)
        yy=numpy.array(0.880827646534)
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank0_and_1_offset0(self):
        sh0=()
        sh1=(1,)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array(-0.970988054037)
        yy=numpy.array([-0.95841288016477266])
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank0_and_2_offset0(self):
        sh0=()
        sh1=(5, 1)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array(-0.278417617309)
        yy=numpy.array([[0.9045436483308491], [-0.1919660321060932], [-0.3282356373476556], [-0.12217332143237747], [0.27842520171651897]])
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank0_and_3_offset0(self):
        sh0=()
        sh1=(2, 1, 5)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array(0.220835989585)
        yy=numpy.array([[[-0.15013277553982496, 0.88690181198264106, -0.36172742445495221, -0.91948789832458977, -0.67958133762289052]], [[-0.55076696220166177, 0.71350226587593624, 0.06905782937080529, -0.77179183676194008, -0.5844023244104366]]])
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank0_and_4_offset0(self):
        sh0=()
        sh1=(1, 1, 3, 1)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array(0.791734959393)
        yy=numpy.array([[[[-0.093192129431467041], [-0.16698731480448115], [-0.78524474769660446]]]])
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank1_and_0_offset0(self):
        sh0=(3,)
        sh1=()
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([-0.74771405745174668, -0.036917401181724818, 0.015597665166543262])
        yy=numpy.array(0.462563190605)
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank1_and_1_offset0(self):
        sh0=(2,)
        sh1=(5,)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([-0.46937669164979923, -0.5924440511349427])
        yy=numpy.array([-0.86933569952012113, -0.14347203773039419, 0.57548750027000395, -0.36118674021920683, 0.094919520799668256])
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank1_and_1_offset1(self):
        sh0=(5,)
        sh1=(5,)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=1)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([0.63237794497913158, 0.29626048067166688, -0.9114802356584919, 0.22711847738157998, -0.23895605805929887])
        yy=numpy.array([-0.2692368517478827, -0.23476038374906061, 0.50416008019164482, -0.61427110692559239, 0.014326711794069968])
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=1)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank1_and_2_offset0(self):
        sh0=(5,)
        sh1=(6, 1)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([0.10516660735105821, -0.40044781836289611, -0.58421693667742725, -0.74866349074829674, -0.1516971344267346])
        yy=numpy.array([[-0.7371432201297794], [0.56488485122634247], [-0.27750056380675958], [-0.10572863404110744], [-0.43864473306528873], [-0.78836709937958549]])
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank1_and_2_offset1(self):
        sh0=(6,)
        sh1=(6, 6)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=1)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([0.12039826583667579, 0.57711865991868838, 0.15176156522077666, 0.72368750684719019, 0.79290208787175964, -0.9082878277378561])
        yy=numpy.array([[-0.0086435448266048986, 0.33017555854953318, 0.1658490286984593, 0.88128465578440429, 0.033005455018888519, -0.84395202580273732], [0.039136316171975549, -0.27692512508719092, 0.041077827531324607, -0.10028282735055161, 0.73995566732806384, 0.69681350518773533], [0.24328207403773172, 0.70482857580248592, -0.86253720361273567, -0.670824594611237, 0.48574501971122586, -0.4994873804416835], [0.56947554922629751, 0.21911710632594494, -0.78424817883384645, -0.66141962356090067, 0.25491089780752074, 0.22171962203248063], [0.25624307619528142, -0.54699186833493507, 0.18957184226662727, -0.70812319677284741, -0.98928188474721379, -0.98419692151124294], [0.26207751827280901, 0.39614366804282941, 0.35452858363445072, 0.16782918530635693, -0.5294198762052198, -0.52010084550839708]])
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=1)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank1_and_3_offset0(self):
        sh0=(4,)
        sh1=(3, 1, 5)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([0.044608697637277261, -0.51393919841154512, 0.72296074829259172, -0.84569787759926274])
        yy=numpy.array([[[0.29339119658113755, -0.67855525542650241, -0.92046151154514133, -0.0800697367784442, -0.97661158259935155]], [[0.18909801036490514, 0.84217822493538974, -0.99697063883660109, -0.96837055080722823, -0.33309429410784053]], [[0.52548476532784028, 0.16819484282247399, -0.22748288930193294, 0.65636899765184498, -0.40015947619089887]]])
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank1_and_3_offset1(self):
        sh0=(5,)
        sh1=(5, 3, 1)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=1)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([-0.82433753263208542, -0.9752538053603399, -0.72407355322753975, 0.56424230320412394, 0.23449167120323233])
        yy=numpy.array([[[0.31917445040232484], [-0.43911583410834587], [-0.35355188879910671]], [[-0.46039278260265437], [0.79574119725357351], [0.52114872723012762]], [[-0.25777522006339404], [0.27113700496457693], [0.046485885521209358]], [[-0.55352575576691954], [0.96923515771136315], [-0.29700926947101092]], [[0.62939606760515909], [-0.55386089277831196], [-0.70293104262651407]]])
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=1)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank1_and_4_offset1(self):
        sh0=(1,)
        sh1=(1, 5, 2, 3)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=1)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([-0.32511882841707007])
        yy=numpy.array([[[[0.92604537115727537, -0.83985036750617015, 0.92985495246382244], [-0.70652836524945539, -0.25887681378642968, 0.21251825986739115]], [[-0.68073084470812262, -0.73997077864365135, 0.86915942772315002], [0.20400215970363855, -0.52874697601722875, -0.5954719263292898]], [[-0.57865742133980924, 0.33376143407582815, -0.044918485946237263], [0.64646656527161483, 0.3388323739118464, -0.47747563056406039]], [[-0.9299754403741578, 0.39442932869948288, -0.31026681101363485], [-0.94048195168618864, -0.35952468544781779, 0.48909196636889285]], [[0.64940768868495913, 0.68290635498450558, -0.8078423415663496], [-0.23573821647435023, -0.48251172936307052, 0.12334210951501845]]]])
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=1)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank2_and_0_offset0(self):
        sh0=(2, 1)
        sh1=()
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[-0.17019691504824519], [-0.19124156481204158]])
        yy=numpy.array(-0.219106609769)
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank2_and_1_offset0(self):
        sh0=(2, 4)
        sh1=(6,)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[0.35094611759815009, -0.17881240074852212, -0.18963858000431411, -0.94788533511775608], [-0.087755526869514933, -0.38305798420877468, 0.25869132375504567, -0.56401445356116686]])
        yy=numpy.array([-0.15832967939809461, -0.41304294154978294, -0.39098258801019936, 0.038750734131415498, -0.49304343266203077, 0.96642025066773685])
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank2_and_1_offset1(self):
        sh0=(4, 1)
        sh1=(4,)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=1)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[-0.0077567062448478108], [-0.6054753978458034], [0.16790900720950841], [0.26717580884520142]])
        yy=numpy.array([-0.38821668198105397, -0.91624249916074096, -0.30705293916389609, 0.90175410317187921])
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=1)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank2_and_2_offset0(self):
        sh0=(4, 1)
        sh1=(1, 5)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[-0.55592702981064601], [-0.51537468348540827], [0.52429519253558121], [0.29275623221197344]])
        yy=numpy.array([[0.73047247878039379, 0.016080610016187213, 0.74289093828700103, 0.80358034418102919, 0.68967854140029483]])
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank2_and_2_offset1(self):
        sh0=(1, 3)
        sh1=(1, 2)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=1)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[-0.38420226109721356, -0.40468503942325729, -0.36249021062121378]])
        yy=numpy.array([[-0.33679209698355295, -0.75320933273435475]])
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=1)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank2_and_2_offset2(self):
        sh0=(4, 5)
        sh1=(4, 5)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=2)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[0.80002424772981806, 0.24133890309596095, -0.21283238209876432, -0.67265194468858391, -0.57914385712544703], [0.91024588758241021, 0.54369941000958621, 0.099709381380929551, -0.85482933497588998, 0.053235669654374096], [-0.87802795260056987, -0.27140086928752027, 0.67480354312431157, -0.5722454361640299, -0.65197001567139057], [0.47932987221929646, 0.094604675266055649, -0.42322575210907987, 0.21408053399208526, 0.17204328209366571]])
        yy=numpy.array([[-0.23109506464531671, -0.31790816628333474, 0.21242364621361109, -0.017934288497670314, -0.18009671196598798], [-0.68114715412583382, -0.94254037956764103, -0.47491027817080655, -0.53942099026293011, -0.97468898017664207], [0.31017297707328928, -0.58357620781191311, -0.29007134736654128, 0.41867714960483537, 0.86177946811309525], [-0.1516985769939907, -0.688490607754072, 0.87470832146127164, -0.15823029128978816, 0.75207075971757642]])
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=2)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank2_and_3_offset1(self):
        sh0=(5, 6)
        sh1=(5, 5, 5)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=1)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[0.78858720307012731, 0.1307057042232338, 0.57334424090618974, 0.5029042956966232, 0.39191951092470534, -0.34432542910410002], [-0.46773104311778901, 0.093255333673350815, -0.17575744524777281, -0.047991965244195578, 0.40548800584321731, 0.20016814234839142], [0.48824069346596888, -0.21556198905553026, -0.20305843304383098, -0.85008284731402628, 0.81659783432819677, 0.33741838728521323], [0.66514963593865861, 0.38698932392520313, 0.25201227541297344, 0.89039163568522106, -0.028021756790484798, -0.14363160708140699], [-0.24698672126380883, -0.53932961207117391, 0.14469643416775368, -0.032094959468266016, -0.078121556589154428, 0.36280651018326959]])
        yy=numpy.array([[[0.51218919784397809, -0.25622804829358103, 0.07909137604471117, -0.20725688830832878, -0.20078268166219382], [-0.57512169997523421, 0.71017035877593271, -0.065024000237916546, -0.90856230224876278, 0.69316615311432206], [-0.23166110997057232, 0.84850348992069513, 0.050946416568795172, -0.79079198422943664, 0.52652170647589513], [0.21845012421892851, -0.87694441177749249, -0.07445543581606584, -0.47942303989076729, 0.92137209522523489], [0.18611471115796285, -0.55950855421077739, -0.35735737675064683, -0.22307838862433238, 0.80836878917412003]], [[0.93299772114772472, 0.022664794142394751, -0.11798337874046849, 0.59764285511866744, -0.54140126751373407], [-0.8025028098475333, 0.8323205286296278, 0.077883182696841358, 0.97443392492961611, -0.90518654029552748], [-0.17508151449166953, -0.82459840298650344, 0.77377806771091273, -0.50210185293244436, 0.29500720793244462], [-0.53089825309342631, -0.66833050899165336, -0.91385162274967513, 0.49114313111711505, -0.73494699074959069], [0.45231460482174013, -0.23605932096708049, 0.81276346296970603, 0.92123419193138334, -0.41163046233158029]], [[0.31004625207645686, -0.91001692470586626, -0.015167241857638292, 0.62775516271309439, 0.82616234771875918], [-0.1284637546945715, -0.64445419208965649, 0.83003576614940844, 0.32577574854855329, -0.39295911244203596], [-0.9261989327628577, 0.94458513973657499, 0.61598968900189366, -0.23029671881482661, 0.98500480027302206], [-0.75882429790568384, -0.56741529371338362, -0.41396236169769818, -0.6631545875739886, -0.87148362116499722], [-0.37458596886857287, 0.76248382407089976, -0.76429082684164285, 0.034446190880999428, 0.54501278010336329]], [[-0.61019928758355979, 0.27513785068131913, -0.64849729241946763, 0.05416310207213848, -0.3411535058902837], [0.52239544130287729, 0.78677513612998484, 0.48868106361950359, 0.50618924203066262, -0.65767971314282336], [-0.52782438643111851, 0.056274966858887554, 0.39844859627570561, -0.7727468487881215, -0.72650435692769899], [0.23246053386681376, -0.66674417858341428, -0.79083449939251227, -0.014923672861346438, -0.80129803580563097], [0.31029917284415665, 0.42255988361433183, -0.82005648886643057, 0.45473367645794815, 0.97571455512249505]], [[0.60789945731326078, -0.54566936426324153, -0.75298865406962801, 0.29679580297782793, 0.044118978226979078], [0.047099759252008377, 0.96546304364222779, 0.26852192221219373, 0.45954172429948503, -0.081267239706575456], [-0.024254784942300267, -0.69799930246455988, -0.52237449941334679, -0.17050692866173311, -0.16284624867075759], [-0.64276752394033476, -0.46610935828975997, -0.18472490419288556, -0.6013518382582419, 0.70959912472723197], [0.41111173741322715, -0.75194756222532777, 0.50833741092924845, -0.36334163651105755, 0.57259460536654094]]])
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=1)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank2_and_3_offset2(self):
        sh0=(2, 6)
        sh1=(2, 6, 4)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=2)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[0.44550150608024119, 0.68633603789433018, -0.75668735675029652, 0.13283470441854672, 0.56534426956959161, 0.43820289997179995], [-0.29955869830543058, 0.20714353427479848, 0.1133563441996559, 0.80398008707912827, -0.65008416195271201, 0.41857382212648009]])
        yy=numpy.array([[[-0.020749908229469094, -0.74657888081837709, -0.93744131353218774, 0.010310450945056671], [0.48599993416496123, 0.39947562723511165, -0.86527620062476784, 0.28031093314705413], [-0.98373900713390627, 0.33231466541718602, 0.99918103327535368, 0.59068464601193837], [0.66156078416883379, 0.95790923867612077, -0.65920896632834247, 0.012573542178531794], [0.13360340489413258, 0.6972398859890756, 0.56374034995639666, -0.0023634457996184466], [0.18983959806222339, 0.20960292464980212, -0.34813739997133974, 0.69458972096151306]], [[-0.15996688648772461, 0.31926081306747967, -0.94205845277042743, 0.10780987938556197], [0.7145045064108555, -0.55120562243418436, -0.77889020486120764, -0.15589435648928762], [0.80082618059992638, -0.90743767880291748, 0.48317355401885265, -0.27816776848294067], [-0.022222486617488491, -0.49257479224069156, -0.38422202680443385, 0.85991830487206355], [0.12047425257475775, 0.22556086323758096, 0.9236838160781633, -0.46650575733999777], [0.45024242183915142, 0.97832147228297894, 0.13883093505499566, -0.38200347179659233]]])
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=2)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank2_and_4_offset1(self):
        sh0=(4, 3)
        sh1=(4, 6, 2, 4)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=1)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[-0.63497114354465278, -0.18200205553435311, 0.38601290423487722], [-0.80670712601997874, 0.67863675535532231, 0.45139508590011568], [0.52440758413418842, -0.35325365230163031, -0.40707357054226589], [-0.38690884971433737, 0.70952376315785659, 0.26656119941113365]])
        yy=numpy.array([[[[-0.99654019688080164, 0.13410587418532094, -0.88752633601566888, 0.79961448576998184], [-0.81677562895762534, 0.043621472629957747, -0.6614796653934627, 0.43224457744695344]], [[-0.42171162308292054, 0.19727035370889734, -0.29388847952113051, -0.38374467848079119], [0.92160702821150187, 0.46147576568821469, 0.8604096844098601, 0.91599671000020466]], [[0.66955818987040172, 0.95410685919225346, 0.63235640343685384, -0.48181060479893412], [-0.76980137700682416, 0.74642529395110913, 0.60484970250922321, -0.14115485082403789]], [[0.73328059321081818, -0.4724772492010858, -0.3443665107876861, 0.023777040587137366], [-0.42156367979113041, 0.73867901664353064, -0.94624605400244532, 0.51205899506293595]], [[0.79455247267023488, -0.66078847492810433, 0.091187426213301892, 0.32078268956506917], [-0.11397034373414572, 0.92493426586422589, -0.52336780649389114, 0.42140226155445859]], [[-0.33452712896488679, -0.17255962332780261, -0.64260482851405665, 0.78378761549356391], [0.24599667974442263, 0.94189098395098969, -0.399287645444105, -0.78543172366279501]]], [[[0.24500397398171003, -0.26412263906467603, 0.89910542437263574, 0.40681608936913149], [-0.38325327702408152, 0.12337231531343451, -0.56416263792004462, 0.30051990388981209]], [[0.5486524356066913, -0.37925209317296793, 0.31692089622967323, -0.29653881094954504], [-0.48774718485905399, -0.6420428801455933, -0.95247416497923498, -0.41811487415974136]], [[0.61444568449362325, -0.752009605589957, -0.14334343712052422, 0.53235465113685998], [-0.66639052265821919, 0.59320744365995703, 0.0082851257234515252, -0.68968429428147227]], [[-0.94741514590772935, 0.12275854337390313, 0.1903786661963951, 0.075309888982399764], [-0.73170252084504117, 0.35666973010306124, -0.16370108178277065, -0.24381099821934682]], [[0.25127140522771452, -0.33943917883470309, -0.27301627119358063, -0.018859699448357858], [-0.96722036016149238, 0.7012748624854046, 0.48194653032981916, -0.13229192545261825]], [[-0.98143146713652052, -0.56130421225595262, 0.25544401019966334, 0.11829869192866371], [-0.12524694134092296, -0.069885897471978486, 0.51545638999416576, -0.75508420497474149]]], [[[0.77398677519638404, 0.44314134884464362, -0.82566050769986643, 0.94303738136364279], [-0.20299026402880926, -0.74896246572779934, -0.7486408325211924, 0.4582946271968753]], [[0.9541431188049565, -0.06088031616451528, -0.81518732116936876, -0.92720218890851225], [0.50479836936704525, -0.37844784260073761, 0.8646052397782682, 0.97147962070722138]], [[-0.31064210168034223, 0.48847004866239874, -0.64785506364412937, 0.18047237288429208], [0.63911794650902687, -0.00042083521848512717, 0.60652016289702937, 0.76936377620820795]], [[-0.5716327333174549, -0.42993261690391793, -0.97195669507197691, -0.78777611162458983], [0.68285830463933817, -0.98114046283516143, -0.47794848547438185, 0.28260550228226711]], [[0.72636445349550649, 0.80891104955776627, -0.73492747324095609, -0.70016427081470711], [0.42987843828202843, -0.7022802156925243, 0.72724411407618139, 0.28300398578705699]], [[-0.043111448925442497, -0.52300536704090828, 0.62049614631181504, 0.086007456002872962], [-0.17169368622319858, -0.64584866604436608, 0.60783465529536795, 0.71793634109161997]]], [[[-0.24251495286058988, 0.6187536675962837, 0.3149388892223286, -0.99455130797574753], [0.29684975733825913, -0.025131340098453858, -0.55631028151493567, -0.66755668123251688]], [[0.038652052335984122, 0.55023630871786766, 0.61030570004046791, 0.70901915623964418], [-0.40080644923805497, -0.60933591234629714, -0.52769159317223902, 0.17263753861588382]], [[-0.31023105571118137, 0.66947539631698727, -0.77720595186838026, -0.6437116933128213], [0.95945801425906074, -0.63957107843539585, 0.39699415645443992, 0.66018685215496742]], [[0.030506556465903056, 0.73587523125274501, -0.073015951084128838, -0.63448308893465288], [-0.16823686557426365, 0.52081686320343734, 0.81149890463728558, 0.60945877631829259]], [[-0.49177560700128797, -0.9353330321037947, -0.6787097127711843, 0.66614422348329594], [0.53863182095833029, -0.89100889088490454, 0.51611916229853727, -0.3292911701826855]], [[-0.082789073327820706, -0.35522629758493385, 0.93560137561883905, -0.38077397052624584], [-0.16399318232608606, -0.40286820869290318, -0.123667755382455, -0.010728511920993666]]]])
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=1)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank2_and_4_offset2(self):
        sh0=(5, 2)
        sh1=(5, 2, 1, 3)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=2)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[-0.70927871023340705, 0.31891219847343644], [-0.96493495653780093, -0.33007004454746847], [-0.67570382204885693, -0.67128819898516356], [0.13122657168016216, -0.78313194204698133], [0.32800965303832497, 0.6459232418901939]])
        yy=numpy.array([[[[-0.78931523654764124, -0.01431044576219298, -0.82533297444735165]], [[-0.75827516336975243, 0.22519032610388301, -0.23832136106438018]]], [[[0.43185435346521417, -0.93579833012707803, 0.15472395151167517]], [[0.29304366506540647, -0.54956043714906522, 0.18285740483248913]]], [[[-0.44960138262844951, -0.91614766190403962, -0.84048797726987212]], [[-0.33188823563204783, -0.22414445819332762, -0.64323700481068324]]], [[[-0.87892662482481465, -0.65701077343217396, 0.074926788223903085]], [[-0.55523755568457078, -0.086654737536884463, -0.84250276591710205]]], [[[-0.88579325383844054, 0.87194346827266878, 0.64384512630604185]], [[-0.21234471187142523, -0.14518077255860318, -0.33049659536263443]]]])
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=2)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank3_and_0_offset0(self):
        sh0=(6, 3, 5)
        sh1=()
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[-0.30488839207404772, 0.010259199604080393, 0.25062057446697028, -0.68838734217803998, 0.62834636282872891], [-0.199242756672108, 0.26786283502721164, 0.03185255409489085, -0.26471181962065948, 0.78242718862985527], [-0.6170994352303214, -0.35141168548712565, 0.58326682858033441, -0.77782439647580892, 0.60346066185933878]], [[-0.52665372214583117, 0.60632654777010586, -0.38957245259845674, -0.69577156953003882, -0.69439826426863638], [-0.38136017659180443, 0.90574598352506275, 0.3962366782372484, -0.47306826711647831, 0.59306538314686863], [-0.73935864917856997, -0.92704416026505165, 0.50051679752395994, -0.57430024535225876, 0.48357656300940732]], [[0.79391320734947923, -0.72875931069680777, -0.44491580483569182, -0.058512135898996398, 0.78509590270002483], [-0.56345326401930862, 0.45978624714291882, -0.31538051443153869, 0.8071932340944401, -0.09216750622326586], [0.19168831934593089, -0.88763401205115677, 0.77968245117033774, -0.10944899477491865, -0.080050518378893321]], [[0.64028101782886226, -0.34432663695394616, 0.20083572696174201, -0.61319442213362718, 0.619514796767346], [0.020416780230968934, -0.18549018754980362, 0.30946634330629785, -0.077418293989355513, -0.89998210269290246], [-0.051866142929276604, 0.76599982805065436, -0.082837631001160927, 0.57238244451404263, 0.77897450093909626]], [[-0.30219728301600401, 0.12481408965063401, 0.45359271604551421, 0.93440691753714367, -0.64333506067054036], [-0.97670605306497071, -0.53532911280150763, 0.33466536582834672, -0.82629968282300359, 0.18882276613770044], [-0.32853068689289255, -0.79831893381203534, -0.099620634071971637, 0.87689256210228317, -0.41262381957356564]], [[0.11182281737184985, 0.4529721689736228, -0.60882290574690012, 0.21596070762100661, -0.19379017410307364], [-0.21794196943441557, 0.18274939613415264, -0.5026467603116187, 0.19803885059411197, -0.81006401870659506], [0.57471021203327477, -0.83971058179406244, -0.31960666302834762, 0.86525536728094776, -0.031458040815577348]]])
        yy=numpy.array(0.307326710298)
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank3_and_1_offset0(self):
        sh0=(4, 2, 3)
        sh1=(2,)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[-0.62562616408693339, 0.021157049245827286, -0.0096443124747969122], [0.45234847052649774, 0.92753895272596099, 0.63749418874920072]], [[0.14984525972677698, 0.05937644128970887, -0.31486496842214806], [-0.77851259301377995, -0.90781267432713864, -0.49928215174065649]], [[-0.49022228563811465, 0.47381430275316738, -0.64364054707231855], [0.16725932849214664, 0.2796226814293552, 0.58698875362689495]], [[-0.27434733436947023, -0.54697277316398329, 0.045724942847923389], [0.42583509093701721, 0.17116193066661167, 0.45512501586984144]]])
        yy=numpy.array([-0.64907482319322973, -0.32126879850406342])
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank3_and_1_offset1(self):
        sh0=(3, 2, 5)
        sh1=(3,)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=1)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[-0.45563141852673628, 0.10300617993559591, 0.49987017818041557, 0.54492341797675881, 0.3943027386074569], [-0.056880414644202126, 0.26498897375821873, -0.56294051910576992, 0.17501307500287799, 0.33018029666702664]], [[-0.21890999039636161, -0.51370680692624404, 0.57148436624043386, 0.57271953412613907, 0.26805637142427208], [-0.36533323608059254, -0.94850541809110167, 0.86957455232144953, 0.64025757239739489, 0.23608592376184423]], [[-0.2125590908943582, 0.25326892176028681, -0.20994603829204772, 0.23112527171356634, 0.70749104967031751], [0.38374400761101191, 0.83531509415611715, -0.54122502506524284, 0.48082022027824456, 0.49923254619945823]]])
        yy=numpy.array([0.94900518587253124, -0.80945918267731831, -0.94475467040681549])
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=1)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank3_and_2_offset1(self):
        sh0=(6, 4, 5)
        sh1=(6, 2)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=1)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[-0.43798397099110908, -0.41030774113565682, -0.26735687139687658, -0.57506259701564688, -0.44095694241390038], [0.65757524249320376, -0.15718489846780503, 0.31916518082637513, -0.93340643869431794, 0.27941194418817283], [-0.34269949422596513, 0.98495271157552411, 0.14022954248200525, -0.092805677095866068, -0.7509736385501975], [-0.27368759985579838, 0.61834617118279755, -0.81097540518015632, -0.40192322479928255, 0.34128448979614823]], [[-0.56961752929381881, -0.19722570676268725, -0.33875500147226933, 0.68574994094406927, 0.83036008692966456], [-0.66387642474816322, -0.27522969123704488, 0.42011212698085765, -0.91727829801430971, -0.79149851762873058], [-0.14331118711859947, -0.37679898074524742, -0.19827407965330335, 0.70951346769216861, 0.30867138135154737], [0.4246158150609467, 0.93302731229717706, -0.36616463055021575, 0.27531071791242723, 0.84817370171637463]], [[0.63587016031799437, 0.45868347677209043, 0.056154309989294493, -0.62889429342389258, -0.25735238710799191], [0.96383734823361, 0.77483860002744254, -0.44360096040147279, -0.33863447105109956, -0.57505908580897658], [0.78659941644051989, 0.54781677397882067, 0.3952057998113514, 0.56403899737191443, 0.49221242785326358], [-0.33139330769031261, -0.88871751357887452, 0.4156383540270896, -0.97614441617127756, -0.15391785942504899]], [[0.72521310792628868, 0.82345878388643468, -0.9421698649459409, 0.60465884229812539, -0.91776851899330536], [-0.85660937115945779, -0.1696698535277148, 0.46487263549571578, 0.42107205026674133, 0.55420066342255314], [-0.5820017560921249, 0.93770972204722347, -0.36978107994344822, -0.580078208130274, 0.84673883045984932], [-0.22639511156598413, -0.30541173049001258, 0.79481822146967818, -0.87244566759656839, -0.54531823609461427]], [[-0.1634049998928806, 0.14419547965068591, -0.77464418582761763, 0.13651900096189618, -0.56060069986901873], [0.77007501708022086, -0.60134800139964972, 0.56006366542592945, 0.48641250419567061, 0.76309132813118152], [0.210185119039076, 0.47867647082274201, -0.79254662957338584, 0.78638357085184252, -0.71143292862790575], [-0.25452418271072763, 0.40166933966941154, 0.35392601166805071, -0.86721227586163696, -0.23144524261017074]], [[0.72253359477848966, 0.56072655653866987, 0.68193173064908441, 0.42507215243526364, 0.67269639056603237], [0.36384226239700834, -0.024940207733469277, 0.25723433741249102, -0.22545760819815741, 0.42980854425371717], [-0.87070925672204691, -0.011307984397952664, -0.98057848321046159, 0.64868986510465088, -0.44295098382134812], [0.87359992873833914, 0.27891860336822627, -0.82067242361355475, -0.63167659604581528, -0.10388545794312432]]])
        yy=numpy.array([[0.9910981333402713, -0.88260864490339985], [-0.16369644136495953, 0.63686775438857679], [0.72649391751200509, -0.38744211568019948], [0.66348462841193778, -0.42184343951274705], [0.52642688788060332, 0.31827014969987455], [0.51453652325012245, 0.52476823414612217]])
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=1)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank3_and_2_offset2(self):
        sh0=(3, 4, 4)
        sh1=(3, 4)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=2)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[-0.99775641117333724, -0.15912508017201343, 0.26191438033525416, -0.041428596668088957], [0.12226896349836314, 0.44159222719713886, 0.64693221568042114, -0.39943600666795165], [-0.63497058405239115, 0.3497337437582364, 0.2485981543618665, -0.20933506185497808], [-0.20564959790318005, 0.2776812127782482, -0.032754773650837565, 0.63906213762607411]], [[-0.73694524866329969, 0.46107669811926888, -0.53456451051266596, 0.53823635757535815], [0.73075629799365882, -0.36235559865028244, -0.78446670150874453, 0.043188044024466077], [0.22631591554942609, 0.69483700462571441, 0.48190956875875157, -0.18011607677991792], [-0.43700171448221226, 0.92974415522778231, -0.89126392657327047, 0.31062268969572782]], [[0.67231898650877064, -0.70845691719307813, 0.026428870945589322, 0.3991613087915582], [-0.27343422024258235, -0.047989245259686397, -0.49614449299507313, -0.14923830880317213], [-0.80747021875426306, -0.18865759129084281, 0.76514345432847031, -0.22079953079431758], [-0.01246188557692407, -0.11092562963577501, -0.78337975153878303, -0.37066379382169456]]])
        yy=numpy.array([[-0.44923367987031804, 0.59667862639294711, 0.36731849073283929, 0.77470386910679778], [-0.47219395286048882, -0.4337154243686161, -0.73013413783618542, -0.79519836552167145], [-0.90755045878829765, -0.6909450624138036, -0.68535570652124211, 0.50398365354915109]])
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=2)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank3_and_3_offset1(self):
        sh0=(6, 1, 1)
        sh1=(6, 4, 2)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=1)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[-0.8588664905576926]], [[0.69225421387502317]], [[0.53603683094803589]], [[0.53059500565348827]], [[0.034221930549847013]], [[-0.98495172597020586]]])
        yy=numpy.array([[[-0.73168554929214591, -0.34660992900972998], [0.29881290475566868, -0.63272475754646673], [0.59276125573757144, -0.71508975946815378], [-0.01459292783103816, -0.27033766651644942]], [[-0.63686454809804105, -0.75150133449057344], [-0.92125095359562081, -0.37407147496667492], [-0.31097396243827036, 0.28760231667924008], [0.75017593283011808, 0.018295772331911486]], [[0.2914566205385547, -0.59886757135753177], [-0.94581234301894845, -0.73069673566329141], [-0.51066069487539112, 0.91867018649044829], [-0.22930529852513049, -0.31339829811357545]], [[-0.39344393061030747, -0.68211447325858465], [-0.53856353365198251, 0.052922703673007332], [0.08975235704102813, 0.49637690587609429], [0.74870422922707491, -0.50621735397510448]], [[0.48443506298066841, 0.015334329234306665], [-0.17013905900559867, 0.62751049324270847], [-0.70821998674791997, 0.9671367401967097], [-0.36132658341580037, 0.7666203348815599]], [[0.29217052713628866, 0.85564183404496075], [0.82811378459758367, -0.27698161052977266], [-0.45794631104721639, 0.80634518571059899], [0.047423265759076294, 0.49725370844242289]]])
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=1)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank3_and_3_offset2(self):
        sh0=(2, 3, 6)
        sh1=(2, 3, 6)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=2)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[-0.47488305516522411, 0.36905873926353494, 0.8236557394242261, -0.47045208336097222, -0.25828325582949208, 0.75969863437251317], [-0.94090202820098989, 0.8747152890612353, -0.62059083000189896, -0.53883633650847829, -0.20614936288437002, 0.86956228262012703], [-0.30862143893562322, 0.61374254847270082, -0.62387357811607602, 0.74795610392042722, -0.84772382596644569, 0.71946281842814552]], [[-0.69731338783291807, 0.12055067389110374, -0.10541000770373232, 0.29244561242382061, 0.85021629917788233, -0.75872208697664578], [-0.97300830041746611, 0.43051638696187666, 0.28935288470239917, 0.76844260024912692, -0.49872222493154106, -0.14270967529854195], [-0.30046860214340709, -0.96320535850142397, 0.048295953428129312, 0.045055314635591426, -0.2867592738555238, -0.59115040061950364]]])
        yy=numpy.array([[[-0.34075032472167988, -0.95723501975672276, 0.97261755246645953, 0.99214651396285669, 0.5955269100177234, 0.72850912497640818], [0.59682329048452676, -0.32601304899200745, 0.9032742115689385, 0.48706348320663451, -0.083962488520580747, -0.37854887019829841], [0.61136629690407829, -0.26555672357081606, 0.71655541641347198, 0.45560630418018988, -0.75370724497777619, 0.89829282653362341]], [[-0.13552953691024849, -0.95431889663508129, -0.86157051186162326, 0.96324072469586342, -0.33608557855733578, -0.89709802743293121], [0.82477405158747996, 0.25651617982293295, 0.32715581535623284, -0.67382651819626949, -0.54686364865846904, 0.62480451314119989], [0.68671536291327628, -0.50392760174246676, -0.83219217748544905, -0.068802963531848338, -0.6543580011038832, 0.51271654463808458]]])
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=2)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank3_and_3_offset3(self):
        sh0=(3, 3, 2)
        sh1=(3, 3, 2)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=3)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[0.4548445756338797, -0.24575114673674925], [-0.79257381652140579, 0.56975165885685275], [0.35475154897760319, 0.44796949754108195]], [[-0.20684459671239352, -0.45438583687121925], [-0.59347352105647033, 0.19053564393391986], [-0.8656887784459657, -0.15561898639233163]], [[0.60967278014771109, -0.11009841714962643], [-0.71261392426142667, 0.73432445166731219], [-0.56115484970672691, -0.87354373294836463]]])
        yy=numpy.array([[[-0.63017153732800835, 0.82940864123423408], [-0.98405949213606259, 0.44543079433965227], [-0.34884741603266756, 0.3072318775152918]], [[0.52234409612517285, 0.44190717754871467], [0.056009017175033815, -0.37001370759625041], [-0.97143873608060582, -0.095319403969574168]], [[0.69564183318019168, -0.87112038555867799], [0.76102159630076827, 0.41191129234510604], [-0.84727310926198163, -0.73982765054029653]]])
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=3)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank3_and_4_offset2(self):
        sh0=(1, 4, 2)
        sh1=(1, 4, 4, 3)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=2)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[-0.91242818348487131, -0.19643080079401942], [-0.45604695644091708, 0.99928253751220231], [0.061477978499898889, 0.61907664292322662], [0.61767884983302102, 0.12053066687946279]]])
        yy=numpy.array([[[[-0.032606541409175405, -0.034673561053454094, 0.30229458689698574], [0.66544584342680646, -0.6001461983662415, -0.51010219957766156], [-0.93927326522394261, -0.26077788808708835, -0.10831876268613705], [-0.52024989844978164, -0.73639254361895268, 0.35229609480529733]], [[0.28188051538043424, 0.44041836923905708, 0.86108717061112983], [-0.83445177945275018, -0.14714778851218191, 0.6009725838436264], [0.68646792066084661, -0.37943607304065141, -0.10581386721760389], [0.46651722129276885, 0.17198098731611489, 0.8735873281416513]], [[0.45076760746809841, 0.67570547341640719, 0.54701163528208108], [-0.1291633419559155, -0.48448654380096734, 0.035795038858594364], [-0.089495632263716152, 0.090641334000046703, 0.78305653898368854], [0.75765968164920983, 0.56098356359531154, -0.43545467880889577]], [[0.66541252949943064, -0.72421478754279511, 0.45722541885984769], [0.33832465204095974, -0.20146175446536652, 0.66093236369781283], [0.99930288844593007, 0.60982461679874822, 0.95810317896869757], [-0.93181817022526703, 0.4153256481856249, 0.93554639892377267]]]])
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=2)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank3_and_4_offset3(self):
        sh0=(2, 6, 1)
        sh1=(2, 6, 1, 2)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=3)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[0.30379218399582042], [-0.17168600180468996], [-0.30167081567431797], [0.9361365339819161], [-0.46064898995342807], [-0.38559291375004512]], [[0.41541593240460628], [0.072653062620003706], [-0.17396777892745652], [0.80307791235776627], [-0.31197509516808197], [0.24134483257444295]]])
        yy=numpy.array([[[[0.071848675757234082, -0.33568561010950049]], [[-0.5138735812859736, -0.67031234492376868]], [[0.92903947451228519, -0.26469877421717802]], [[-0.80443566664370691, 0.68239648069063308]], [[0.60274403542876076, -0.57886565016193603]], [[0.80313099061411597, -0.30425430120157793]]], [[[0.70795288718171023, 0.95290638544889683]], [[0.11828937138423234, 0.83796198330813687]], [[0.78443088929881122, -0.22627549877010655]], [[-0.25153520281121455, -0.87214643404434367]], [[0.19459556371091313, -0.46743985703689628]], [[0.83948450217797088, -0.69447616190501882]]]])
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=3)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank4_and_0_offset0(self):
        sh0=(2, 4, 4, 2)
        sh1=()
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[[-0.10488165711949793, 0.039272468169846864], [-0.64724789887768419, 0.26767303607625204], [-0.66632795069419148, -0.39378657775404213], [0.41204830658831737, -0.80929589926306722]], [[-0.37238888428221073, -0.97935003132373888], [-0.85802758998174267, -0.58153607525963347], [0.30814554544199035, -0.43328954168134515], [0.14081690371254307, 0.4562810772774557]], [[0.49376586195209149, 0.88397616450102046], [-0.050521203955125937, -0.79258035438718744], [-0.29192679769836993, 0.97318097142637683], [0.26297777300075786, -0.51412206533661542]], [[0.41452412512724535, -0.7638867265980096], [-0.58911996700617775, -0.44666140148500366], [-0.78832404468211714, 0.7116507201159652], [0.29176132848329628, -0.022676278532548944]]], [[[0.97046945099140913, 0.3337081666319619], [0.75419119936784074, 0.57634681189510961], [-0.83878738761395977, 0.92137570735554064], [-0.18027115162697349, 0.78226179086577075]], [[-0.65113418892547026, -0.97438218161522938], [0.45130781239691808, -0.23650154821826619], [-0.019557369313897066, 0.89389549498035237], [0.47222511717116822, 0.24986199254645758]], [[0.5733053361644731, 0.91988663367144308], [-0.15819930510056346, -0.042706719548460059], [0.74879560256979394, 0.046285278532287366], [-0.87558645136793278, 0.78986135661392609]], [[-0.49942587560180685, -0.50417147412360408], [0.67009258003767536, 0.94984889698739416], [-0.5639030318691336, 0.036212078674045856], [0.44995572757181623, 0.21407083354609902]]]])
        yy=numpy.array(-0.646118894818)
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank4_and_1_offset1(self):
        sh0=(2, 3, 2, 3)
        sh1=(2,)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=1)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.66692985529734083, -0.14717912568906133, -0.25907092739361404], [-0.66226406575868846, -0.15671678313457482, -0.11925897855879874]], [[-0.8374720195681542, 0.49869416628306174, -0.77179064844952028], [-0.88330637471752671, 0.047286863537971957, 0.07952911827897835]], [[0.046159026045826224, -0.7140855213249091, 0.36781423958469261], [0.41232352904589153, -0.57665359968140417, 0.03166212243195754]]], [[[-0.29123411181558923, 0.34658850671175756, 0.2722694835029198], [0.3464677996122083, -0.63582725800299955, -0.836262534419838]], [[-0.49562569463656092, -0.78535009100587128, -0.085667212932713177], [0.95363828899750658, -0.19183601742845857, 0.87412257423524964]], [[0.27608945790605532, 0.85946193593952702, -0.36409421563460298], [-0.94218484151378323, -0.75378211498966685, -0.97010170003942031]]]])
        yy=numpy.array([-0.15221498586083593, -0.45634824410790298])
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=1)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank4_and_2_offset1(self):
        sh0=(3, 4, 1, 4)
        sh1=(3, 4)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=1)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.90655599199554704, -0.33812769445364443, -0.10929229197300239, 0.67405573655891438]], [[0.98938443848161572, -0.44833794156000351, 0.6941739860741083, -0.49974397756009736]], [[-0.91596871852436701, -0.46926871741675713, 0.61306511921285023, -0.75022396674338498]], [[0.68073414612635497, 0.87405747570433268, 0.24638043127615017, 0.34334850141526396]]], [[[0.22434059660238947, -0.36773895689999203, -0.56523769255293232, -0.18395944864702996]], [[0.063666174213059534, -0.715544165589721, -0.2470678831825146, -0.66158677635436525]], [[0.29503534190802871, -0.7146083767865905, 0.28009609245678502, 0.19441307590083823]], [[0.24709580209954729, 0.70766058738694237, 0.39650808551069328, -0.97204801246968398]]], [[[-0.22931461528893493, 0.7148580369454145, -0.97588580082194198, -0.69447020448219954]], [[0.38015655578358487, 0.64747629464188572, -0.29390388131240597, 0.11700774309346285]], [[-0.48214862347436771, -0.64646984948692388, 0.16172066103966332, -0.73669924096460049]], [[-0.73431466574117299, 0.088368470799072396, 0.5812866720038834, -0.020101210812896175]]]])
        yy=numpy.array([[0.010399670474485312, -0.55332706010974286, 0.74607095244902233, 0.61437948739932691], [-0.56415687658703906, 0.41701422304392, 0.55888328739555826, -0.62801207009575633], [-0.2021581664448997, -0.99336990487521537, -0.22323348361035555, 0.35194914189027227]])
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=1)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank4_and_2_offset2(self):
        sh0=(2, 2, 3, 3)
        sh1=(2, 2)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=2)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[[-0.61561185956556863, -0.10941002239679043, -0.12136835558837245], [0.84026982271631012, -0.27460368949439085, 0.18035251489925019], [0.29870665930904794, -0.81206554555110944, -0.2441377145540975]], [[0.48799250247131853, -0.83108230644614434, 0.20527502365347305], [-0.78871450189550441, 0.862371230414547, 0.36880016243230851], [0.89620596423151455, 0.41741927434900883, -0.58995218433823493]]], [[[-0.52491450460634415, 0.54754516824460842, -0.12386931103656407], [0.020832755627525845, -0.031071384982318317, -0.15137030876181456], [-0.0058095490412739537, -0.19558525990232289, -0.72901041559722879]], [[-0.65840454062414344, 0.15247912415805431, -0.30235977134223702], [0.23845209983285476, -0.57725169852360581, -0.2597848130972924], [0.29422043093162942, -0.59291748822133328, -0.48038189978696688]]]])
        yy=numpy.array([[0.030591786692031775, 0.35644473624100903], [-0.8972576771616958, 0.084539199864791081]])
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=2)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank4_and_3_offset2(self):
        sh0=(4, 5, 4, 6)
        sh1=(4, 5, 6)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=2)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.39293824084649853, -0.82041918096984623, 0.40627034006178442, -0.026583865440369614, -0.91184025168865235, 0.94689741236193026], [0.96533218787652109, -0.90127875119509415, -0.67528095657185983, -0.8112863703393689, 0.36068411430937175, 0.77011747032799005], [0.28891449669171809, -0.55044388688734447, -0.5851096474835511, 0.939434020392933, 0.20568608516741316, -0.73472701934895834], [0.42672802104504259, 0.88599934857058327, 0.57673588343150506, 0.71673686900193956, 0.62257442451576539, 0.68565733316801381]], [[-0.36784376166640831, -0.2176066342726326, 0.6015474185708849, 0.15464072242509563, 0.5292230533079767, -0.28843627856467058], [0.89112104070461462, 0.81061943367684397, -0.047479287421422267, 0.37137061372782831, 0.51380831870225663, -0.86030052337353302], [-0.18978821502258225, 0.69070579170127111, -0.0032110701659380236, -0.13137173526240087, -0.012343243443373675, 0.82424983572619892], [-0.90184323001790867, -0.92248042701785127, 0.60212452436107866, 0.22202356134714485, 0.16024922690915355, 0.8785536987038165]], [[-0.26729585299973424, -0.88649266170667151, 0.81557479764479157, 0.35609800638432132, -0.33871193705312619, -0.61640330987504299], [-0.69431600105219426, -0.79040462301403824, -0.82118233297997145, 0.20495300602359356, 0.15522197655023739, 0.61964719112969968], [-0.25185349053576989, -0.22326624727007105, -0.99497488595293682, -0.47581760755233415, 0.93350338581575709, 0.24122160300210571], [0.769327694996782, -0.25420145527554716, -0.17926589852037456, -0.50493993607521714, -0.14723164816554091, 0.50546978110775131]], [[-0.65295557949703564, -0.45990152569534093, 0.47772812583437485, 0.41297225733503984, 0.14947401778020897, -0.66290528975789997], [-0.88638560589695881, -0.54606274173909752, -0.52349961480369123, -0.33691943910131195, 0.85064796019210309, -0.35102205656307106], [0.47677875639277323, 0.62018784022581186, -0.58448688529019655, -0.40709633834391967, 0.65697519542248051, -0.27862469164160908], [0.94808876820144827, -0.12103182519428701, 0.16750503103717818, -0.28688582070656765, -0.13789910248284576, 0.0039204833116330828]], [[0.087275232666921054, -0.91027614130663825, 0.37034944022030447, 0.51961321126826698, -0.15521264168670901, 0.42516618328468825], [-0.89530548714687219, 0.15901258716483979, -0.66335369454571014, 0.37212295516234017, -0.42097877203873146, 0.3175466911090834], [-0.21093825652422438, 0.46456124890277262, 0.67718931395106918, 0.63824536766224393, 0.82436409374689501, -0.50217232461993166], [-0.1823153155431787, 0.94938575529579716, 0.99799401631692697, -0.51956160191691803, -0.10624411396978872, 0.2098507584721232]]], [[[-0.25103656069340086, -0.12398036830946668, 0.45616863443234701, -0.6168313657998985, 0.33645218679214817, 0.77634814945291142], [-0.076332749436899494, 0.25796652789323349, 0.27405445067467071, -0.90951048140807944, -0.53323675632903811, 0.051436262164604285], [-0.57116496870240696, -0.98437793330577494, -0.5728231542073019, -0.57998803565393442, 0.89980780908386193, 0.24159070250701586], [-0.54980926678097108, 0.93337318973452255, -0.70904781017512253, -0.66937339218520875, 0.15632676726656025, -0.31950998154501242]], [[-0.36876080016760016, -0.87869589317034391, 0.47805918562355898, 0.029341517477372792, 0.8294494191595605, -0.56032596584894989], [-0.87862601115984207, -0.53702376465377766, -0.55021954734093748, -0.63726608281850994, -0.049657945371604617, 0.18032525430947488], [-0.461345251132949, -0.43539454326734983, 0.33346787202198991, 0.87458580725444079, 0.14194775544105087, -0.57469099358050113], [0.78802957424377906, -0.72802557241043919, 0.39637841136620833, -0.71782208485852728, 0.1866683637878126, 0.55964394046733812]], [[0.97472786946802525, -0.029287508183525546, -0.52910309966479208, -0.013063961572502114, 0.56985202796830303, -0.34501829014115604], [0.4587260787646259, 0.80780490999613441, -0.16066278340621643, 0.70123743568676922, 0.21455668654785587, 0.55570212534905261], [0.45899896059266765, -0.327845615143465, 0.66549346732113612, -0.24357873845237599, 0.26360115828744024, -0.91290237935806928], [0.44722858191088655, 0.80420379772172712, 0.66714936676491021, 0.81592984259142609, 0.87976863794074278, -0.74361503078857782]], [[0.94213505531590624, 0.15444812058730339, 0.037471118179893903, -0.65342233255183224, -0.92887672514214525, 0.52661867472341095], [-0.23293764547660656, 0.27127978354539684, 0.28600239346395839, 0.1887284548314645, -0.57049894050609296, -0.67144687554297877], [-0.61030475414931251, -0.21192002310625879, 0.198839507540296, -0.572804399476049, -0.1669071928516126, -0.98788971955164806], [-0.31890935168962642, -0.41032353220682838, -0.94515380376707481, 0.33509364055159119, 0.94955831365558629, -0.68084860930415481]], [[0.064474892655775884, 0.51313161880556057, -0.56874115966658323, -0.98071801071756215, -0.99196712806405607, 0.8299095566742416], [-0.66179748318859422, -0.21565872660749474, 0.97752642581113558, -0.54833067675214853, -0.90354283571986227, 0.017323492703176013], [0.0088925006879390089, -0.94950781991242361, -0.41163488602319909, 0.26464888261995423, -0.059926406132600585, -0.51987068780723367], [0.9578005435231427, 0.93944895015979291, -0.76236827667479878, 0.40192794816358091, 0.61006649313423011, 0.35292583190834659]]], [[[-0.014779359154041716, -0.68499428802115769, 0.82154631281872614, -0.96371412668343415, -0.8813742301693106, -0.63978782366097442], [0.98934280270511055, -0.63261395001498855, 0.56338223007524957, 0.55911806209997583, 0.26663572799242541, 0.51190907101896865], [-0.88193383047605645, 0.41905515192510467, 0.59933605406220125, 0.50527251074269075, -0.22347933324939628, 0.71290730670209013], [0.8013841878596204, -0.13782891045697632, -0.35079430166389858, -0.00017560536198213406, 0.94301534916722973, -0.22379022576931407]], [[0.831590887605411, 0.84324413027787437, -0.05672308858192876, -0.60285229623642267, 0.62214034379489891, 0.41823751107094198], [-0.95313327543283766, -0.15215289364198692, 0.10767986453240819, -0.74227262366276481, -0.65666501285350742, -0.37980344157813084], [0.86653976728539561, 0.71475302836060117, 0.62475799495693241, 0.82290035155129337, -0.52293650493725763, -0.55738624432179096], [0.090048136780051857, -0.1335080874868122, -0.93536094338316222, -0.32066215971773837, 0.69023313417845911, -0.17095585765194277]], [[0.6043630406071494, -0.63960326065278417, 0.98593840573402924, -0.73263455881901351, -0.89966811140154879, 0.10614973315025189], [-0.55181233378130212, 0.80620104015547889, 0.62979305252994444, 0.54604316320679969, 0.75980993481464343, -0.60846405562362627], [0.32728040674261027, 0.46522221750314774, 0.59788748625236554, 0.015244552524070309, -0.64350728817436953, -0.066895025143912656], [-0.081295369621234848, 0.28029687038494999, -0.046965537453997896, 0.29838482355895168, -0.96269827725019752, -0.34539876864159647]], [[-0.88662928104940697, 0.86625947138954418, -0.13454788084748581, 0.06816478972856177, -0.69022306151267632, -0.49847360785771877], [0.61193041688791228, 0.13343176614292385, 0.7304923758455113, 0.96131305672146827, 0.40625193219372613, -0.60371441780666779], [-0.031203297608738412, 0.41258816324714886, -0.37498043804946612, 0.88328071542907494, 0.42595319986697455, -0.95105987289695415], [0.069612496711222827, 0.25063554213621275, -0.37980662520743724, 0.5254308721325478, 0.025025692402557809, 0.15787410861505058]], [[0.92079218932166818, 0.84301204668587171, -0.86585731295799251, 0.9314825894922325, 0.43721523014925978, -0.38028360798487126], [-0.70944348130201118, -0.99401770934771738, 0.72894306747098292, 0.52494630617738669, -0.39927140054917976, -0.71403375876488773], [-0.41695345483995072, -0.039156768441865442, -0.061197233074463453, -0.93997734374954223, 0.75001325496556981, -0.098982645930198343], [-0.57216844586050519, -0.34775043796821015, -0.89539784615295104, 0.74446522577310237, -0.0805196690015062, 0.72208017257194657]]], [[[-0.25710700201723768, -0.98986014541379919, 0.057007124215029625, -0.036990413559566671, 0.82835910748489794, -0.5274992442970341], [0.13907128326194229, -0.61953098564355602, -0.54472616730076329, 0.44772225703809032, 0.354000520740817, -0.96243398211770792], [0.45118009390072311, 0.21816054970716769, 0.28124137878962041, -0.60152883307566052, 0.37273390252793037, -0.63354060100441911], [0.9587459521916486, 0.013050716297206, -0.089758117843707463, 0.79479920893423417, 0.86291315532544277, -0.31081826317775563]], [[0.67999156479686396, -0.071216322936696219, 0.47415372566560188, 0.67576935948852523, -0.57131133547686264, 0.17061089074124824], [0.63206110718966513, -0.3204557428340391, 0.68663120997063776, -0.097167681483621982, -0.72240445305900614, 0.087224825450506582], [0.98351015635546646, 0.18226457134720286, -0.10872918583269442, -0.71791484354360868, 0.55571466145949766, 0.13494462337099256], [0.14787258177198348, 0.12145113073138636, 0.040797866735338362, -0.77796670376659138, 0.74616371047323016, -0.40681915274861757]], [[0.86586103362456468, -0.74622353661230645, -0.63840592323038736, 0.57404276628549966, 0.48690699597529008, 0.84317282201098442], [0.057475347194093418, 0.76403120461542784, -0.99986291909421632, 0.7829127281175261, 0.053131812704021231, -0.65494997262822485], [0.94543911445626416, -0.11609468101911347, 0.84483095192506519, 0.003463413648991942, -0.94942518359554007, 0.51203540469300379], [-0.70991901053075002, 0.94632042039811082, 0.14042508250077135, -0.7141456697142432, -0.14018633768949385, -0.022458074165074837]], [[0.040165705278400132, 0.15370005718733681, 0.97218276878495358, 0.37609662231649899, 0.45707824339547387, -0.35688038242626918], [-0.24654644512222879, 0.32406503652981855, -0.56563119201755718, -0.68840458009930172, 0.75581688141929804, 0.46742200223426367], [-0.23262180702218904, 0.77412201158530225, -0.45752972440442163, -0.33484488076545849, -0.63796649682332851, -0.46396754699213627], [-0.80759207695168245, 0.72897009488558173, 0.064773047566101916, -0.032164475840292139, 0.36007482843667993, 0.5913862700169501]], [[0.55427691778113375, -0.68685444033519194, 0.83232829220610349, -0.32619301636663534, 0.66792291061877007, 0.026380127599552994], [0.67060355839580188, -0.50219033233567845, -0.21732148377546068, -0.51059518531615611, 0.22320142139055599, -0.21372388506042794], [-0.87710268086739362, -0.72946461546220864, -0.86350160424956424, -0.30588283463951682, -0.68809952287165221, 0.17651986717777679], [0.69447606346230462, -0.14811507046098571, -0.54574778037773841, 0.66470411382464745, 0.91063993077338989, 0.32330526842986895]]]])
        yy=numpy.array([[[-0.18323130189687165, 0.66220004791110321, -0.47180346841787557, 0.12912783992983701, 0.49882900496030991, 0.81566445061258341], [-0.46487333121491936, -0.63449483882395086, -0.36921364097446041, 0.74122101596724299, 0.69318049229614043, 0.13714398462342303], [-0.20585273042209185, 0.6309892739968026, 0.088879962310881355, 0.96037493172574706, 0.67216829990109872, 0.25066292205401219], [-0.15441942338995718, -0.27180632592653975, 0.28908918320465027, 0.42755439253948269, 0.78566914016286082, -0.44353887391392632], [-0.54372626659464829, 0.55032258583101967, 0.87580148334608987, 0.72800049575296577, 0.72478303422879931, -0.61251524039113492]], [[0.72408745889503479, -0.45896274955361327, 0.62996246944157619, -0.38162818322344738, -0.81387849897497166, 0.68450755271208674], [-0.10607120549583282, 0.94399215966835692, -0.75179007142854548, -0.069001256611736173, -0.25014395119091803, 0.72375625610792516], [0.21532583801153127, -0.40860134717218699, -0.057623068240287401, 0.48267640215919205, -0.19634159338207535, 0.01316167751109254], [0.7266328422462871, -0.7896792711755487, -0.094012575774061968, 0.45932883264105118, 0.71759951635000352, -0.069346851050806624], [0.44602965869821709, -0.18306592172452896, -0.46568924492989572, 0.55499892545929885, -0.047798099770703928, -0.73762649003508085]], [[-0.074384860385735552, -0.23012693912566951, -0.95053970553126255, -0.10506885789109544, -0.85987660175279768, 0.54557547321655875], [0.006906514342828407, 0.36129591554987339, 0.52258097087407962, -0.87691842064833803, -0.35558779391150486, -0.46520590134511153], [-0.55796906686405379, 0.63436864172245144, 0.48522910812444109, -0.96325184695526911, 0.12468983864602379, -0.13727600400497408], [-0.73886080834876666, -0.55794516409963868, -0.49002639650282753, 0.099101078320997127, 0.6213584801809473, -0.11719440910310586], [-0.74960625123684643, 0.222228167172974, 0.089521245929935933, 0.97610616269279404, -0.81074026768636309, 0.78015698319842564]], [[-0.91889044887445448, -0.88258974364887566, -0.19706135337202113, 0.75653845569715483, -0.80643548669505449, 0.19236194828723874], [0.32047056983844047, 0.9267529145236999, -0.66698255959777986, -0.84670281333613273, -0.94970487967966233, 0.90302636573331063], [-0.067945554493023419, -0.69885620488807088, 0.42190630497016191, 0.30876870020058811, 0.41214692774806938, -0.2255099437891841], [0.97057479031448457, 0.737352796061018, 0.77332350351585544, -0.8859012118056091, -0.84699912891544082, 0.42315983186733197], [0.63436412335314207, -0.2607148569781077, -0.65086330819138571, 0.33378038797472809, 0.95319077700296195, -0.83174597354907442]]])
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=2)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank4_and_3_offset3(self):
        sh0=(1, 5, 3, 4)
        sh1=(1, 5, 3)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=3)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.40085386391816602, -0.18494507999902821, -0.36014726208361991, 0.76134176574678047], [0.26236440538165184, -0.21020108453274977, 0.65991384339963455, -0.14898103020421649], [-0.27159799785373795, 0.99946973327967514, 0.64631542481264725, -0.65252446199368741]], [[0.60542630296424882, -0.10812191544136285, 0.64655196204167531, -0.24141422395745771], [0.75226654548310967, 0.67939475121351056, -0.80530889841964171, 0.38318902227161167], [-0.2437773981627489, -0.87082978031902347, -0.043676941427001958, -0.9046870894376855]], [[0.88066229974848609, -0.3230511450352358, -0.35123704321822946, -0.14596664511133062], [-0.89426231711465665, -0.025883171647132608, 0.045870441489707536, -0.61377118167103784], [0.69273703138313336, 0.79322682943261813, 0.66524941501886703, 0.64647892147033548]], [[-0.038392749935271642, 0.48128038116199856, -0.098831059373754471, 0.4231069570096424], [-0.42206942837691441, 0.71775919166191238, 0.46209928422676727, -0.23304811153625815], [-0.29162329468031323, -0.77780138853614766, 0.45448598033440146, -0.9435473326919388]], [[0.070553843345377176, -0.87750498667483368, 0.58032929996649507, 0.61040330175083746], [-0.80201966697997862, -0.97376914368161205, -0.81824060397107612, -0.98780707757041353], [-0.86489660624358433, 0.14055316344193813, -0.41261532373784604, -0.77046009900301304]]]])
        yy=numpy.array([[[0.10433122376275517, 0.29468604532317033, -0.93231627652543869], [0.33485854920135316, -0.83391162909950989, -0.1822830503510684], [-0.19219019016869776, 0.21209286235087199, 0.66540485794395177], [0.048770761571072185, -0.45530532241146138, -0.78408193870127674], [0.48667707813507022, -0.39820063244666692, 0.5065800452125282]]])
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=3)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank4_and_4_offset2(self):
        sh0=(4, 6, 3, 4)
        sh1=(4, 6, 5, 6)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=2)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[[-0.29200434058181912, 0.50808599871053017, 0.14498389424677272, 0.55544179165442675], [0.19745260452945623, -0.47489366662657284, 0.48315198246621494, -0.40922978330014015], [-0.34971811181758716, 0.55745092226386705, 0.10377872684713529, 0.74253038072427535]], [[-0.30606014136265025, -0.83494420502368172, 0.58884657965055953, -0.19695597651897967], [-0.47114767776935285, 0.90767382054741019, 0.074697945053519454, -0.99089347652022264], [0.33338972371553011, -0.17199408425823437, -0.57011193712781294, 0.013334969827206944]], [[0.43682319330931052, -0.58853198015617081, -0.37982833837151153, 0.99995476430360464], [0.77195414793249717, 0.34868585502754401, 0.056474887561247078, 0.73853294482345966], [0.10836828419951572, 0.009970738460554962, -0.69041988443733882, -0.34729798065218431]], [[0.053772854198704145, -0.57336928557330324, -0.1586700235629499, -0.57018707802073165], [0.20819960979086516, 0.23176076379581967, 0.14046125781130536, 0.58840096270291631], [0.27466039098435102, 0.63812626065405831, 0.46478623902328886, -0.71206519469050544]], [[0.12747761587615347, -0.32005536085157837, -0.84652546770494141, -0.65352395833457222], [0.72102526257654875, 0.5225816950107236, -0.52418777041070208, -0.59329171545396875], [0.042365373329045442, -0.008256626306824888, 0.17161937549265249, 0.71608104845891107]], [[-0.84959431161727506, -0.368738304609461, 0.72914368166335874, 0.72960847331740997], [0.84885582619558209, -0.6249839297062092, -0.050243189131873089, 0.96526848428551193], [0.83068765893437613, -0.38632670432563465, 0.46928695555017352, 0.26443951275131194]]], [[[-0.14214558048612624, 0.20280484091591, -0.18398747973977136, -0.021228485464955149], [0.58534679218996288, 0.13471495142370449, -0.76217718440502824, 0.98223262106896825], [-0.3068788103575113, -0.0093156603778663527, 0.92299386446923304, -0.818305294924077]], [[-0.32351350918402599, -0.84476763333805227, -0.073319512927227493, -0.88356889396164728], [-0.39135013881226399, -0.13358388300951973, 0.46126077694779677, -0.83692511947006332], [-0.0053759311953711642, 0.12812589179261824, 0.66720182876082323, -0.44041149264892798]], [[-0.45030014769634241, -0.655424703899258, 0.058780149118719205, -0.32840764197684313], [-0.7802326136580775, -0.44133075038532565, 0.49207624799617578, 0.6489390202074905], [0.6709742018142375, 0.054352895399467416, 0.31108800498556288, 0.32579229829333767]], [[0.29927843511089014, 0.40267903541872507, 0.73378616376513839, -0.3605244344596803], [-0.077592310861853697, 0.84361581977767641, 0.9816839630652654, 0.34215399334572361], [0.30645579653848332, -0.93133176456007738, -0.28605350608770674, 0.52494677092941844]], [[-0.084632134073423293, -0.9233755524521261, 0.20702662195801502, -0.62520582743968345], [-0.61431494536271702, -0.56388239417485675, 0.32913736007816952, 0.5375097429903184], [0.076766658573693247, 0.44577838353641641, -0.97114001282098283, 0.46084686955769127]], [[-0.74301204975946833, 0.46497356316300853, 0.2889276832851928, 0.56150959453979321], [-0.57022450674268432, -0.5814203182482256, 0.76137239178143012, 0.71682864213802056], [-0.69054064896830658, 0.65383900288186281, -0.15312000175278184, 0.15914282836130678]]], [[[-0.92250080946691582, 0.25406018461035118, 0.83655806037475178, -0.6138155811961552], [0.41101257423744753, 0.79786952344039452, 0.48628566854857502, -0.27035188462362747], [0.28984416129398105, 0.68455171507689538, 0.50927353407516707, 0.78755668185798022]], [[0.79322829707886888, 0.45648063595939736, -0.81643475039551161, -0.53498668278959394], [-0.8290095642573434, -0.36905834393767978, -0.20017130292520369, -0.1373911762358484], [0.21734472433235164, -0.18685123314722762, 0.33021488825834022, -0.94047613157971188]], [[-0.35317478798415269, -0.29126700799966354, 0.15442179843680592, 0.9631690755803588], [0.75076182476221209, -0.56286127823836885, 0.94564195235099224, 0.87548506202891208], [0.1744479113497579, 0.2539067851823007, 0.36616484049384801, 0.96600591758600141]], [[0.38698416373537814, 0.8364438263104399, -0.61873241842913673, 0.1105626742150807], [0.36846669439521529, -0.6114999788193427, 0.95949910437939612, -0.55300692778118665], [0.67847183363158314, -0.65484673912819114, -0.88518939967526356, -0.87730579396386488]], [[0.69892909081009247, 0.30255397142085627, 0.090475052199305628, -0.47682113706648233], [0.32248148052357517, 0.048018773306749418, -0.68002366084436505, 0.1155001028588063], [-0.8940620296612245, 0.51901122935064992, 0.39030925039196673, -0.90780200064043748]], [[-0.62425542798518974, 0.023957671383709522, 0.57434651657460911, 0.64814866450181241], [-0.83746127550378824, 0.48686735569406858, 0.31805380611276268, 0.59077719297705023], [0.77437182824730577, 0.34071485440879212, 0.75515588453444105, -0.95555208460197072]]], [[[-0.011062712228280924, -0.69308217751121082, -0.85987396212118195, 0.13305065391507442], [0.79609514623975763, 0.9346851706434367, 0.13302994893313036, 0.66651833396804872], [0.33879857176936534, -0.90691242037740571, 0.68136649655026393, 0.7158313038191304]], [[-0.10944364145106134, -0.67358303821384413, -0.46204659039975327, 0.42009533282094313], [0.089281772377171498, 0.60434737136223204, -0.82018616978293646, -0.80592493266215226], [0.42251360028091511, 0.81444055747487076, -0.32178122863311209, -0.029899343173067638]], [[0.2089625543916096, 0.2991510246302882, 0.33712794965620407, 0.13977635492826823], [-0.47060300713439385, 0.48458203291564428, 0.42264075161155423, -0.96833747594565289], [0.16382388144147519, -0.56976928465224375, -0.25857042495679328, -0.12743820808240258]], [[0.15030509581122087, 0.61519729713224525, -0.37552176685411909, 0.55130177256971602], [-0.24954000187126013, 0.53809505715871486, -0.36059545506189683, -0.10123319678444687], [-0.60112995849439277, -0.47007957220956165, -0.23971124139097433, -0.28720788217270465]], [[0.57383123642026246, 0.55317909778246621, -0.96942410957628367, 0.86236132823596701], [0.29543828122591065, -0.52450993747885066, 0.07558269380656002, -0.11371662820167283], [0.90588121181948056, 0.082213363060422706, 0.26341566024377583, -0.38990514534761433]], [[-0.479612074767235, -0.40822840862073861, 0.57979982132864971, 0.42384958262918015], [-0.84143047707522767, -0.41854145458536096, -0.85238283197135845, 0.15544072811054077], [0.41653324589464935, 0.5738448883015359, 0.86235714041449363, 0.96394072735676595]]]])
        yy=numpy.array([[[[0.0055518237763896305, -0.13104187813672641, 0.7550492223184837, -0.20937558871449036, -0.48045863545303535, -0.91231761441868486], [-0.94537449543539975, 0.7201938186346688, 0.59396142864858903, -0.11270656823130598, 0.83272886838074522, 0.26720127525867032], [-0.91167755164026731, -0.65291192939745901, -0.25422141121266173, 0.11047448635518098, -0.70924998379383442, -0.73808087750782714], [0.65194611146972536, -0.3668922457260666, 0.89254046551417865, -0.58169949194014969, 0.72807032746754219, 0.26395749780503075], [-0.85629120074871268, -0.33164002236581114, -0.82656128024164643, 0.27963364012489866, -0.80176553653863114, 0.2418029469251799]], [[-0.38787491742762636, 0.88623888197375655, -0.3684060461899239, 0.19103917520473135, 0.33930323857438438, -0.024571634566204148], [0.65691501125946794, -0.93333593080266608, -0.43466497541802496, 0.57721239926233792, 0.33517253609534947, -0.78991448059542524], [0.67124414166330304, -0.1217247704326665, 0.85665779010069176, 0.7135231191324749, 0.053551445651925267, -0.9174549253774158], [0.34892864102402577, -0.040788645778395916, 0.41167860805230494, -0.28784223859827907, 0.58263355203853284, -0.5452198529204868], [-0.45964641317751709, -0.23442040493617511, -0.24607192372014741, -0.10684732790834905, 0.4558535983395009, -0.32228052371397631]], [[0.90721290760836504, 0.033567123293587242, -0.63886874254442394, 0.18617804260248239, -0.50553584824204267, -0.24056304223127811], [-0.89592268074067527, 0.5698977284339688, -0.55982092189180777, -0.78224069353630488, -0.43990001672065326, 0.21155557205814701], [-0.34047692404815533, -0.092735481247253171, -0.85939091501896892, 0.018179289626430117, 0.3166016527349651, 0.68359772984721867], [-0.95255420017153325, 0.94717654798174089, -0.06795161905328051, -0.66843016927511534, -0.2310522480740218, 0.32354217754729575], [-0.15270320136698423, 0.63896221670434339, 0.078386632322985594, -0.25324320851543702, 0.65625265794521837, 0.73268028754157699]], [[-0.52150698653927119, 0.36511602954389799, 0.73385511670538417, -0.24953368094004702, 0.20741756865617877, 0.064488593027835162], [0.73399448187902139, 0.11156599682654966, 0.75408742185783595, 0.43132130635673005, 0.8665272327469431, -0.68611898273270544], [0.39107192367888555, 0.0026538904093496019, -0.42739508601783527, -0.059856971129323089, 0.24751775797217768, 0.25804679406920306], [0.57450760822901858, -0.63774060006986066, -0.58435520133513719, 0.20617279981374281, -0.043857243375249544, 0.2387786067004134], [0.98346982163962737, -0.15495069388488636, -0.45888160678519352, -0.35368145780043636, -0.83168623936534325, 0.42602209129289981]], [[-0.88611865701753478, 0.70275351481517223, -0.084440606717248734, -0.38619156398223353, 0.97840450260862499, -0.27793861975411538], [0.72452062096316827, 0.48722381626368017, 0.66956372956079324, -0.24346328987788479, -0.59858669651424901, -0.10438263669139314], [0.48323917643533565, -0.19211490918111229, -0.82528022197735518, 0.75711721040540048, 0.34415548449866162, -0.90850924117014475], [-0.065088793996800787, 0.010063336914960308, 0.46908726415248259, -0.12121898070143833, -0.31383428517441581, 0.074586990458306079], [0.59852483175697824, 0.73803164293092904, -0.5133627822660165, -0.077189457579518006, -0.48043881284992151, -0.81328457361756468]], [[0.49871993426116124, 0.18141010650630762, -0.77342027787321865, 0.1220545194045306, -0.60397369024076064, 0.31254208733671374], [0.45864124141609253, 0.44453140893616871, -0.38751718209451713, 0.37363240897462591, 0.05352729373533327, -0.064901387998157922], [-0.45582790110731919, -0.043155362245699491, 0.63784650912456731, 0.045742105768037167, 0.09262890769199017, -0.20829750272626346], [0.91068611041925229, 0.70083952142270478, 0.11783027055245809, 0.9379021734408346, -0.22164655540399281, 0.20887421568798059], [-0.58951239528251453, 0.015191287113052843, -0.085365700475246165, -0.48047685996250622, -0.51611874495985233, 0.60360457004094026]]], [[[0.071053049036644333, 0.29252878967692286, -0.26384040235544681, 0.38711051248427619, 0.11701682824242221, 0.96087049707826622], [0.11358385041267693, 0.20729761135315306, -0.38236198070312444, 0.024909049100613867, 0.088223695444287431, -0.66251254798560044], [0.95849921643032787, -0.055988732609186576, -0.56315640627599883, 0.58708888169359952, -0.475122608047716, 0.52492352140985354], [0.95330166621889623, 0.53298441172646394, 0.61977850210688246, 0.82975330748332143, -0.39658563844237027, 0.75078920877720545], [0.33560817100214035, -0.90963225020859295, 0.34604690796949278, -0.228050962880602, 0.74302703906347012, 0.20319801936995541]], [[-0.15331443159762004, 0.27713730376937229, -0.57583262312584127, -0.74031013990985173, 0.029878754031046562, 0.30463305050469303], [0.48488377809337435, -0.20914508603323489, 0.065694170857228285, -0.45449766069143305, 0.66287622695981097, -0.62937121970344712], [-0.84141104185774496, 0.77484284004732418, 0.46396889416655962, -0.92156444616608879, 0.89533180385019517, 0.39573620268609888], [-0.94226206516223443, 0.95527379354238362, -0.35681687928360795, -0.11412595431708317, -0.45830488784443446, 0.60801996483194687], [0.21582544014160776, 0.62153335859016279, -0.30587659932929467, -0.96696098238023498, -0.44497318293842136, -0.86156563348654513]], [[0.99227343600615581, 0.80951866536622896, 0.72140125168433022, 0.46281445163436463, -0.69565303617916641, -0.53564002329412097], [-0.75869870153385199, -0.18191641767453226, -0.017382358774595152, 0.3473607894990316, -0.8575532379757338, -0.84273047024085956], [0.24962910588113663, 0.54206299159328553, 0.96955837243336518, -0.44297611846563112, 0.8637318079649221, 0.82756489930656074], [-0.53926351560316843, -0.79261756883511114, -0.34709861687913346, -0.38205427595249053, 0.69915925884337526, -0.66438166636786966], [-0.93387627254030314, 0.7528638335161526, -0.82911026093920381, -0.63033196390710011, -0.90119798567644893, -0.72865691526968446]], [[0.81808969321150737, -0.55011668822711468, 0.20473028731967746, 0.8669891465996995, 0.47458436189663433, 0.25533826991138975], [-0.45868894948174121, 0.78120064199144634, -0.54371608691117923, 0.73052802956562535, -0.1917239804547628, 0.25406223872497757], [-0.0051667932905998804, 0.44295782649671112, -0.46468513270067957, -0.88020889028700466, -0.25146625267447864, -0.37266190001329202], [-0.3377183807652222, 0.0014815409659019174, 0.14536937451376519, -0.59252321760626425, -0.050727490022460353, -0.029124141566555739], [-0.91705391135046743, -0.4499521968376301, 0.79092714164212752, 0.75498336260550092, 0.79877278212109215, -0.99220815751164282]], [[-0.27568049626998303, 0.29272375250344718, -0.73320766508131063, -0.087537720618249715, 0.69615115191896626, -0.41561168986355623], [0.48049616466336897, -0.92888876074297588, 0.9066358176829048, -0.11476528887313142, 0.40819166967629683, 0.85109502174596008], [0.85801217961738008, 0.80743855101964246, -0.76122084197793649, -0.89301283726632685, -0.0094513455856561901, 0.70016650617732989], [-0.57805122172392198, -0.14938604515603604, 0.11712127016278817, -0.9026921705494797, -0.83901449660024086, -0.287908332729371], [0.93216955884161634, 0.17563740885627421, -0.19103395929837474, -0.60886853048720369, -0.87949571904587409, 0.28530747107196297]], [[0.77222564582949227, 0.92148304340409015, 0.92825162435696829, 0.51518353192180522, 0.13966742569664348, -0.88850550749454338], [0.36909652434103446, 0.35161921606182345, -0.1568117814046126, 0.12441364737484051, -0.76470774472082836, -0.29211858778263067], [-0.78078389809425763, 0.30401541041673608, 0.86239702046471423, 0.83284364656082066, -0.48005522676781887, 0.32511273578905264], [-0.29821542976526727, -0.62341988178699714, 0.67154632314744256, 0.53518742891563109, -0.70018199109508505, -0.7027649215413978], [-0.62372690361534677, -0.15834721713777999, 0.91320201872219209, 0.42348822016284449, 0.67617119939920189, 0.32358371317581969]]], [[[-0.22871739327651097, -0.4283048639483451, -0.29639523054729278, 0.14386337012812112, 0.76918544843594838, -0.0072924896572474918], [0.61111659978502297, 0.23578667827779154, 0.51350927503306543, -0.077664170585897363, 0.99843341011673403, -0.23398260375786273], [-0.59083505613276777, -0.2390036640351807, 0.31060195384343703, -0.37604744993259187, 0.085819933740606702, -0.16442719573468456], [0.44168247528892168, 0.97903154390157598, -0.4930480457121682, 0.97165184305640784, -0.82896872546309353, -0.14882769349059344], [0.24128429070883128, -0.11656800827156211, 0.27126247864692843, 0.94732118941975374, -0.62323842345878466, 0.27899423956334801]], [[0.27709469179174895, -0.49763203920057864, 0.72419507770401736, -0.10317909161261207, 0.3615836349797461, 0.14054128677938627], [-0.024425503797300907, 0.250065005394982, -0.069559850923327282, -0.65988767772648171, -0.17089123505627479, 0.90802066025692096], [-0.49999962457484126, -0.9278092714590922, 0.038817730850980947, 0.83087999692101966, 0.84254367478041492, 0.76153139154276572], [-0.65193119033372326, -0.48567344948781344, -0.54059766754073002, -0.36790815024031942, 0.63673405895311364, 0.88440306404176106], [-0.90085728217819594, -0.89997704871119377, 0.45788045519036968, -0.2804893964301225, 0.64299089418789879, 0.97803788114475521]], [[0.34245339073660608, -0.66264457582051595, -0.96099505592412493, -0.84460455105162091, 0.97454252145505627, -0.6302151319205096], [-0.86630198920004053, -0.98963956426095456, 0.7145270021432133, 0.98400529398677938, 0.74230631687226833, -0.38797062936958993], [0.97774521603975528, 0.80647408197065373, -0.027508806871396896, -0.42901786229112981, -0.67949307343051446, -0.35021320188846916], [0.17345917603890926, -0.39774739298921058, 0.64248510219435984, 0.43573568039375665, 0.075157639769507512, 0.7797859368917166], [-0.6004764038453585, -0.47473233350811239, -0.6018730243778414, 0.9664890419500809, -0.89520377947595664, 0.69943917283016965]], [[-0.16208292872730334, 0.51007062970228878, -0.8110524999712434, 0.28184750030476402, -0.73977517325730191, -0.54563658756551714], [0.38155635519561293, -0.1027330274649747, 0.3941770855381459, 0.12508915439197166, -0.66754630269319404, -0.52381591682062023], [0.78796900986882323, -0.87171769170613511, -0.41153475872020251, -0.80414643737247204, -0.38894968866589297, 0.33879006896097108], [-0.77151730264014096, -0.73661080469326223, -0.96543105388799355, -0.70197397780447757, 0.44863191189606777, -0.32866653468848206], [0.15841815214108879, 0.12990012233352255, 0.19581989816154399, 0.54341556168773342, 0.42204203168268584, -0.23595023622077238]], [[-0.3526406802475075, 0.89056867667610895, 0.49121665927782376, 0.63187486421101902, -0.65663332999968249, 0.22282074261143325], [-0.82936084842007518, -0.827836370777004, -0.35244667355432213, -0.26966855309784221, -0.38825449921433575, 0.36081578721378826], [0.91626587804377246, -0.15809835185805121, 0.65509073424602327, -0.97392969469888957, -0.78474483579806309, -0.96022042698088583], [0.82455529421005047, -0.51666057194934933, 0.85862271669001733, -0.79744367579776787, 0.079596862305626237, 0.57988993864431082], [0.13634557568963057, -0.85385844879767236, 0.75497352673964468, -0.98984845675182931, 0.010454209464450637, 0.89407271441657032]], [[0.22365395980354652, 0.024871849168762283, -0.35867796920274286, -0.97735693665801415, -0.71041821576182063, -0.68994024006811472], [0.61511150882182286, 0.72738374405373807, 0.64575612295705787, 0.60234186975551496, -0.77156228931946202, 0.61059310219966112], [-0.59398092183486728, 0.89631218809453994, 0.21208015090396604, -0.73676823404830372, 0.13177218130412949, 0.88676045263714309], [-0.65733155038793178, 0.64473805206269619, -0.44218028581787627, -0.43605720518977953, -0.26513890744697832, -0.26898269428753929], [0.15854289135233146, 0.39981620285515485, 0.92203530903987696, -0.69000208203526658, -0.67204270569504443, 0.51319347653989111]]], [[[-0.66887446821119112, -0.0070390029811608912, 0.33939453641388573, -0.62575946113775305, -0.0037602891909989111, 0.92947287570966641], [-0.13370346808018496, 0.42051516661587329, -0.2721354700931311, 0.7154811210604537, -0.9728374531920807, 0.67884405199542375], [-0.5316547233055442, 0.62519468097796649, -0.74233498943673371, -0.29199405375614274, 0.62748957449532772, 0.30757910346811856], [-0.33642494141433854, 0.63797272238746849, -0.80271515113008407, 0.034530902469429359, 0.21414509218130018, -0.22569184386299757], [0.55868567937391189, 0.0035356387230374153, 0.58185500360931641, -0.1631420209500305, -0.056713839610864181, -0.28088767757271604]], [[0.78041624171413693, -0.20663975053256567, 0.41293142461153165, -0.072855751343496866, -0.22090379495180357, -0.15475860590059987], [0.088609957622591162, 0.56310675759075179, 0.65153641684983987, 0.0097967125395732602, -0.10072557848817776, 0.7860215063292797], [-0.80207966194107616, 0.9938751408297839, -0.5549758341444142, -0.26094377781690992, 0.16339109057659296, 0.26165936174232618], [-0.14344838612079758, -0.60592544675353532, -0.60125165776375478, -0.3278803193350639, -0.0796813233358038, -0.95784793115377509], [0.031593028028496839, 0.99020344209926159, 0.057036027400804823, -0.92977586472585294, -0.39162694210030624, -0.22766548580355184]], [[-0.67225895646470213, -0.31913656054679307, -0.75575843384421471, 0.2366112476594322, -0.058558069689376158, -0.19246327178261757], [0.52686600557302432, 0.99363963368052355, -0.91928023518506774, -0.59572609363551976, -0.69505966327942104, 0.86365300675633416], [0.0074001122498954519, 0.71008402790708169, -0.39976204767963508, 0.11829418841533013, 0.09516417499737484, -0.74426572097868093], [0.96068511351044927, -0.70743838237281076, 0.80693842585898556, -0.36882758079139766, -0.43833530855386171, 0.20693042922013283], [0.33029021752889776, -0.55794832299365082, -0.50805546244166244, -0.083275088831157307, -0.56778896951240565, 0.9073673509507576]], [[0.39849008391417939, 0.58052115716134312, 0.27034497773997734, 0.011522278898481675, -0.99970806145219582, 0.16579199014262658], [0.88028923560297812, 0.66065789740793401, -0.78228357781379754, -0.64901019367096269, -0.33555392894655012, -0.63900580242063021], [0.26132333885036996, -0.2025967886961666, -0.35201006246681943, 0.50978111586987995, 0.58821454759128433, -0.30977032052097497], [-0.90326652396701701, 0.62768368564003318, 0.80729142193910985, -0.91021587548156857, -0.88999597202383751, 0.20330622181499836], [-0.73803730449093119, -0.086832238037745313, 0.59530681968447419, -0.069836279961910552, 0.33210588461245916, -0.81133799150317421]], [[0.72858720839161384, 0.43690000596585921, 0.58649474536530444, -0.84725557054914291, 0.13022621634395937, 0.64318780801635644], [0.11850479984320494, 0.69778011420904229, 0.63507368006431708, -0.038428697064749828, 0.36939924897440712, 0.082247089129852347], [-0.9219529946134597, -0.39668560786406237, 0.38697058240312088, 0.11936113532325976, 0.22428870720583971, 0.59109127800176298], [0.46896568161093977, -0.83059632579705966, -0.8544756930597377, -0.47657650516893413, 0.7548099029483839, -0.99276722602826473], [-0.88758708759237326, -0.24990096078690094, -0.90844081502116625, -0.48195666254633607, -0.12882903159449488, -0.50247843902215505]], [[0.15759702953242183, -0.55262982706083941, 0.60321581678865233, 0.75491697565071036, 0.8397722647094954, -0.055923566860735852], [0.82419648839283344, 0.031683358001783457, 0.73005578817112093, 0.18461190345254774, -0.26980999927906613, 0.011130158043075156], [0.25777605876161092, 0.024135820698506283, 0.92540791911714182, -0.88458436426274001, -0.82469171231967153, -0.216358147296281], [0.82830378425699469, 0.90330101886811698, -0.033368743315726368, -0.88968076308490374, 0.74851167048431066, -0.67875293542216308], [0.68985047061283833, 0.33375921224892591, 0.54954511135254935, -0.15115283037261507, -0.96974741440333312, -0.24268689280547684]]]])
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=2)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank4_and_4_offset3(self):
        sh0=(5, 1, 4, 2)
        sh1=(5, 1, 4, 6)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=3)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.05557636312179226, -0.074050417012117675], [0.079738084075148041, -0.83184101056209103], [0.52070228769823235, 0.93077739659970216], [-0.77871771139941881, 0.68524327239669436]]], [[[-0.68689112501927641, -0.98710222142234949], [0.97012113239875286, 0.016283274066862807], [0.78229782318583996, -0.74617156089653069], [0.28636604175021541, 0.93801573113938841]]], [[[0.78285810115192578, -0.45177858442153718], [0.39253927467688898, 0.00096583426917873361], [0.3697333327858483, -0.26352623651152252], [-0.64187068260397795, -0.83556645846892863]]], [[[-0.80099851015406132, -0.84320666994567728], [0.86780864939141211, -0.89918732542839441], [0.89216122406205112, 0.60851469229772137], [-0.3143712915389274, 0.83994002968915171]]], [[[0.035445278791939927, 0.0031755602155372209], [0.17432222967049826, -0.45919376285251667], [0.24124057101319019, 0.85813986497349615], [0.76607443040898704, 0.87931874924762621]]]])
        yy=numpy.array([[[[-0.90958309778631663, 0.28001285170812173, 0.23813966041228873, -0.52131232453893106, -0.61337353242213299, 0.11913012731702866], [0.23075160025713148, -0.042883166738740153, -0.38131055768857292, 0.47396281517231964, 0.2912381826758339, -0.85670709924787047], [-0.28898347135627267, 0.44688127584198023, 0.6143258686536488, 0.7344416573154835, 0.61411103649035659, -0.88125157632479079], [-0.67730195812421523, -0.31236071078490313, -0.015316861199702991, -0.14548915050828182, -0.37252360181654209, 0.84392485669004214]]], [[[0.90565665232128389, -0.54482030135429271, 0.5783911560575814, -0.59785275499327017, 0.34918775768412025, -0.351068466871995], [-0.099481120953355706, 0.91079884278929613, 0.20334943735828293, 0.12103213856191508, -0.65380875855539755, 0.53703086711789827], [-0.94768273058625518, 0.97498464372618199, -0.60838406736992545, -0.94095008822040938, -0.32117102781094564, 0.58656007781260722], [-0.8153020420129764, -0.61796046825310746, 0.98774734147627608, -0.29310102471627419, -0.15099309683062612, 0.42755399659480786]]], [[[0.26202930622550236, -0.94016218580492361, -0.83450203384255972, 0.64280225559237958, 0.92111430539117256, 0.95376093957452257], [-0.84732747420638388, -0.56819339275428171, 0.321904275034822, 0.029785677236139341, -0.54809110691193275, 0.71657395062443485], [0.35601461296447212, -0.7535356682666694, 0.94197461912022717, -0.78642316473032436, 0.64812102419213224, -0.37636429232480517], [0.64586188618239371, -0.45736145655339766, 0.64357681021401625, -0.34044574412074069, -0.87820616092651371, 0.64433707582717625]]], [[[0.75385172099002062, -0.8650057625821157, -0.13387650320945399, -0.84006278437645676, -0.17912150985329833, 0.23907916365538706], [0.1593920834473852, 0.9780429315519843, -0.021635898838149759, 0.29006362047635581, -0.46023750925805351, 0.21118430711972191], [0.13496794818509583, -0.28158912663192348, 0.44316874376124704, 0.69367421301339216, 0.90941483589795435, 0.19937305979755049], [0.90605619277903249, -0.52715328337363476, 0.65033092694777372, 0.60910890786854233, 0.2601198439835084, 0.0067835627717183211]]], [[[0.3504251788404904, -0.93944513636031735, -0.84910062684185683, -0.20356628080519523, 0.068699687449260916, -0.59951656665243513], [0.5331080934135306, -0.088042588133241395, -0.41842440820629179, 0.27856353026003378, 0.85805447152142844, -0.26452947588086961], [0.74266758611677042, 0.56250401371087611, 0.46385494823683682, -0.29492597787943176, 0.49318879415201611, -0.3903924168543873], [-0.85807939572767045, -0.85967609160502212, -0.039648475677008133, 0.74308965928742854, 0.90560269137335636, 0.12417109526654846]]]])
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=3)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTransposedTensorProduct_Symbol_rank4_and_4_offset4(self):
        sh0=(2, 1, 4, 3)
        sh1=(2, 1, 4, 3)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTransposedTensorProduct(x,y,axis_offset=4)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[[-0.37517668992923925, -0.71529712814865487, 0.69123566832034933], [0.51403369918578146, -0.11584484765285952, 0.21723780781257984], [0.77163703866098943, -0.002584055583805922, -0.60584699596263625], [0.21570364515529916, -0.61353410423079557, 0.071248113925384438]]], [[[0.82406567573138667, 0.49268753537836929, 0.81052146211110365], [-0.6741160261394874, -0.42248719845801896, -0.44985157814504362], [-0.11520148435278754, -0.33659252562754705, -0.4985306644172971], [0.47005351909083859, -0.9786787346914374, 0.38080614980095984]]]])
        yy=numpy.array([[[[0.79011379710012242, 0.060848287683081148, -0.78319675460105942], [-0.38817326673371144, 0.75461487889259971, -0.94955835167820823], [0.5218437196101442, -0.90876793465108086, 0.1780978759634666], [0.69210965917433653, -0.077303966779734834, 0.97458838953257176]]], [[[0.71270881429699551, -0.27574352581667161, 0.23371119429009468], [0.25949687731640791, -0.77405111996468134, 0.33236506562790358], [-0.92102169010254942, 0.92918994990212167, -0.83204090799114994], [-0.43784057740363336, 0.1786727857897632, 0.2688569196856696]]]])
        ref=generalTransposedTensorProduct(xx,yy,axis_offset=4)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank0_and_0_offset0(self):
        sh0=()
        sh1=()
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array(-0.0508625161974)
        yy=numpy.array(0.228034860583)
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank0_and_1_offset0(self):
        sh0=()
        sh1=(3,)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array(-0.520163501701)
        yy=numpy.array([-0.16834653508398612, 0.6839234499992155, -0.79202360711498998])
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank0_and_2_offset0(self):
        sh0=()
        sh1=(6, 2)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array(-0.845045378176)
        yy=numpy.array([[0.55769566255516834, -0.92383605673760805], [-0.50118105005443847, 0.83496026729768924], [0.9929562090330144, -0.15360990109693429], [0.013055152662913905, -0.057287649099851512], [0.14625791153859136, -0.33812145903125423], [0.74850129669151877, -0.074102607341667293]])
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank0_and_3_offset0(self):
        sh0=()
        sh1=(2, 1, 5)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array(0.978383036769)
        yy=numpy.array([[[0.62161992429956592, 0.34022060647160157, 0.40980449021221821, 0.57892535089232289, 0.44638872511349481]], [[-0.6019690763714709, 0.75339858485520406, -0.32072857679166145, 0.32506321481037515, -0.49535502696093658]]])
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank0_and_4_offset0(self):
        sh0=()
        sh1=(1, 1, 3, 5)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array(0.394282031546)
        yy=numpy.array([[[[0.49459827721420146, -0.10146766500512316, 0.32914320956955634, 0.49006073419636542, -0.6947300035236823], [-0.45096052732738001, 0.80052757404537522, -0.97612778823842072, -0.81953835653305274, -0.47442803368976816], [-0.55772219943461732, -0.97799734035217534, -0.93107620152684811, 0.19696932042210769, -0.73326130982168203]]]])
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank1_and_0_offset0(self):
        sh0=(1,)
        sh1=()
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([0.78800235258907159])
        yy=numpy.array(0.317156590557)
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank1_and_1_offset0(self):
        sh0=(3,)
        sh1=(6,)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([0.040258206239526029, -0.39144759281048591, -0.4604998832026348])
        yy=numpy.array([0.97090453763659901, 0.41867588875181316, -0.61651122383467638, -0.86902913466990417, -0.92991313648206009, -0.70878034895048314])
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank1_and_1_offset1(self):
        sh0=(1,)
        sh1=(1,)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=1)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([0.49792677365233007])
        yy=numpy.array([0.036494022504694801])
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=1)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank1_and_2_offset0(self):
        sh0=(1,)
        sh1=(5, 6)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([-0.37853258234402332])
        yy=numpy.array([[-0.23305190178639634, 0.38902419239426989, 0.19277277405533644, 0.71897743039388895, -0.18451456721532966, -0.06422898132153354], [0.98021061099832507, -0.85277383379395055, 0.38022140629851853, 0.69341917500993899, -0.55957025708290997, 0.3194470987795246], [-0.97595672100552178, 0.53226951009323242, -0.10246553046706919, 0.024874678170004882, -0.91944227962065095, 0.24743265509340984], [0.76472333712162155, 0.18029763145657096, 0.98826387699010465, 0.21672654074674691, -0.37622976764449767, 0.057295128391779304], [0.20280936903462621, 0.80704533405841095, -0.47865473188735153, 0.15834583402307478, 0.88882681533818642, 0.27218042111379681]])
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank1_and_2_offset1(self):
        sh0=(5,)
        sh1=(2, 5)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=1)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([-0.82333489376798008, 0.51508221626533723, 0.070760317649777527, 0.01764620572550446, 0.87927302278941566])
        yy=numpy.array([[0.87832274060250159, -0.29921328844543171, -0.43376359320422542, 0.58473607826797358, 0.70891623271221227], [-0.75571280105224958, -0.85843693997847059, -0.34998884161072064, -0.59444841136865745, -0.076959124363290332]])
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=1)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank1_and_3_offset0(self):
        sh0=(1,)
        sh1=(6, 2, 1)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([-0.47458682069073377])
        yy=numpy.array([[[0.077210794901424684], [-0.65652573419299531]], [[0.090934304726951964], [0.83575718831902712]], [[-0.69706513342176346], [0.89228484540124153]], [[-0.16745487131325398], [-0.78434138070112103]], [[0.46779748466814075], [-0.37214662214238392]], [[-0.71443347401019253], [-0.26597037401264001]]])
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank1_and_3_offset1(self):
        sh0=(6,)
        sh1=(3, 3, 6)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=1)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([0.48020494363805954, -0.37446196287985711, -0.52390610039970942, -0.041038591709780192, -0.1013892552181479, 0.54186541924409215])
        yy=numpy.array([[[0.69633660352375215, -0.9970140155388858, -0.91362565356634473, 0.77023369233843186, -0.12564112004619754, 0.84220621606208623], [-0.73385642188574396, -0.20008825670123942, -0.0059315913416222443, 0.41724105999997052, -0.38852975073216167, -0.21855261649274493], [0.41986779110606021, 0.39982062523582673, -0.26531521983227235, -0.71595823440685713, -0.19623957624933053, -0.033299501224555828]], [[-0.42612429749514069, 0.28242070245505113, 0.67234288951128529, -0.85986066306595288, -0.69049610316037224, -0.71365856917633264], [-0.67998495554294669, 0.6449181163766462, -0.95106247672529243, -0.48029249580787958, -0.53285830475800755, -0.75958286500623018], [-0.81294146068730266, 0.8274853293982396, 0.38918654940350517, 0.61579381535988564, 0.7426693715866306, 0.18726710120011703]], [[-0.88294484630450132, 0.75850090660161884, -0.84535138547345801, 0.85538757717658709, -0.26557189446309137, 0.63379279457215021], [0.36885628443922847, 0.48102591975708586, -0.74752553538517441, 0.03953775776558488, 0.65941704297422876, -0.87862848755597112], [-0.41276897845455252, -0.60284669133965596, 0.90236008267734324, -0.629566122665286, -0.79165757474098575, -0.71031970548194279]]])
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=1)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank1_and_4_offset1(self):
        sh0=(4,)
        sh1=(5, 5, 6, 4)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=1)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([-0.092105423080049986, 0.6421907170785135, -0.00062917172415555278, 0.37633871215122694])
        yy=numpy.array([[[[0.84439343338933415, -0.23501110268979897, 0.45215799410576496, -0.46675523511050065], [0.39861781513954275, 0.55392916559190675, -0.95059950915511138, 0.7721886867118033], [-0.063239252186408912, 0.19792721981726125, -0.94911577964711569, -0.72640969369449815], [0.53970990972472688, -0.88322520784057867, -0.28828373724713896, -0.088666976980541712], [-0.5750584600835924, -0.48155920946458708, -0.072267798642472236, -0.93187419968106999], [0.55912440899802962, 0.25925010638839585, 0.61233772465009184, -0.51733366012587889]], [[-0.73215134323569719, -0.015427734838432183, 0.75451077907800723, 0.025924700222626829], [-0.63209898229896599, -0.16117423296611411, -0.47154803092083419, 0.17272211015828676], [-0.10992100303746311, 0.87300416644932888, 0.98120082251007745, -0.66812692775325777], [-0.29306535834699976, -0.023303183862005916, 0.46084959417175475, 0.87905540221940837], [0.55550826835492995, 0.43372090285758214, 0.31448437387609474, 0.16668301432816213], [-0.54302974356718958, -0.74113649563673722, 0.54009445309512016, -0.75262184471113147]], [[0.25477236712302287, 0.76457310264415224, -0.41398722439524716, 0.73120981891483505], [0.59717796725817873, 0.69069782772067212, -0.14710159976486215, -0.25761242502180481], [-0.46124233110570723, -0.58538197336767572, -0.57755780254271882, 0.35303783547099243], [0.47649613280486158, 0.018317027353174087, 0.9179620873251404, -0.57712435814148111], [0.71849469910003871, -0.91200332907273118, -0.59305889824293212, -0.88519690678887741], [-0.10402778233259147, 0.095801251260777098, -0.32906076764854708, -0.42011540854087404]], [[0.97679624929250553, 0.050943618711075223, 0.68539291493569743, -0.010300004657977979], [0.49283080593569162, -0.45367942339303879, 0.2103646991219934, 0.64478584014448059], [0.63806765439847868, -0.30651019534558022, -0.54642826408435807, 0.018256250036785993], [0.50236691389467825, -0.59520492921192814, 0.70937587123261325, 0.6093463469115743], [-0.72000781127263647, 0.39941791602939758, 0.29206050296665187, 0.024158804170090864], [-0.92909458063426831, -0.75469064219314497, 0.43296610277278846, 0.10253542957538975]], [[-0.87400382638286866, 0.78620202264901984, -0.26557511067608197, 0.37082515619838574], [-0.071684147750803229, 0.43750815777941665, 0.73081304715268036, -0.98243105999024594], [-0.41756018253128357, -0.95537462628364223, 0.51957192792971241, 0.32910944903810724], [0.61615967522078097, -0.75777645832915419, 0.4732431022316228, 0.38184630546550125], [-0.96960670193326015, -0.88040249769141665, 0.25060548732896715, -0.47472978797105014], [0.6337879227603942, 0.26996447038554927, 0.75169360447530309, 0.46184720445448146]]], [[[-0.012548615024334797, 0.58737246306932644, -0.97143639711065566, 0.98370287649561994], [0.68291162713884823, -0.32474912901503861, 0.6147582151470985, -0.83167052325301705], [0.51448749148679673, 0.80496712315702168, 0.78316144295225731, -0.57602443986688989], [-0.95429447487108443, 0.42567266482868216, -0.37883043790422044, 0.98662972823589179], [0.11420616194004563, 0.18905756699139098, -0.49041575496572931, 0.49536928252111467], [-0.83406473752040133, -0.99520714656721587, 0.2403255043063004, 0.3734472602400678]], [[-0.94611220861922751, 0.19717569523342404, 0.87154375034104392, 0.62588529054590047], [0.88321071900650172, 0.15882154957981998, -0.6217373121910188, -0.54258338130554895], [0.16011288001725177, 0.80243759145734272, 0.93065745828086266, 0.33603442821158458], [-0.43846711517861015, -0.86988528976680768, 0.3376296523350939, -0.4370769757350832], [-0.40521598036809414, -0.03432279778112246, -0.57098783317209301, -0.23074549332266714], [-0.34401828032300874, -0.051008899629181759, 0.25117178576022758, -0.21200532942022154]], [[-0.034521505585229262, -0.98678801096031088, 0.30268173731407977, 0.94820057050750606], [0.30045387076903385, 0.53988069569047825, -0.33770590150513824, 0.89741779441265512], [0.88579178018365368, 0.51896172736867019, -0.39844062693739835, 0.66487283694232269], [0.41133804628051829, 0.59905016429873847, 0.9924525103139108, -0.13327197941585189], [0.89632742842688007, 0.3009247735082603, 0.72935348330366767, 0.30914969242243018], [-0.91605634569784544, -0.56499529727002273, 0.99323588807521479, 0.89481040214240526]], [[0.66622003863447099, 0.75296885646879219, -0.90052358938434907, -0.77202204458107815], [0.93265356068968108, -0.71290108368890492, 0.40730421352467694, -0.13559706653332015], [-0.028887871657800712, 0.082547703405104533, 0.8137644368368715, -0.31355541415564048], [0.9666378471182675, 0.74856613740375555, -0.014154545723461087, 0.45315022362199597], [-0.76917430252985941, -0.04025523597413283, -0.15927935456440956, -0.49899847662329599], [-0.68832608505959336, -0.53972054009228598, 0.3403903861009423, -0.43554521617361686]], [[-0.40585690889925097, 0.33198374757519145, 0.40404923000942539, -0.97533392295841814], [0.62368844773590082, 0.5335427362756191, 0.52679535001555156, 0.43586422681486736], [-0.14814658219067489, 0.74442661769849594, 0.58706401570257838, -0.76662607554705708], [0.61654546600588911, -0.68116245293399724, -0.00066115584399373262, -0.082525682475423467], [0.76530738893050532, -0.52342047934924607, 0.94583811691088715, -0.10609025574611763], [0.24577972145232252, 0.28349218457344882, -0.74522500450577311, 0.65592521086937317]]], [[[-0.28321289004172057, -0.9611850216480804, 0.64007061271235988, -0.88640497424571674], [0.048348935967668982, 0.70007523701952445, -0.71778084661888419, -0.0068906684341794033], [0.10575846876064299, 0.60835066358026468, -0.22700454806585157, -0.66294239432374802], [0.35750501718487371, -0.54110731385653743, -0.35573430807103845, -0.59214847917107583], [0.6408949354864748, -0.87096654605141177, 0.82651413295270393, 0.78120155567439964], [-0.75328342216933586, 0.94087710989842588, 0.13904859141700321, -0.21142927146861568]], [[0.81064208880308208, 0.64577593528632127, 0.12606528469885325, 0.52784523687288298], [0.10228566015905738, 0.3216320532250394, 0.5507938055142465, -0.78188578101094519], [0.021297678827130184, 0.38994560653958743, -0.49398650490410678, 0.87227249400500084], [-0.59820310055485937, 0.506170531790749, 0.31522145745943853, -0.98005727215867688], [-0.35527718181124368, 0.40895748381200803, 0.95979470123918875, 0.021763326214996326], [-0.15989775724625144, -0.36660204552878461, 0.26909255971087287, -0.16897591015520574]], [[0.29933717822747519, 0.7442117988092154, -0.57408877966026628, -0.10294078501846449], [0.65599473395423247, -0.48490361926367487, 0.87218595218291939, -0.61381051269140019], [0.71381410547901902, -0.5087453329424807, -0.015589909756680065, -0.0445202887190983], [0.96588554024514739, 0.37504503450773341, 0.50463140581595467, 0.23737584349405938], [-0.71711575628943902, 0.44459409317182774, 0.52153007902549464, -0.28690452830585356], [-0.03197476681888034, -0.28570611405964197, -0.34727891754594409, 0.39149806473073823]], [[0.048556721869116526, 0.54572076179608975, -0.30505407814493912, 0.93953334262556898], [-0.62576489168341798, -0.87960110828285476, -0.44851982405164526, -0.57175573442020577], [-0.62394616144985982, -0.013198122133610601, -0.81810842543044449, 0.43811984728277076], [0.38312637449754461, 0.19040957794910529, 0.27147789209810491, 0.54973049523223327], [0.71182520803288196, -0.52682651415445947, 0.62212457026301893, 0.31308333692218215], [-0.45357607844388514, -0.88741123896777618, 0.85382889647817839, 0.080113594872675664]], [[-0.70416519812486822, -0.031381910510161592, -0.66605553998815892, 0.010938898967714383], [0.5024419464938561, 0.28121600786360568, -0.58321156790181439, 0.9913421588825797], [0.5905107184586269, -0.041248939725062606, 0.62893256762921168, -0.22732970169130806], [0.92665607976965592, -0.15416524040618174, -0.7044434162292974, -0.26886774283707959], [0.69448430285935525, 0.86342473449534141, 0.81211125273705864, 0.86458829052502284], [0.60819042478885454, -0.32242929590865321, -0.82276244993379088, 0.033316307902770737]]], [[[-0.84689150944041658, -0.39080539689414895, 0.17929060006075348, -0.11265314880361554], [0.16263022846457287, 0.91575241705504906, -0.28989697051998875, 0.8622894828711134], [0.10177548904197131, 0.45487432186077958, 0.5347062043750832, -0.42487519696808174], [-0.49917466694582902, -0.44084912533892417, 0.12271908696953626, 0.33168584841122395], [-0.71058684565193997, -0.44222604466049154, 0.70462671744386229, -0.45002478315149719], [-0.50487506110812141, -0.93759133224751956, 0.28496266181464103, 0.33621980305334276]], [[-0.70959796306235212, -0.70220505353137064, 0.94550698196811345, -0.26162090340447786], [-0.75041061680724175, 0.42244317927299235, -0.049437071148898504, -0.17914439896356527], [-0.94236997620387442, -0.31627587202145557, 0.045002599783056096, 0.18298738240646539], [0.92773135235585547, 0.053785222067236571, 0.02739533328340138, -0.73125699561324242], [0.94805966866218627, -0.95318761731608093, -0.96531239056440765, 0.14021613609810379], [0.85151411625423523, -0.65993187707243428, 0.84528561228733223, -0.86524658320023584]], [[-0.42894246546395398, 0.81453901360240466, -0.53653903901487077, 0.011110672870774607], [-0.53437299717570275, -0.17306988494829589, -0.78757743624858612, 0.198066305754796], [0.13961229072337855, 0.95366014778971597, -0.4771582129273253, -0.42216241949686406], [0.68472595039758777, 0.20162371330789464, 0.62566112448435662, -0.029648640255141689], [-0.45736010503530578, -0.91714187446075157, -0.77784657147424152, 0.46051623854209822], [-0.62975288546650332, -0.52101726592635589, 0.20944573670443178, -0.93368771101470593]], [[-0.60746187587626266, 0.65167822933801678, 0.52196390060924802, -0.036086714401327269], [0.82033923008195964, 0.35533837953892089, 0.17790501457362939, -0.31724983997496947], [-0.39109531057601088, -0.48937825078764052, 0.65515809207905185, -0.21768319531038127], [-0.41684134471162704, 0.77024196090969488, -0.91316238777045, 0.16440305760119278], [-0.87836560150548038, -0.15543868387797399, 0.67347511301998697, -0.87644329890964867], [0.75896810878236587, -0.93467197253559253, 0.83200782895707315, 0.63488082300306292]], [[-0.5484602561906482, -0.87764442560733458, 0.61979160927762611, 0.49019530383028598], [0.80790045397065291, 0.45070474533860283, 0.58928771644337119, 0.47773481419817032], [0.29240338954831824, 0.63306806884441857, 0.84545885366597906, 0.24921494551825818], [-0.36261919951068844, -0.034139377003290727, -0.50164759815546667, -0.32109612526696352], [0.026952028132810835, -0.43179286485191271, 0.39832566215169729, 0.55795701542748644], [0.76164012994972108, -0.99653867446552891, 0.61032529213490316, 0.070457451078272948]]], [[[0.061646848619776318, 0.26748766035449001, 0.43278268687568788, 0.89394786762522638], [0.74198386954076923, -0.56974616001502398, 0.98034381567795115, -0.0067223247943657416], [0.63775906902010937, 0.76387855899171275, 0.72053120296563011, -0.62482571327525394], [0.03002086425989936, -0.44085633942992297, 0.26600473711444983, 0.61229014054411013], [0.6181896487096068, -0.68312296907130565, 0.072192158143754348, 0.32634003943550738], [0.22708738514389037, 0.52218440673891098, 0.50005594542114196, 0.79529590524044091]], [[-0.71758873774922138, -0.67728692996157758, -0.73739069105668276, 0.843173506850035], [0.41100016021398722, -0.21914708352150725, 0.2873922255380128, 0.17905559452568398], [0.32004502649498634, -0.0067966504603540479, -0.58388011097552606, 0.028388075593680284], [0.16990755692201076, -0.3345589594795555, -0.17171569625893945, -0.14866423897278569], [-0.87084153499835093, 0.68896577758930388, -0.73895058358082699, 0.22623335828563618], [0.1814122272099723, -0.43536805118952082, 0.26214084597348775, -0.54260678481563684]], [[-0.15277206407413879, 0.43818070843782131, 0.69206964307211649, 0.70839839101704194], [0.43848190486809413, -0.98107523448938605, -0.11443439908350439, -0.2184640574860095], [-0.6229552330241741, -0.055770179794979446, 0.54191860898138167, 0.86632222023570704], [-0.44147536429850343, 0.3037246403405931, -0.064569542191944329, -0.90318707052292901], [-0.27969679412812409, 0.78037324378655204, -0.026234407934470294, 0.95672427212535927], [-0.29144476975935141, 0.56192482162041424, -0.54061317029379352, 0.88265974576974982]], [[0.40331478330093118, -0.9536249740381153, -0.674338276004677, -0.3266598550891846], [0.71184764616421914, 0.78819364443920681, -0.92192798190738645, 0.71771489497595087], [0.27130482323881555, -0.32194386840138112, -0.71440793088821963, -0.38810600824151087], [-0.40158806028529503, -0.2872145300999247, 0.95094332445202068, 0.048594635167659384], [-0.68603360194141882, 0.049159935772821628, -0.18082467198432028, -0.9799725421714558], [-0.69338472154087327, -0.01419550056114538, 0.64055325887306003, -0.75355690641388606]], [[-0.94229545777676593, 0.91830967284254861, 0.47290049301515991, 0.28763873219245806], [0.32376860987037115, 0.28245257951303282, 0.31194965766093818, -0.50398504699666336], [-0.26981541598583658, 0.81723226097499024, -0.69313481117094988, -0.43265628887335605], [0.11753457460825834, 0.11708686502257026, 0.44969196579712234, 0.57643073799041389], [-0.75158277297633536, -0.098482679562939879, -0.3513025139321988, 0.57524472544115812], [0.72274388735222694, -0.099188476380227764, -0.8699674686084562, 0.46611251771169693]]]])
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=1)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank2_and_0_offset0(self):
        sh0=(1, 3)
        sh1=()
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[-0.4983664270911623, 0.55979082500598554, -0.57249624601160343]])
        yy=numpy.array(-0.149748167739)
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank2_and_1_offset0(self):
        sh0=(3, 4)
        sh1=(3,)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[-0.8157826481490944, -0.62189486737112309, -0.94206715070443914, -0.65173518745710091], [0.89465798524487417, 0.067189328248078661, -0.52527280224737805, 0.64845129782429733], [-0.57062708802066742, -0.16394342437374076, 0.0003170135557002407, 0.79680037375895219]])
        yy=numpy.array([0.53722424121275458, -0.25559252918222675, -0.92761020812076267])
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank2_and_1_offset1(self):
        sh0=(5, 6)
        sh1=(6,)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=1)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[-0.46689258541372913, -0.069098535819794193, -0.0045997166044340343, 0.8272046763509191, 0.77080391044319718, 0.49810560083449928], [0.63474209470387444, -0.2580493381533393, 0.51046408899518214, -0.9709481854669042, -0.67945633062322419, -0.54502942703983659], [0.14724972170364015, 0.63256188906207211, -0.44775451524567189, 0.069142135677626504, -0.27253778714883525, 0.38256393080908002], [-0.25533806869567033, 0.27900524518116754, -0.72876913899091589, 0.17491645038735437, 0.24053877312421457, -0.51018279729336413], [-0.4562637724358416, -0.12417755719455936, -0.91061633707631651, -0.019131995182715134, -0.043529943092064372, -0.14863631203984884]])
        yy=numpy.array([0.98983365891237152, -0.63784735733347797, -0.24205279843483574, 0.83127858503670193, 0.38275587297664693, 0.3847676258349102])
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=1)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank2_and_2_offset0(self):
        sh0=(3, 3)
        sh1=(2, 4)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[-0.5644265459517912, -0.036339531310089823, 0.76585239865758847], [0.75148007983053344, -0.13473228964705841, -0.91487626227756658], [-0.68323261181803452, -0.57795741092154662, 0.47177278548283597]])
        yy=numpy.array([[-0.7957454809217166, -0.36956239356394827, 0.23302624652439663, -0.54569643606081875], [-0.57588672440754496, -0.37142416675790102, 0.91551211816551192, 0.68654849796768658]])
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank2_and_2_offset1(self):
        sh0=(2, 2)
        sh1=(5, 2)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=1)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[-0.16354167695240074, -0.51211572745614165], [-0.1722694819433781, 0.0050965778328087019]])
        yy=numpy.array([[0.067993936014877132, 0.070016557822816461], [0.91543369665031293, 0.60039125990971942], [0.14540400923856711, -0.60978945796322059], [-0.17265418260647958, 0.27186590222290397], [-0.32467299708235164, -0.69655531181415831]])
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=1)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank2_and_2_offset2(self):
        sh0=(3, 1)
        sh1=(3, 1)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=2)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[-0.55044121284038328], [-0.68373756474374003], [0.2787523533077314]])
        yy=numpy.array([[-0.3725640152947638], [-0.50681454914994539], [0.95163401609189435]])
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=2)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank2_and_3_offset1(self):
        sh0=(1, 4)
        sh1=(6, 6, 4)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=1)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[0.71579010321760017, -0.58386703492179315, -0.28471078049802157, 0.81069898445196498]])
        yy=numpy.array([[[0.92740504497843346, -0.12253936973028279, -0.082058454245951484, 0.3501397879729351], [-0.093386864765221844, 0.15299463685213821, -0.92988207027244196, 0.83124461418680706], [-0.36066475543355137, 0.65118421213140887, 0.97382867727088174, 0.45567146495001398], [0.32194891347347054, 0.54020889599044764, 0.60346111104569511, 0.69353907374327695], [0.40170147323057992, 0.76830775062861356, -0.59502804861576863, -0.066995402826727668], [0.89374016291830216, -0.093843155806456524, -0.93110437678568903, -0.54453322601029419]], [[0.068892957601193405, 0.62294135067699252, 0.0006188634558663697, -0.42508972770750053], [0.26977790128899315, 0.75402158283911191, -0.46326420319241923, -0.76997827631448468], [-0.59513733010774228, -0.73320367407694942, -0.060190856012643401, -0.64463621598872756], [-0.85080164255381452, 0.79638204208240282, -0.81413297930356365, -0.46107084583027103], [-0.8244453480088263, -0.58505147737522334, -0.85989483022940116, 0.87065981630348155], [-0.33850738049726181, 0.028001580414283911, 0.94269677825660758, -0.30863028812810644]], [[-0.0070205192706644937, -0.91204485868098573, -0.4042388256805407, 0.31083759844389913], [-0.039237708065002819, 0.25296738402150187, 0.85988065752368548, -0.41860874840620999], [-0.61800335078467428, -0.74822913855801665, 0.011224820654818224, 0.58354838608456405], [0.18439707513701786, 0.50395754566544748, -0.71535414406162223, 0.54977877653660334], [-0.5443958799311881, 0.76620766810905705, -0.81867693304143674, -0.53650504303498714], [-0.25722246848443264, -0.32741477807269126, -0.92226291686534623, 0.92087334709450075]], [[0.99977640068897111, 0.98026830413188626, 0.041798143829405054, -0.92343910636934345], [-0.75033690520422813, 0.27470705368426951, 0.12327009128094191, 0.874785976584459], [-0.16864684216613735, 0.99791533465857318, -0.2746018454100474, -0.15029176367817776], [0.6169137662864197, 0.21072351742762785, 0.81053398144574862, 0.41212242097033913], [-0.19183388490085895, 0.97756404564672983, 0.29776388239911911, -0.96897275544723649], [-0.65123783039458072, 0.08030553774614102, 0.059507724240924764, -0.36038468102997467]], [[0.69995402685268249, -0.29448984907918629, -0.087598992579380752, 0.83204325315449834], [0.15345492382347303, 0.93264866977433014, -0.26858067976620248, -0.44691954608583861], [0.88853100130165563, -0.034091081960475611, 0.38045295663889078, -0.97677988779988034], [-0.047321211688911013, 0.2099359356651409, -0.13281919829754618, -0.61853983186858152], [-0.42439603854337071, -0.88412236770736707, -0.46589046893103614, 0.58946073861290849], [-0.11848828061486327, -0.65484602926986102, 0.91207499714924367, -0.0046920156081702302]], [[0.43144170920980751, 0.75868662936843267, -0.19144208581669164, -0.30473647850902541], [-0.14503103862044098, -0.36637929466619079, -0.53142375998574853, -0.67509741668967926], [0.24971035478037651, 0.057230485713687829, 0.99836094981536427, 0.14168112901167618], [0.15769819513239303, 0.70085381448842043, -0.47962553104836481, 0.99351299333968179], [0.24731146334536258, 0.86719100408072669, -0.52250312375088193, 0.63080130142345769], [-0.62411369141424555, -0.042405895550647887, -0.32870998324526535, 0.3421754057908124]]])
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=1)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank2_and_3_offset2(self):
        sh0=(1, 5)
        sh1=(3, 1, 5)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=2)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[-0.28824937904522407, 0.88918624050088413, 0.89705159804657053, -0.17807811164228249, -0.48749792849584828]])
        yy=numpy.array([[[-0.71297967325606959, -0.64087418792270823, -0.17824862821681586, 0.67339254680486338, 0.50440933409977351]], [[-0.33177099983373037, 0.77622565119910059, -0.54992704973359796, 0.22696294561793762, -0.86609737701058398]], [[-0.069320422552211269, -0.65843381879884322, -0.89149060893735133, 0.54613413250147724, 0.60201768833326397]]])
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=2)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank2_and_4_offset1(self):
        sh0=(1, 6)
        sh1=(5, 1, 6, 6)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=1)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[-0.70737801043968851, 0.36656688628049428, -0.37487253236244511, -0.095198310606963821, -0.029755034215619647, 0.13939869651403436]])
        yy=numpy.array([[[[-0.89611224928024114, 0.89849078222259049, -0.42935043280718821, -0.17939922101326022, 0.397789529581976, -0.60067209118390252], [-0.5538214119186804, 0.25407530550519897, -0.39774645528331831, -0.088140358842596189, -0.42259194991674986, -0.54823914891314951], [0.93328328932063842, -0.23085617616722875, -0.66968473977583343, 0.94858048453243771, -0.96698407175211165, 0.23487405430496811], [-0.91373017952791247, 0.23373859982330125, -0.69717017724207575, -0.25131892537768241, 0.71824935440207116, 0.52178797145159428], [0.76326795050098517, -0.21130565302950965, -0.13208043499974131, 0.41332444224733833, -0.20744307806932905, 0.4585303290499736], [0.47167714794714444, 0.16345551294709115, -0.36073880759637023, 0.40693550825829039, -0.89845306232925326, 0.72787465123072281]]], [[[-0.49965858586895084, 0.17314443747031749, 0.38334503268725117, -0.33011118036272724, 0.6890033645329654, 0.42119735465622576], [0.43355621283998347, -0.11681914704098251, -0.032202204667264755, 0.72132456434533898, -0.60941276151944002, 0.018892883064248522], [0.43647372251839078, 0.22903775438893237, 0.36604586165672615, -0.77975091675518304, -0.35415925590094344, -0.93831820205317062], [0.81476544114715654, 0.70100938946009794, 0.16465606764602114, -0.23998878250503775, -0.99377713551110536, 0.3125693917564214], [0.10121570428651272, -0.41180214598216458, -0.76861174440989766, 0.30113826519798015, -0.57742565402422663, 0.95969715152072599], [0.48547166983861301, -0.75480368170061585, -0.61070564820191531, 0.80799398630710306, 0.26900001808554208, 0.97726749940955382]]], [[[-0.82808800699029361, 0.15687630270684627, 0.99333054462455928, -0.82538896059028843, -0.78087567344965336, 0.3341441255019697], [0.59651599936958699, 0.59554953512043873, 0.36493687170229472, 0.31644214015580063, -0.14394525369304856, 0.28146298392865665], [-0.47420195349720706, 0.57470814084556876, -0.38062206661569276, 0.53700357007668265, 0.99124055050623716, 0.56362909733267608], [0.05417035998473918, 0.31094388950555496, 0.34619562827515216, 0.45390912209719736, 0.31291643287315662, 0.51724217009139695], [-0.076250525473811726, -0.51045209580910855, 0.93364185928695598, 0.37138614670151293, 0.030031172169165954, 0.24496616147153993], [-0.62814563062062434, 0.70320683651429805, 0.99730995058846172, 0.88082651953270807, -0.90143313485108845, -0.45564729227663059]]], [[[-0.50688059727471479, 0.68070570885748416, 0.96599021056131962, 0.2780020137163266, -0.17872086604384285, 0.76901635737453011], [0.78179320746495518, 0.51692625732663045, -0.34748198512709694, -0.27526185990511443, -0.66355125723717423, 0.78828694623463469], [0.61609771798833424, -0.25433662834699922, 0.40462512279071428, -0.94866184510314411, 0.021273244534797398, 0.84052279995484391], [-0.93653846633676818, 0.11704114188895876, -0.35488956323917087, 0.69587657434166572, 0.99298775680005313, -0.89898323419794557], [0.68918440843024498, 0.71686121958072868, -0.094452550870116836, 0.47781581578010268, -0.56633167259687611, -0.78848212302646759], [-0.50195790597433509, -0.25971290475529862, 0.62493278482762959, -0.66944512364947562, 0.52243605541007154, -0.84914732358476175]]], [[[-0.77455125061774721, 0.30141256104728131, -0.21342960390442545, 0.66626690841941216, -0.1465747609807484, 0.035792286502062787], [-0.33617326078984533, 0.36959113697763102, -0.13136539534665626, 0.43318851798655644, -0.12124939802941737, -0.90923655131938386], [0.78142958076558533, -0.86720071379212138, -0.49581622077140919, 0.014143470922820978, -0.89478571515373151, 0.74860980388733012], [-0.92903253660925134, -0.95969862413753848, -0.59808776222014592, -0.36105489124754375, -0.77501805950239278, -0.82051952758836633], [0.85101558488893625, 0.35423017315950767, 0.15217600170042189, 0.28482456267703182, 0.58871225175482644, -0.93041716293304022], [-0.69120384504928989, 0.31027595600946478, 0.83898519502124436, -0.92555804787880591, 0.11644819822006824, 0.9776099330390684]]]])
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=1)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank2_and_4_offset2(self):
        sh0=(2, 6)
        sh1=(6, 6, 2, 6)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=2)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[-0.96502202483533317, -0.14636955001519558, 0.56784828224779704, -0.58379465737597025, 0.36040793013350969, 0.44339773080506384], [0.58881391635835501, -0.9059836555234666, 0.14356148133046198, 0.81212681585031188, 0.26883744036802715, 0.48543241480225752]])
        yy=numpy.array([[[[-0.44417064446668819, 0.66015927464162361, -0.8358133073848546, 0.72635114342217721, -0.5370182755721109, -0.13461548609888951], [0.27482127759673181, -0.85717723316457306, 0.023768102591842144, -0.58668947132589078, 0.11002381734354838, 0.60290726045358434]], [[0.41797091015813592, -0.67361844630652845, 0.24272404503591938, 0.88679922948539169, -0.16664511045624408, 0.79706843183681886], [-0.60392013257706023, -0.67177404100750571, 0.14032482908060628, -0.92446936495433607, 0.035029751994390956, 0.056977556496659476]], [[0.22680901877296233, 0.80137720326834372, 0.1371073267977192, 0.95491905592302384, 0.34733475904553135, 0.28936256295696783], [0.27708181367959228, -0.25060040242846582, 0.13270411270264693, 0.31613701022893115, 0.18000835764666401, -0.3689744598978133]], [[-0.2312903935350219, -0.077277540748317719, -0.04658070063633013, 0.33911252786494361, 0.25282576613457297, 0.37153733762027952], [0.066340248847858607, -0.27964333446591727, 0.95835259319860255, -0.45220601824591333, -0.65906993389272595, 0.1309461225787607]], [[-0.38289801497283205, 0.77042915959636238, -0.64974734586837979, -0.18700567556044501, 0.024397860931394622, -0.51941941729984564], [0.37085769766987253, 0.79013901582206691, 0.21910390532081236, 0.1548072411273469, 0.62004479604941509, 0.82885759306322271]], [[0.10476323374287788, -0.97937637609043038, -0.70929294405018695, -0.34999969312025692, -0.13527435376459684, 0.71948008809209241], [-0.2284449862568958, 0.54156719276947962, -0.27751726320214387, 0.53178651305427005, -0.29316164427690583, 0.39325271848547283]]], [[[0.94552807995645094, 0.010813006049311236, -0.23586817463411536, -0.87569033705833488, -0.7845470908760328, 0.22639048864488509], [-0.41654079948891165, -0.26688150839260527, -0.99502038927709924, 0.28771251048339597, -0.94602291197024257, 0.9997731656235529]], [[-0.75958764484498142, -0.057045102651109181, -0.87724005080739631, 0.020182908522851095, -0.97419855239426312, -0.55928981950014944], [-0.064256085951698738, 0.88395844111996813, 0.80753615489440467, -0.49725809085098716, -0.71249435217729751, -0.32962251216619443]], [[-0.12239890508218787, 0.74253277979551946, -0.98319124616497988, 0.8201464898479327, -0.28987965679609062, 0.89652237105149624], [0.18484713700541233, 0.97598869461262394, 0.081266552393278069, 0.3346768965394129, -0.19378957805131214, 0.13444829259660462]], [[0.92572987750472424, 0.96700524361151152, -0.13964866136175491, 0.99314743489736923, 0.87822884075474184, 0.1352404509519185], [0.64175069149111641, 0.35982542642645354, 0.14665352175514235, 0.077358314287522045, 0.74366938666495996, -0.83901598157865465]], [[0.37086762599556589, 0.9079978745855366, -0.47909353142817412, -0.040983106651064638, -0.50567272411358255, -0.074473286671383532], [-0.10400943036645405, 0.80949195476443947, 0.19305528470145017, -0.77034043997914114, 0.10653011314815664, 0.97244025098722919]], [[-0.63361978233542371, 0.88963679275376695, 0.00062429750594250599, 0.25034719339693035, 0.29624404872531418, -0.35852159437515452], [0.079013705339302742, -0.46325464874700195, -0.67457438869924125, -0.78745457814927478, -0.71229964813117319, 0.72891904836766974]]], [[[-0.81048739385080304, -0.48111042894410838, 0.29890011938398797, -0.040609889584187098, -0.15917941856735207, -0.44964266123049579], [-0.20549605445524044, -0.34503987564711647, 0.87763920743226409, -0.4928048492447461, 0.31991527002489661, 0.44553838885938934]], [[-0.67893365857389298, 0.98201009461682198, -0.010901857704800122, 0.56032976478385765, 0.11085469634372069, -0.75923482735499181], [0.34110479155419671, 0.62956125624793913, -0.84086114222468122, 0.89654647495523276, -0.81544226506088369, 0.41485225939391324]], [[-0.70780381378901436, 0.14757787782019527, 0.67107848634396783, 0.74791776701294421, -0.41264576847237633, -0.16860122124839894], [0.068373832934245149, 0.43872808728509471, 0.34190239352985752, -0.56332569531767374, -0.72771082548679278, 0.15361456876747481]], [[-0.26999988478185033, -0.88104562270845554, -0.4478391110792741, 0.99197996809568512, -0.050413209416970028, 0.87900101310056944], [-0.42317404073056508, 8.888998569878126e-05, -0.035554700773707149, 0.019680977480919459, -0.63400559518190569, -0.7038468687944488]], [[-0.92151993547502209, -0.33743400128330681, -0.36854738086955185, -0.092982068646922045, 0.10323183741318465, -0.085636616745850214], [-0.79512288623667837, -0.51417585095464946, 0.79492496236838139, 0.82006745574317219, -0.68784673081449199, -0.2192494237534397]], [[-0.46107002684217835, -0.63354999066696083, -0.057366438634959493, -0.80550338932079968, -0.96329993141530323, 0.93886362907561938], [-0.21204059762809879, 0.2085597969127817, -0.80870404346000901, 0.53849060980847607, -0.11500321937006586, 0.087718706667816448]]], [[[-0.35415557007125686, -0.56437212540936477, -0.3409153619938432, -0.27163727832736373, 0.60509318255827504, 0.87312340614438155], [-0.25434268697736595, 0.86952593864964278, 0.28524953349433191, 0.89575382180593799, -0.29149192741190877, -0.34198775290099381]], [[0.13845221980375388, 0.16349022285679804, -0.22141448099243077, -0.014349203385649822, -0.084928240241336495, 0.040553610737611212], [0.89591685758447936, -0.99239083348772428, 0.33963278776617511, -0.64115159154432533, -0.44003761229952176, 0.058244732584498138]], [[-0.18552826669368949, 0.91929079769214361, 0.298941904021917, 0.85836389373852118, 0.19035122915172753, -0.42281197633241185], [-0.89298198190966804, 0.088498684851176179, -0.012069164547938493, -0.82728584817702955, -0.54262598383422, -0.22353374784053703]], [[-0.98787781339691771, -0.51151671367162432, -0.20593054453659065, 0.29063594606608611, -0.86367189358826324, 0.30368006707889705], [0.0099829623942309098, -0.80925765544062189, -0.98353194780156694, -0.62964997583712212, 0.47560714648308866, -0.69570760438306101]], [[0.058058024076663939, 0.81076769355495792, 0.83906022573843408, -0.11653698306697446, -0.71378610901778372, -0.23908802231632031], [-0.48825144811328092, -0.38977392683219381, -0.20763999394219823, -0.70075460600510686, -0.10506234959246563, -0.30614087589237138]], [[0.10103640458534047, -0.8372901423124044, -0.61727846778233464, 0.12899440607254342, 0.1960270568739424, -0.16079309137423969], [-0.59413700624718646, -0.37336466946727076, 0.14390111801672201, -0.65070328015545487, -0.36229557765725118, -0.96403345078940661]]], [[[-0.25332062301209857, 0.21570764083367666, -0.53341569977087167, -0.82149781189759263, -0.28152199236209907, 0.43649422402379234], [-0.54886726276565256, 0.85765152264487865, 0.089787946266448815, -0.56996887100110172, 0.99498464031520761, 0.49044251981872655]], [[-0.51189208766324801, 0.65364858403873227, 0.078843798033178647, 0.018912035185103093, 0.19153214934168594, 0.63545403826156455], [0.67807314255018669, 0.39142676438123036, -0.95231419760515967, 0.888441424719836, 0.097505790735309184, 0.35672347681990946]], [[0.8457548628467435, -0.022174928110431535, -0.27932771495411113, 0.34005602556095327, -0.79097306773400744, 0.81026020412643107], [0.13920621011882983, -0.67730402700660242, 0.37659037665375461, -0.27096799009368189, -0.73621090636339059, 0.89366999860937613]], [[-0.62047785732345706, -0.08443190137881329, 0.97958656635196806, 0.91882864664565611, 0.81467779715370914, -0.027467027666371102], [0.36637601662936059, 0.8785992265200675, 0.71113541817742143, -0.11025044724442457, 0.47646379474017486, -0.30954433282969185]], [[0.71797862322235484, -0.94823139771345222, -0.68620639237478254, -0.64883694340349218, -0.86661173542559711, 0.4600710602409317], [-0.79695603501889645, 0.072011298558129155, -0.62916521855961549, -0.4023835214292264, 0.029162866892660011, 0.66103299252281156]], [[0.99206854808664935, 0.39045197984043578, 0.726161151902188, -0.81401017628478667, -0.21230014026700705, -0.43411155686303715], [-0.983502637757109, -0.91454272578128881, -0.29959510061517558, -0.11721965295839065, 0.58665330001044502, 0.36423622914755382]]], [[[-0.99887421400298226, -0.92558193389718424, 0.069442380010806382, 0.89577843691956938, 0.40525427294810301, -0.21805725044809732], [0.47419064798041655, 0.37825817439927345, -0.77247517245371222, -0.67701689950369848, -0.57050904418230819, -0.93369732646024306]], [[0.27505183296929503, -0.44483370207257078, -0.5047494050846284, 0.95526454058228194, 0.96990780482125416, -0.22315007153691524], [-0.72635812188271487, 0.48027095322885849, -0.7997350255541511, 0.33512736154056211, -0.46188542371360586, 0.21898570607673129]], [[0.71364885131518818, 0.44869486261762614, 0.65331745235718075, 0.64256709486511476, 0.94378759854393968, -0.9883184467995767], [-0.19664699041477007, -0.52192844777949587, 0.20409070712412669, 0.47863004915698792, -0.22307104360819885, 0.4073459828397501]], [[0.46803357818155567, 0.52473550986286632, 0.31388289405373948, -0.7234714032453966, 0.70634994500412729, -0.33950778790260316], [0.51015122223419551, -0.58533600738182634, -0.69844339887574614, 0.26648945141436697, -0.34698562717459902, -0.97669191008723577]], [[-0.5804567499018336, 0.19714153100374165, 0.24255762572449568, 0.41339330007338471, 0.5910598104521152, -0.10542261611922821], [0.22124291893805204, -0.1350163564401059, -0.57849503290883297, -0.012228193293591039, -0.7717411495858244, -0.84497619729950846]], [[-0.50390532084526907, -0.073984651256948863, -0.056257698206684692, -0.12817677239027847, -0.79790589723066319, -0.5625956709315838], [0.80708005371830782, 0.044031094465472931, -0.76362985666713246, -0.40074004049931111, 0.059819635514671621, -0.69071508564799289]]]])
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=2)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank3_and_0_offset0(self):
        sh0=(6, 6, 6)
        sh1=()
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[0.23015101139617355, -0.89216186522084717, -0.31183284163343905, -0.1051592060255444, 0.62271611012181349, -0.017592761206425278], [-0.18342400367517331, -0.20857043780179563, 0.74349098121252188, -0.43309989521232284, 0.64416804749154633, -0.13671444878555272], [-0.65003408756842451, -0.73504596107856113, -0.65195019131824594, -0.65161376688919592, -0.07162856873132295, 0.47841393349986849], [0.38624344089365237, 0.51438966844420553, 0.81336037355721369, 0.82403958286143553, 0.34705942262388056, 0.67988525718477266], [0.67143330099354226, -0.81008869396089489, -0.19809942930613444, 0.65385806002375335, -0.46154073899823178, 0.26362880988685511], [-0.3217236934442802, -0.72822693037791097, -0.81542241390909731, -0.033491802305052554, -0.28214234763920309, 0.74546643547719427]], [[0.91898325654601543, -0.47662828738935237, -0.97529593723811359, -0.5561492848485361, -0.93066451761174807, 0.92261040427946006], [0.36342574082391255, 0.032763301155876334, -0.61348324844725344, 0.42428575519215639, -0.41342244490415436, 0.94937299853791246], [-0.70824102686443435, -0.5725433553597572, -0.0075023288249604914, -0.0055080780722602807, 0.5593550185144347, 0.12877050839656823], [-0.28797827460403269, 0.5104861918926582, -0.008103909188203362, 0.03992543548102967, -0.14171986244105272, -0.099145328849472802], [-0.79228049984580573, -0.98443044220991194, 0.094705761452777093, 0.92178073322510889, -0.94967288434400143, -0.0024483895970790481], [-0.089376951050804232, 0.126861122356283, -0.22402218225876869, 0.40320068005953935, 0.68704582886957688, -0.08791505974077185]], [[0.86825979454338098, 0.74855673609978401, 0.1670796881315002, 0.63689116573729909, -0.38191581219213155, 0.5172292401668277], [0.20245602740093105, 0.6522314186262097, 0.051388980892039804, 0.6705089250967502, 0.23603158000852753, 0.34470468621858941], [-0.38883405202264854, -0.98991670445847935, 0.12861608847822614, -0.62871691940217356, 0.82258498089101262, -0.99373886655103716], [-0.9683247691421133, 0.3864118158739549, -0.966018808365805, 0.16580304428787018, 0.099966668151615812, -0.45141542915250343], [-0.40818660327220635, -0.31647378009329685, 0.45130403765439842, 0.14546684090498174, 0.83346926384924092, 0.36438427228208714], [0.52916531751549734, 0.45479017751579653, 0.58961686131292357, -0.1680657201243192, 0.10450034322106316, -0.71933198451220504]], [[-0.21516852585394242, 0.29488078025634379, 0.32972871622680988, 0.71183441065049768, -0.35644012543123305, 0.80087695186729158], [-0.062387428713674975, 0.86528667400229065, 0.022882365075978184, -0.52019559805716353, 0.15197620363741016, -0.24821474121764275], [-0.952442067349343, -0.18463666187817096, -0.44559297138381426, -0.20840767168990681, 0.030993819536785816, 0.44632276640542146], [-0.84129149308336215, 0.14441716461945897, -0.72941302685730047, -0.32241341329422069, -0.35175716234119281, -0.85199634334206498], [0.77550210368501182, -0.55498410928182573, -0.13829933061602828, 0.15562296380827023, 0.96135820689413531, 0.38270631946660938], [-0.3858966541395652, -0.36023181693591311, 0.80467957641245635, -0.33926644428916441, -0.4029068149489039, 0.5699043619252766]], [[0.99084947341549845, -0.34573395734184786, 0.97453205640110663, 0.16650311876373602, 0.87048409848369723, 0.77786781642721015], [0.86648843630269679, -0.37601415598813182, -0.68300360894467693, 0.93250480800342728, -0.041077741788551059, 0.55930809073895937], [0.10562300951109926, -0.64716092641586442, 0.41239440670142757, -0.62783615072122534, 0.38050230646154781, -0.94807512921428483], [-0.40726299778883401, 0.80757461971516586, 0.34057885729710113, 0.17841311893673484, -0.7146354705884661, 0.37265702243205157], [0.84965129449058341, 0.9583379120252149, -0.36098718986968947, 0.45260104125565381, -0.31928090483435301, -0.62595064505506626], [0.89040520127732359, 0.12000438592208318, 0.9395042521489414, 0.39890154959006963, -0.2176883089805095, -0.68081783323243639]], [[-0.20961429469098958, -0.46921192408384282, 0.35428616368752364, -0.89272245993331745, -0.90647813544649924, 0.69168026492244139], [0.98621244774135053, 0.65371444948202662, 0.85997260597348757, -0.43178008582206262, 0.6840995978520894, 0.21042842996632616], [0.27573696436451223, -0.99936243847230433, -0.12530316211798853, 0.95773576082618672, 0.57856011696363896, -0.77029196723703031], [0.38448480800424201, 0.67079628415714132, 0.77383595486491408, -0.30548291139305883, -0.071334614627061921, -0.022909062273615666], [-0.43354116822466748, 0.79450574111589245, 0.47472172353945297, -0.9744894229354919, 0.49042330551942648, -0.65035281275127299], [0.25188300402598052, -0.34869029623850567, -0.090982036319239956, 0.98592567990318924, 0.68751496411601787, -0.13548814532794595]]])
        yy=numpy.array(0.24619048372)
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank3_and_1_offset0(self):
        sh0=(3, 4, 1)
        sh1=(5,)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[-0.54271899483769448], [0.32066043548623102], [-0.7978385483207755], [0.3416708155064796]], [[-0.78886353762278794], [-0.27736218644787836], [0.42752202445545118], [0.2742453097081472]], [[0.92330533298388273], [-0.9343604854453027], [-0.77393458160582651], [-0.83160811872097984]]])
        yy=numpy.array([-0.39157473475472515, -0.18853776768365016, -0.4417359726732264, -0.46000029737391634, -0.87433764476889242])
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank3_and_1_offset1(self):
        sh0=(2, 4, 1)
        sh1=(1,)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=1)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[0.43486105935411334], [-0.94196204769821512], [0.87480228237597624], [-0.93998354313043508]], [[0.96040775799859857], [-0.60980595349459765], [-0.94761320424901729], [-0.90534396845668641]]])
        yy=numpy.array([-0.030946192800399785])
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=1)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank3_and_2_offset1(self):
        sh0=(6, 6, 3)
        sh1=(4, 3)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=1)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[0.69757914946072841, -0.94543581559226575, -0.4131232697505558], [-0.6050965619466584, -0.98095704383300086, 0.012132871139435952], [-0.4176059116479951, -0.56466529107078434, 0.94851423676334412], [0.7034012628964148, -0.3784626444734458, 0.62780160665880769], [-0.90199505100526345, 0.093108716330984942, -0.063305462750904207], [-0.51110961493245144, 0.0050817297528071848, -0.79525207966561973]], [[0.30717591731511762, -0.47905574470178447, -0.33323567875307436], [0.41289384631541703, -0.52609699530339693, 0.6591937115754154], [0.19725496173674095, -0.15677238166006102, 0.26844841448840207], [-0.33595160599677643, 0.24440917322558664, 0.92061109420930465], [-0.34954613987709493, 0.0080837654778900259, -0.22956098136329794], [0.97911590928975967, 0.89922219946476156, 0.39513319580372008]], [[-0.97960569447176105, 0.96652256049701202, -0.13491630139787114], [-0.7599773250722206, -0.91073200212941408, 0.55447092039128787], [0.19673219266556252, -0.95290969243161294, 0.12328237650015561], [0.38447729122343421, 0.36910693839462794, 0.63966527759870373], [-0.58220629199256058, -0.96053040231954712, 0.68841444877029789], [0.13595421976460975, -0.46317259059854732, -0.1140652267125839]], [[0.16117590795531855, 0.19051111779263774, 0.11200485586029085], [0.53086921709698909, 0.26131932056321072, 0.94270016341609875], [0.70634878742372509, -0.88841041271557231, 0.31142841016793765], [0.86581241703253031, -0.66072258472626277, -0.92932992611462595], [-0.8707480485091883, -0.60414270703913653, 0.32161475506119963], [0.16071392052269795, 0.059493015681979733, -0.3240663236804695]], [[-0.88011063654335864, -0.14240153813521728, -0.35273690856342865], [0.61416566558024721, 0.25471845044019004, 0.66089756322387005], [0.38755213878551253, 0.67415118803895946, 0.11221593720374368], [0.98585095879421503, 0.093882988393205968, 0.011816164430442866], [-0.034210445406577028, -0.14135858074911889, 0.53584103192083132], [-0.17586844189765283, -0.30463929393754108, 0.60118138525718368]], [[0.99379155706966738, 0.68181199231249678, -0.89815775483630556], [0.86722134996037159, -0.087008422203586733, -0.92861900589128377], [0.38570671013234858, 0.024740776477346849, -0.44526930961644773], [0.038582668469870907, 0.25950013518380621, -0.91781368009725584], [-0.079705529067051639, 0.48099682779139297, 0.22819496936981798], [-0.028069044899255102, -0.38106588057410318, 0.8027010299986348]]])
        yy=numpy.array([[0.34504825180884557, 0.90796778447585336, 0.22261808598372301], [-0.72173493843723802, -0.76665054879886729, -0.89970700189577824], [0.59814063485733793, 0.62483511568035466, 0.68043537416203503], [0.65930947739891477, -0.98071755522378146, 0.10809613741247093]])
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=1)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank3_and_2_offset2(self):
        sh0=(1, 1, 2)
        sh1=(1, 2)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=2)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[0.21006028367546059, 0.41915482615551447]]])
        yy=numpy.array([[-0.25331247166636772, -0.4503576319597451]])
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=2)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank3_and_3_offset1(self):
        sh0=(5, 6, 3)
        sh1=(3, 4, 3)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=1)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[0.39585731208104469, 0.87357992867810186, 0.80794341055683616], [-0.036235435021796381, -0.37258362704351344, -0.19666187928000456], [0.63282547643817533, -0.058402889567089389, 0.12823061532746749], [0.55407609278549197, 0.82837119357420907, 0.77073283267130188], [-0.98081358783707806, -0.29585132581937579, -0.25251431191437934], [-0.91045882413955148, 0.57358209830154783, -0.4866346790105891]], [[-0.71659096534913913, -0.057700108859353838, -0.046864912155049954], [0.52898793596585447, -0.95390955970189806, 0.67094628506674736], [0.77707094593460213, -0.9381958803945607, -0.38755403726661952], [-0.95512664766778776, -0.94265511545526715, 0.62999522803762908], [-0.34211940237072347, 0.7385060933508989, -0.46839267904210335], [0.89845357192897257, -0.20566292605523162, 0.071932447722087067]], [[0.4465406372163212, -0.72705683399804588, -0.33889040584801222], [0.45300467963135915, 0.63687732205365144, -0.5887938979744396], [-0.99876435881324355, 0.43302993835795878, -0.86690628020916916], [-0.11966212528515174, 0.48132344246173631, 0.067718810799224149], [-0.8682653969656049, -0.42157936726968548, -0.49624676448111482], [0.46713240974708903, -0.13913345789147291, -0.48265101801188348]], [[0.85397507391416805, -0.40190707839141915, -0.95209012389664638], [0.49816209025295954, -0.29512226684034171, -0.12687347814179817], [-0.64038360356616697, 0.54820708523004491, -0.065866133294594009], [0.21178816296400416, 0.11110518143902581, -0.44999281709555605], [-0.41835108920617259, -0.76815433531646882, 0.92055970717005597], [-0.97000463279944116, -0.87134789198421525, 0.33034644277048009]], [[-0.2862755353946036, 0.40833654821954601, -0.71384862284511774], [-0.19388263723082888, 0.11474547110893329, -0.24989701404067444], [0.25217426881034211, 0.69332043929417386, -0.33643547881707381], [-0.58366758177907463, 0.50034574988607772, -0.33325498653792063], [-0.76829531550859187, 0.81468778873796421, 0.55885187556104876], [0.66829798389763972, 0.7391271314010015, 0.83171130132647342]]])
        yy=numpy.array([[[0.17190827552063914, -0.33264202977644253, 0.22744483017106898], [0.86325811133810704, -0.25519198343195315, 0.61577698626097455], [0.76133975278877553, 0.1667972587162474, 0.37738629999591722], [0.7338828501435033, -0.37746784428261337, -0.54687932651430704]], [[0.94226872697843311, 0.99127014041093808, 0.76929560876202352], [-0.096014535744621821, 0.37441508671716028, -0.25693149568403495], [-0.98822895242329767, 0.058895386569362218, -0.14630580000754834], [-0.95723800023551675, 0.12326146162149865, 0.45522948154817588]], [[-0.35630416614922167, 0.2305772910351791, -0.88664159832608047], [-0.33039845039038829, -0.16885873523651207, -0.77501359809040249], [0.20269050907418129, 0.95953546433850256, 0.23574422311570142], [-0.11966857764594829, -0.58846738062495629, 0.95250195487834355]]])
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=1)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank3_and_3_offset2(self):
        sh0=(3, 6, 1)
        sh1=(6, 6, 1)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=2)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[-0.92000620435439751], [0.33685349634807227], [-0.51912045765054482], [0.53194279439877956], [0.55824113222405658], [0.96762113956085538]], [[-0.55254877477698483], [-0.58204361775555213], [-0.79434914463799444], [-0.061692377750820704], [-0.91861942074923508], [-0.57678943805157079]], [[0.3549433609631838], [0.098260304787729735], [-0.45463025450507244], [-0.94962534453546565], [-0.39000305790844947], [0.43194633892062284]]])
        yy=numpy.array([[[-0.73143401071572778], [0.44084768091376625], [0.067422761424991373], [-0.077691417462340429], [-0.88790415234387421], [0.019506635416929985]], [[0.92076396960770568], [-0.46341427392942403], [-0.29454001619491099], [0.37855011047178189], [-0.6728129515886021], [-0.87189006250692236]], [[0.62275535807843663], [-0.88155231208063856], [0.43105486060227438], [-0.02766757396534425], [0.71719128155893319], [0.75092210182492392]], [[0.37605701883926446], [0.23993114878869637], [-0.75150515909373139], [-0.87514675603693814], [0.15079440070618921], [-0.39347003193049535]], [[0.26881147709770992], [0.31916980026494635], [-0.25978723111023561], [0.48050741202043357], [-0.57807331611313062], [-0.048025160278569068]], [[-0.86578350273162541], [-0.30215615705819432], [-0.91504660466525189], [-0.068821314004148926], [-0.57125984434816091], [0.93509174478488122]]])
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=2)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank3_and_3_offset3(self):
        sh0=(1, 2, 1)
        sh1=(1, 2, 1)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=3)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[-0.51743919235830615], [-0.048063875848551429]]])
        yy=numpy.array([[[-0.21956909864465146], [0.47781638685218741]]])
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=3)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank3_and_4_offset2(self):
        sh0=(5, 6, 5)
        sh1=(5, 4, 6, 5)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=2)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[0.35635069107452733, 0.65620326992779288, -0.32414800823426471, -0.086255789498103974, 0.049928133752691561], [0.16429469752515269, 0.87757407309107816, -0.078997902615726145, -0.45467060282045679, 0.31009330310145744], [0.97663744269804353, -0.24026203947979563, -0.51764616807308617, 0.1775043213556049, -0.72645481638212805], [0.34456906691980893, -0.057259483684552581, -0.31265187435353115, -0.67093486571011174, 0.93203689829387071], [-0.4737668486319373, 0.87561287500525742, 0.38422159743264817, -0.12798616830035736, 0.76849880862221887], [0.18051614392325344, -0.52435578167007257, -0.89536091095446513, -0.82489332934254511, -0.79299278522844396]], [[0.90136790144920953, 0.92474624609310907, 0.77475494495740094, 0.68460817930092022, 0.33040071089225398], [-0.80875884530521702, 0.49452817686806738, -0.17169329602631977, -0.62882328964582124, -0.11019175743611909], [0.21288031249349437, -0.87806714403650732, 0.52591438928992251, -0.48648154987900472, -0.81684021011574548], [0.016231587446001949, 0.7212347220639137, -0.92785567347892273, 0.25611468647353042, -0.63990888304088034], [0.36834588022769776, -0.12581716247127028, -0.064431333182335404, 0.82306302476872517, -0.66997393457334176], [0.1227871371490894, 0.66249167420218646, 0.13489156152147852, 0.62535223755057401, 0.84768022633849838]], [[-0.71847588744490798, -0.97877253143314347, 0.86365707020028859, -0.86026039611933269, -0.25252328000061364], [-0.66280568782723326, 0.97384120253155859, 0.33699011509615717, 0.86390277035223262, 0.80068766488615895], [0.97364960429725023, 0.85229785870913632, 0.878411330129377, -0.89640456064262142, -0.35488624602714758], [-0.180475190184189, 0.71084068693907176, 0.017566242598844539, -0.37844073926808131, -0.35149656662897555], [0.26879153355628072, 0.30663606470623717, -0.21167801032236944, -0.44463033276589847, -0.92183648277953711], [-0.82643337935757555, -0.97390668646386969, -0.86756615060701892, 0.044837726365127173, -0.94481648913268312]], [[-0.70109917334018745, 0.036848278515952293, -0.55200977769974502, 0.99874139101074633, 0.21964655724782345], [0.11611821276712386, 0.28497927350091889, 0.54096326619780366, 0.84059993215541051, 0.11967269773188427], [0.74519631928345231, 0.22778072984614983, 0.82229086687149366, 0.61034672778819155, 0.48587568381265878], [0.98137590966230759, 0.81636679331189899, -0.58166331015032413, 0.74808561881606184, 0.71938227636911467], [-0.077348375382316314, -0.72140938468806137, 0.83437022169864528, 0.22810590387402385, 0.22434156751245049], [-0.22246092702437115, -0.88241091436405306, 0.53203076039832098, 0.24467842936230477, -0.20288545116179435]], [[0.91077341258341526, -0.34965110121959153, -0.30550340053253056, 0.022312957566434033, 0.97239570703539857], [0.1399275015385375, -0.079166567879275895, 0.0064894966259343434, -0.2477851782214826, 0.94134931945624967], [0.97994253477804727, -0.63918280780544956, -0.82320096515460106, -0.70688884958613407, 0.26970008780238608], [0.33024700715985733, 0.055945062903413056, -0.92335517098298636, -0.37858747473657584, -0.43332595919486816], [0.82277297725687637, 0.47208139580532937, 0.5921959700987427, -0.75001766388275937, 0.89043057245592849], [0.64869370469993615, 0.65496887557577121, 0.93549796163513865, -0.050544384678977261, 0.6373333525284548]]])
        yy=numpy.array([[[[-0.50300521950363675, 0.38581366973418296, 0.94594821374920968, 0.044653751645034045, 0.69381965904338516], [0.6533465448840996, -0.24239687308302305, -0.40062988235812136, -0.3866663242693249, 0.67396266761065537], [-0.15844387562187823, 0.31955638377923168, 0.89618835506879657, -0.78993716882680021, 0.35613308384574438], [0.71784433450947871, 0.7166438431943789, -0.68385837508191072, -0.97665125051323876, 0.033398998732362406], [-0.13349207630551496, -0.094829846185493949, 0.33585273276007643, -0.67236229527182934, 0.96566667181085064], [0.71152002013092885, 0.30037729934345214, 0.71238290874475974, -0.94517026801473691, -0.25038863964104086]], [[0.64609963781282342, 0.79889605473265091, 0.61744356414196444, -0.73589702765492171, 0.41367385585356087], [-0.34787349490426944, 0.54856552296829642, 0.95743154825583465, -0.67833814327754016, 0.33863283002630973], [-0.65340241714969727, -0.56487548769068141, 0.083317338780659833, -0.95657082590231379, -0.074098666114479572], [0.61875397939518728, -0.94061025971594048, 0.65664373110227015, -0.37286126605018466, 0.21670286987401122], [-0.83953862642660448, 0.32705742149399541, 0.76092249600046724, 0.87692435270400471, 0.23294991851554747], [-0.76918017695962893, 0.53309052105673338, -0.61147320457486698, -0.97380786967302679, 0.75448020078607891]], [[0.79672527121710113, -0.26479496932553359, -0.25938202427767587, -0.87484022638283876, -0.134289823522181], [0.8659739261572319, -0.02788439479285687, -0.71852967986579785, -0.65682382472349321, 0.85014363497453993], [-0.25314821505718421, 0.13648557328109123, -0.8727725519077989, -0.63252515724608371, 0.79354796938775851], [0.048396921586163044, -0.99765467829583998, -0.56410068696776694, 0.90701919425664967, 0.37763550586166361], [0.49394712076741221, -0.18651816817329303, -0.80246194309832553, 0.17257787266595415, 0.51406843054822215], [-0.39611055778221926, 0.46061534594820963, -0.69047930663043089, -0.097627313125191906, 0.78583326323523139]], [[0.54815440604869514, 0.23778885216715273, -0.77359912159578936, 0.93485237787110353, -0.89441846628619137], [-0.24455518644803997, 0.54055173171629556, -0.87420635001969105, 0.9648114779232837, 0.20021743889506327], [0.56564882961826002, 0.52840031735694448, 0.69878226414984712, 0.039626391611153666, -0.4918055014160061], [0.27172890475065437, 0.28333062918591856, -0.64402002950741344, -0.09364692302100952, 0.0068906946164422056], [0.81786600724426206, -0.38258475682747939, 0.050026389608117894, -0.67167601789574283, -0.39956025436874576], [0.7319311746196564, 0.23872482935729966, 0.7734191577341285, 0.63618618456923848, -0.3310839563620811]]], [[[-0.96562876727707492, 0.39245698493217129, -0.3192410790894129, 0.0071667964155006647, 0.032953110297534449], [0.5418880263436201, -0.68295232477195356, 0.46826643277282431, -0.7706900890741013, -0.18817039350547926], [-0.11623864557971553, -0.44268605298138786, 0.34399532941723332, 0.98797774375274572, -0.89348193997968295], [0.99529071677243564, -0.7811837895447602, 0.45238810234909121, -0.19824978646481695, 0.89301439944794736], [-0.82149741584248526, 0.63371856007374383, 0.44296661538016791, -0.32729739271024183, 0.17443633813903525], [-0.5096684759861454, -0.99491842259192298, 0.78652677540472893, 0.1514785596629864, 0.61897113066567444]], [[-0.60076303727451719, -0.84775734890275323, -0.13112429476473131, 0.72709692168305518, -0.31962423053614608], [0.55233298521547014, -0.82917430329642294, 0.7398057135213556, -0.50304271712163984, -0.081763351933823003], [-0.44972468388510078, -0.21580572853369318, -0.84383057700968989, 0.55926041614969813, -0.7757348880763395], [-0.5390370672198479, 0.84494399069289594, 0.051861431994588036, 0.84151210717458125, 0.38380375715121251], [-0.017036042955773434, 0.76468917610778342, -0.89113335145772532, -0.72164479066764731, -0.3863755322401079], [0.61806194441012519, -0.22735918106374764, 0.074348821529744757, -0.68332195918048155, -0.87085575054517661]], [[0.025142943450830568, 0.395908153711092, -0.91347458593172992, -0.80828305729568317, -0.57392711091956938], [-0.17559574636918529, -0.025185703887919741, 0.28553583175524655, -0.32110332495997973, 0.65604506712315502], [-0.76159395233780058, 0.1268240280713302, -0.37735677739274509, -0.50483594244513852, -0.96864307579138975], [0.8782591338182395, 0.62071251005411865, -0.11972842105608161, 0.48905929853249153, 0.84462265821931459], [-0.62396438951892574, -0.73514478727732357, -0.94561465606555806, 0.010222753074937474, -0.60062392005184817], [0.27880592118178837, 0.61015621594519498, -0.74941920383028582, 0.68731646786537093, 0.80117970082015955]], [[0.87235073087224246, -0.31382659639875943, 0.025237022676947163, 0.076278663265822333, 0.16372158819393778], [-0.80938712661102108, -0.7230101072091748, -0.9431893072044788, -0.37830084552275767, 0.6454628356198584], [0.90946682587072858, -0.14336788561333358, 0.3021320595349013, 0.63813659762303043, 0.27969965876423286], [0.33992219551891623, 0.052644028668322962, -0.32751530083311042, 0.86148050402050957, -0.48372938917110164], [-0.42185369910104753, 0.62316259590089773, 0.73642760752355985, -0.45794343539650795, -0.11882201910598722], [-0.27435349520026553, -0.068199744528981698, -0.48098217370369722, 0.49897975613485257, -0.26530285917278973]]], [[[0.94947159814308213, 0.64804620978797156, -0.54643324183125874, 0.84384774830493225, -0.016802593876650951], [0.17052200378272042, 0.64027394606092569, 0.95907783376494438, 0.40607951472519521, 0.71999475792136636], [-0.89016008454465245, 0.64954040894412435, -0.47584070296375414, 0.71722172078537438, -0.79162309910028772], [-0.14030856494972421, 0.067040597771639954, -0.89433277241597064, 0.80323009654093958, 0.85348631595128932], [-0.67883402791707215, 0.45267966617757205, -0.19930138699087618, 0.61373545512472383, 0.2671161447871544], [-0.88814855255449121, 0.97235400141366957, 0.96614526823429037, -0.77457533192553929, -0.24634934450318946]], [[-0.034698142425345413, -0.80689505037542641, 0.89450775056553145, -0.2441104628298405, -0.30167900869191477], [-0.96749904645619456, 0.20443471895105536, 0.31308970239108813, -0.098330752974985947, -0.35424061375438431], [0.79979509087218248, -0.75722477463074989, 0.27218606236314513, -0.53877953580875859, 0.77718589504800084], [0.50853564386664951, 0.037168552381313669, -0.39045124939473941, 0.57611762587719095, -0.59752565385772693], [-0.40880725062931655, 0.046382258946844335, 0.071742431731386169, 0.29091402279333511, 0.52139949705041078], [-0.10084787100748338, 0.60268600915679782, 0.52662073327453651, 0.036954786365678949, 0.10462281487642566]], [[0.93003433404191926, 0.80716124264728162, -0.23084761196792125, -0.091319020956444286, -0.66125208636605848], [-0.54359884877784492, -0.94344100726466151, -0.63860404953648198, -0.7368725822600628, -0.51589258307996122], [-0.82459062195061161, 0.54535476745837563, 0.63280979177758079, -0.050740427926805554, 0.59105434536987622], [0.11285172910833663, 0.41698317850308442, -0.93003073439441231, -0.46139506541515152, 0.21188592812935836], [-0.60810557855359315, -0.39804626189036063, 0.064025748777296165, -0.35413935004042796, -0.74812011646914089], [0.66561875834199857, -0.28158701358228, -0.9207812620194531, 0.2545654182794439, -0.050892358072510246]], [[0.2608626408908421, 0.42005144846597653, -0.12862827528131904, 0.58645401182098711, -0.51052208125455278], [-0.76037133804297441, 0.29605439691843971, 0.2653192337396757, -0.53091350012479332, 0.93295130258258574], [-0.32383302209640008, -0.45846476153934668, -0.28891546746853369, -0.049881257320929961, -0.75849896275418383], [-0.92679551721039255, -0.15863076913272312, 0.091597144516725404, -0.43814669912282622, -0.95239309617255818], [-0.9452859386244179, -0.41895034005665788, -0.25277668749461513, -0.54894295551670491, -0.22740484348031687], [0.71665878255377025, 0.28268886702511864, 0.23909326743128689, -0.13762139661358797, 0.85879956137816582]]], [[[0.92355744665069328, -0.12683883615174629, -0.54023424468292935, 0.73418409543005803, 0.29514107043058369], [0.88650749472590729, -0.18436605700547171, -0.19101815398785305, 0.12676536023906015, 0.27739298545764068], [-0.59547841261611656, 0.19380094304515882, -0.18715611264637921, 0.50789551276972733, -0.88354003109977808], [-0.71284307378901834, -0.31402109330727157, 0.48152903591867435, 0.041303721204756894, 0.27763129600123726], [0.036414135407845105, 0.12678557249643352, -0.18070535968903823, 0.75290142931474824, -0.22637943744288602], [-0.17144070049816862, 0.56736970436542755, -0.043533990577922177, -0.40476655547815321, -0.93430144280316951]], [[-0.50809272421055018, 0.060304448857431137, -0.27855210278381159, -0.48390451786474165, -0.18219140427198433], [-0.9856589825575941, -0.93573001508513931, -0.082688780832034237, 0.45284768895622451, -0.27858279392817198], [-0.95372856782008708, 0.81577663134558298, 0.10271454361902577, 0.7314348887375679, 0.077506922599708705], [-0.46993959425564635, -0.044314220985511854, 0.39471658673774623, -0.41324664204463413, -0.64753738420902129], [-0.27183711226592289, 0.45677524099517175, -0.21171099851797748, -0.32773018343133531, -0.61668574193832182], [0.39095695301489286, 0.62281386150042062, -0.67502527669400458, 0.042875831702363643, -0.67719857267399974]], [[0.065970972779859194, 0.33892708455561849, -0.35277216569809577, 0.50232649715540867, -0.45739252665425201], [-0.33556505320860652, -0.87145712383187801, 0.29661539357013944, 0.74004640157966151, 0.25564006129180616], [-0.07714215643317246, -0.4099881830676364, -0.10457342683420401, -0.86958422008817293, -0.14497637240147965], [0.1193051879327911, -0.35282393935124112, 0.4641396567755629, 0.81369685320818408, -0.46573758041302304], [-0.23274589883651897, 0.27296877835296307, 0.50800794282486472, 0.35018408521292654, -0.79143740392116335], [0.032439434131529055, -0.27296654773161477, -0.61236178789320306, 0.59254453383410777, -0.76789832881291953]], [[-0.48765487687557352, 0.60196299276457843, -0.97965376779729385, 0.10490365543392999, 0.46530399196012229], [-0.28410157385370249, 0.24843414258169227, 0.20186622745395066, 0.11711715061920747, -0.66663613773585917], [-0.38960672905768989, -0.40614181803012972, 0.78757091314855798, 0.92130467061782007, 0.61284532929080182], [-0.92496181639614128, -0.75029061266062902, -0.88989932565693919, -0.25789512424738192, 0.475353537997107], [0.78935891842300476, 0.45225671614962981, 0.12834664794023798, -0.82691467694719245, -0.5096670075716343], [-0.75561309793813702, 0.97121969796542618, 0.47949424032065613, 0.42101613147552386, -0.80889285888548712]]], [[[-0.14884691401355243, -0.83800424362310255, -0.72348748352383896, -0.085185011172622671, -0.62904126629132007], [0.87511803680944111, 0.51667263789886464, -0.90221023929847899, -0.77526111776389106, -0.90763202492962325], [0.78604692455230851, -0.56399309263786357, -0.34507427233800558, -0.69624174687781326, 0.38893091858552387], [-0.1356384485511366, 0.12624926687586835, -0.36281342850942466, -0.92429710250768915, 0.10046763693981386], [-0.41227697036654076, -0.1550454263360701, 0.54200309110759171, 0.79514089278261424, -0.98730767268851705], [-0.71321454863410372, 0.073840957306700927, -0.52868760280188654, 0.4367310343020252, 0.29828924890472064]], [[-0.55512274622592694, 0.64782680314109209, -0.14290500687045071, -0.4046029456669904, -0.41192729082148394], [-0.52360288002017974, 0.32493625905526269, -0.38743490768197253, -0.01381496968006557, -0.83011032822982211], [-0.0074518143296762318, 0.11613849247653985, -0.89863608220136526, -0.20784717453527968, -0.64530196738602963], [0.24484425812003163, 0.4300417618078034, 0.021425526935933803, 0.24452279600438453, 0.23355337370615881], [-0.95171442698111353, -0.53048103368678801, 0.20788880306837543, -0.78816372704608106, 0.062651330183463028], [0.96585936938704009, 0.76610255199867683, -0.52047601296653534, 0.081076584866325518, 0.033333783216684454]], [[-0.3089106623377853, -0.47817779640368641, -0.26909089637513617, 0.18666205997924545, -0.57626232016199652], [-0.75618303444677015, -0.14888557557760351, 0.68813257425330887, -0.41725154921875318, -0.98795340388549491], [0.3986605246317978, -0.070602039255948768, -0.52627371768932174, -0.32852155675068695, -0.88027204514874069], [0.51174753259807648, 0.068859240177176151, 0.51214498450789581, -0.87502857230013653, -0.7061214276192842], [-0.19518485893506421, 0.80240726903252368, 0.40021709481673318, -0.0047408778198765322, 0.79675773162048791], [-0.070298233870641935, 0.24164866008962549, -0.38017403986982767, 0.3390358303369132, 0.22335517817235484]], [[-0.59535472168887837, 0.2050361387286761, 0.14456890448288395, 0.96439825103575139, -0.94297173196886219], [0.23052260894799237, -0.65995597242163706, 0.20361236255573112, -0.01535090683365703, 0.83955637289475904], [-0.44764805704777078, -0.0012451947172997802, -0.34549328006094404, 0.38172809045752243, -0.15693557419978865], [-0.55959713445174164, -0.5204850485908481, 0.031150182401601167, 0.37197230457324237, 0.60138595726003552], [0.04126250717714508, -0.13005858232734457, -0.13598436818367521, 0.23121933386369586, 0.83358559809682875], [-0.72755811000051129, 0.19288738218675339, -0.90421796203322802, -0.81455751723089009, 0.26764261814280665]]]])
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=2)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank3_and_4_offset3(self):
        sh0=(2, 2, 6)
        sh1=(2, 2, 2, 6)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=3)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[-0.35526289912988829, -0.76286901395523943, 0.83699662635304573, -0.26842320824312282, 0.85409338416468672, 0.33868352095539467], [0.89426522410921905, 0.25079525565032168, 0.73406865832123369, -0.70968771693158583, 0.87134796451217178, -0.52178445794405492]], [[0.28001246176644612, -0.15876699633851366, 0.37720624737974306, 0.40354732477384858, -0.081281321323039224, -0.56211200804874339], [0.34311794122916517, -0.86182510810416901, 0.40188092767485184, -0.96479581871374576, 0.53502930068029086, 0.81023928124094891]]])
        yy=numpy.array([[[[0.90491843991449405, -0.46897198684797314, -0.14780781194111303, 0.50227621024540658, 0.62565365698738296, 0.9006368325276215], [-0.25028878696922474, -0.71123787912013503, 0.86658405597775268, 0.49620848469594647, 0.83518458608569346, -0.26248289371779343]], [[-0.85136746373917904, -0.40199094712554295, -0.16141052554369639, -0.26986688596456032, 0.8944188944114313, 0.96322235014044999], [0.79029588184167165, -0.11650836161158162, 0.65679321759323095, 0.086631677301922227, 0.96892172383701047, -0.90226099835746076]]], [[[-0.26432490349153492, -0.31695807735683879, 0.64164390191712584, 0.23169606802069675, 0.73237903071951638, -0.40214997782219042], [-0.3349074884494776, -0.082582264743322531, -0.62107869474827559, 0.18603847806529372, -0.16090764472372054, -0.4364529598340372]], [[0.34049460636530315, 0.60864278695940555, -0.28059077322270887, 0.93399953147895909, -0.16422976903883435, -0.4325080155087031], [0.98612437387854057, -0.64688540969832808, -0.94357815396677847, 0.98903515977442868, -0.17093288992355005, 0.43460431598091454]]]])
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=3)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank4_and_0_offset0(self):
        sh0=(2, 1, 5, 6)
        sh1=()
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=0)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[[-0.70166122376313078, 0.33337038651050133, 0.92584383709228835, -0.80247643301062288, 0.41470934201621912, 0.12653163275833279], [0.12312098999728005, 0.88759898664998405, -0.24607816060076093, -0.78588958901546735, 0.81928588337203623, 0.091657843566697039], [0.02563774986156675, 0.59147806633496214, -0.11841128047330951, -0.86976870575426402, 0.84917085074833309, -0.62022581568400925], [0.9343277175925615, 0.38666224251181203, -0.33700177677264653, 0.78927556233665763, 0.69093861364428544, -0.35815629101338331], [-0.87986575412247503, -0.93969295132992081, -0.75062260894277211, 0.13604025880604209, 0.62686056148838376, -0.6228797982331713]]], [[[-0.55027706486826466, 0.88765906262046901, -0.024600713171887056, -0.034406413221018672, 0.77354807044570761, -0.98335443102797959], [-0.9815346452532494, -0.052395932563140901, -0.34166799564910866, 0.39309842846204135, -0.0045098685678706119, 0.74956944441719697], [0.26050658221419853, 0.5141646614329185, 0.74936680753875673, 0.18310906947282724, -0.20066577594712509, -0.42366874191617709], [-0.061947451256164632, 0.10174849480946579, -0.41501276221103467, 0.87831843182149227, 0.30984672201663499, -0.45961627797287719], [-0.99760760957632422, -0.58352028783987997, 0.75785207430736889, -0.92339471787784344, 0.024034662402409257, -0.49770630039837616]]]])
        yy=numpy.array(-0.804280747965)
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=0)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank4_and_1_offset1(self):
        sh0=(5, 3, 4, 4)
        sh1=(4,)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=1)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[[-0.52809811163728293, -0.89575305628257929, 0.4559200664397991, 0.25649139868588011], [-0.94594806199395931, -0.90367421223813849, 0.77973971059593739, 0.95159304144588197], [0.61155631740097527, 0.33691306472618798, -0.5616474517017267, -0.37505180270333538], [-0.1280278671849413, 0.34611422621242127, -0.8686389137278141, 0.88904759159749402]], [[0.27810976467561699, 0.75574907382897893, -0.43983714900766469, -0.020378470956397443], [-0.90715091152155836, -0.79474993998282084, -0.2341644175808264, -0.6249174261151893], [-0.75615084718449599, -0.79095402080225119, 0.2340024113782424, 0.45127581188386223], [0.38418866680899022, 0.78327321414589313, -0.24078959827303725, -0.9042222684291652]], [[0.44228907222734559, -0.37081414185841655, 0.70783474150811476, 0.79076963405564848], [0.60169697428036883, 0.68054824719223728, 0.30648319524741385, -0.57579803608824376], [0.11141961907919584, -0.39365454980239512, -0.89214138267845855, 0.98728564495161164], [0.90724586811571273, 0.6567776390132658, 0.21781537274741747, -0.29759496610167036]]], [[[-0.60393898273999524, 0.52794752251462063, 0.378957200715764, 0.46204835696256619], [-0.81093576965248615, -0.36663902838426132, 0.65453140855321967, -0.54515787448431152], [0.54512118752174765, 0.77014268786114837, 0.50322049512573552, 0.36921091629424052], [-0.61212545957082143, -0.15382657997425286, -0.2684424893867039, -0.76035306098915112]], [[0.22925663259980666, 0.15465944294203848, 0.019282479653985662, 0.97022979323491665], [0.66661789337245958, -0.68884906715043637, 0.080178193018862531, 0.12482958867359484], [-0.13340103853473706, -0.55810062917706871, -0.10139913942051626, 0.83008895197383703], [0.54376841289752065, 0.44513618666587718, 0.71131133509241318, 0.6504432903489159]], [[0.74071831616102313, -0.95512730155407999, 0.042423334630423915, 0.57161262716707406], [0.93085929065317452, 0.077207160437664291, -0.47731151609470301, 0.61571342932992246], [-0.19474483083510341, -0.95506135949692128, -0.66304638823920237, -0.73918352821041444], [0.96598527398933709, 0.64272971227298914, -0.61829972401014222, 0.52909228522207163]]], [[[0.72300046767785409, -0.68308950119821676, 0.84178536411296756, 0.98950623946160032], [0.2057885962254189, -0.7917624651737234, -0.92892043589286111, 0.053186330333742093], [0.65681160926891424, 0.038332247616721382, 0.86295081933164708, 0.062121521246293554], [0.62294599092370162, -0.013950319453910343, 0.29789731494448057, -0.1750279308212519]], [[-0.9987959657463501, 0.64667797744746469, 0.95302843565255269, -0.062174010915800881], [-0.33445106342930386, -0.58244621990238588, -0.098156795318758983, -0.28875736540379271], [-0.17023263287091739, -0.41063550818272909, -0.21514633554499074, 0.99983431696247904], [0.68621639961613323, 0.41768576147532976, -0.31615840399163986, -0.74166121217917214]], [[-0.84271863793468027, 0.26243358624317437, -0.85163222100556424, 0.35568988652604672], [-0.6195316986686239, 0.11340233134194966, -0.74804021785300234, -0.99927205859702872], [-0.246679352085591, 0.28029559125565284, 0.35044382074639002, -0.99176406826220598], [-0.28394993649483324, 0.098635066241797409, 0.47181942094992824, 0.017662015722617941]]], [[[-0.93208933947848416, -0.25504820506646464, -0.074893976426686937, 0.15131560726880888], [0.8432440761600255, 0.945450464593107, -0.52813401135701277, -0.026400698270970357], [-0.92392938844075911, -0.44549622851698878, -0.12676113811588374, 0.53969672776441291], [-0.13176625265331565, -0.26911847567809954, 0.30384828754558213, 0.15085960418569111]], [[-0.82838665813001144, 0.36877788209074636, 0.079052103821177111, 0.9941804840904418], [0.37304212221567901, 0.65660744536925542, -0.38610606478148379, -0.91540248864144957], [0.80741753940766281, -0.8866745181600324, -0.53910204271127338, -0.40614165557229653], [0.73526047214797563, -0.37522288378574964, 0.073587916952378096, -0.98363389577819205]], [[-0.084905853189657821, -0.65150618784381598, 0.58058382598240921, 0.77524058684035735], [-0.79684677682980976, -0.013908309997813229, 0.66929993140733446, 0.048176666162597304], [0.46196869531721885, 0.60999734955453278, -0.36530914129857961, -0.026634133399793702], [0.46176985786791991, -0.37401713325044894, 0.28644375980464276, -0.30392501193853239]]], [[[-0.095606097345395602, -0.67335152648010399, -0.34852998638952259, -0.24328744398475122], [0.15069204637723921, 0.23412506057341753, 0.68715177196284616, 0.8866027726632788], [0.93363875672314256, 0.63309742957004245, -0.82428115137431712, -0.67783013802585335], [0.78240659372191113, -0.24929469042580998, 0.55017520522235386, 0.010233694925996906]], [[-0.19533031551505187, -0.65684907595888031, 0.80111410502072933, -0.27536719069850402], [0.74147956711642182, 0.43116617857804007, -0.5037711102712259, -0.64712280017552115], [-0.8438061859361492, -0.69977125215739688, 0.86754293085697998, 0.92340768010665331], [0.12959083891135093, -0.018334257593338954, -0.089256905805897402, 0.57354520409453102]], [[-0.99481966165904279, -0.8116109495880679, 0.053213362444680001, -0.5886843503566519], [-0.76439168367271448, 0.41888941626020859, -0.086092191576311761, -0.20367602189737366], [0.82404239448886818, 0.068536677141565194, -0.60663243779469589, 0.63150804034741559], [0.67740756650573686, -0.10903955208627059, -0.76214703718488952, -0.23418519258666981]]]])
        yy=numpy.array([-0.81965097886517824, -0.099629613617089996, -0.46045091701396723, 0.4301081566036602])
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=1)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank4_and_2_offset1(self):
        sh0=(2, 3, 3, 3)
        sh1=(6, 3)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=1)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[[-0.33089212902583731, 0.3509384670288731, 0.50783679313463015], [0.66759271008029519, -0.62007248163498141, 0.54774560152683716], [0.55069889096022506, 0.28121890404488048, 0.53556098276134767]], [[0.22904729715900074, 0.91059644133062601, 0.2645754179669757], [-0.072585522404172043, 0.4690041034738206, -0.39452170270536269], [0.42548644697303772, 0.79939625689834326, 0.033563227779193516]], [[0.84855496298765254, 0.34495659568355475, -0.24458848620835161], [-0.70988922845992453, -0.056856557923726569, -0.62998487127187297], [-0.19713775194707228, 0.70078890268288818, 0.56171267943758374]]], [[[0.30706875370042286, 0.55674641886881759, 0.48805460125273381], [0.46560354731705655, -0.86782926290880824, 0.43222772699562451], [-0.9136191132469933, -0.16961846727447361, -0.85893435150051811]], [[0.69007754022776457, 0.77663126164755969, -0.15741481149600878], [-0.86226876260865648, -0.71546891166255944, -0.46755019856410573], [-0.020033383827667395, -0.83534824411510966, -0.83949949684364067]], [[-0.11822083517595994, 0.29064819994410596, 0.165596889211026], [0.13904132310828876, -0.17140117071734173, -0.024698334345141459], [0.4653285297679548, -0.28245057533465356, -0.84843665268207102]]]])
        yy=numpy.array([[-0.7911224948584088, -0.5440554277931593, -0.17487653922189539], [0.11444229327450683, -0.79430931642171321, -0.25779029208988424], [-0.94575288581448391, 0.22235340627331102, -0.50017985608574933], [0.17000352666649565, 0.72784980586258641, 0.48087486322345074], [0.72995389709408309, 0.099047609735004372, -0.72853677334939215], [-0.96180128227291295, -0.11662072808089441, -0.04978926735909317]])
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=1)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank4_and_2_offset2(self):
        sh0=(4, 2, 2, 2)
        sh1=(2, 2)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=2)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.42976334214449619, 0.64462913259392707], [0.047224335303691189, 0.87712384285785783]], [[-0.21793759747220243, 0.39144329627015395], [-0.077942425142606409, 0.94437021326233661]]], [[[0.3925687968474314, -0.76981530039137724], [-0.10662136991000581, 0.48184929054800452]], [[0.52638690003752142, 0.16513615073450016], [-0.67660891955133873, -0.50897509116418993]]], [[[0.26094296961742391, -0.16112003991406665], [-0.1944520366240603, -0.60009816623269363]], [[-0.37611405390774078, 0.57745889244255411], [-0.38086030926089487, 0.60741136802671813]]], [[[0.75491918346432496, 0.43923976229042894], [0.53681098526318949, 0.93239708938341348]], [[0.58670986384777879, 0.29917962900121986], [-0.79069919053443316, -0.359942330610584]]]])
        yy=numpy.array([[0.27861299083342139, -0.37729008574890588], [-0.31419410911823231, -0.83825224108942709]])
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=2)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank4_and_3_offset2(self):
        sh0=(3, 6, 4, 1)
        sh1=(3, 4, 1)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=2)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.030644572222178645], [-0.24452925397469727], [-0.25354578801950112], [0.59927492414421057]], [[-0.49921282220728247], [0.13526756756106195], [-0.10960050589147929], [0.63322026017972788]], [[-0.71541017552259567], [0.51839160878697599], [0.45635535590134024], [0.98983252664710286]], [[0.94254722109874267], [-0.51579347682715371], [0.53803691338620596], [0.020657873216526568]], [[-0.67430042581691585], [-0.80458312333486859], [-0.29253568372709271], [0.8030008584835171]], [[-0.068727818020507314], [-0.93253422108034734], [0.86503483996803276], [-0.47719131416377158]]], [[[0.29196289286713673], [0.2665682412538859], [-0.070009786817146091], [0.76082233960899304]], [[-0.76391623739629244], [0.32300317168373516], [0.55558515075148307], [-0.21772292607188182]], [[-0.029663050799890511], [0.331270683991993], [0.50689498778173081], [0.11529782461511418]], [[-0.92213330380698388], [0.044180952305546306], [0.31683086481801026], [0.35483591206567788]], [[0.57278200669895063], [0.37747172953505181], [-0.71376842184510969], [0.98594639386333638]], [[-0.21600982997710183], [0.43528477058132875], [0.21463256196648883], [0.84976275691742731]]], [[[0.52814151761293404], [-0.67834964468429426], [0.44140593369280645], [0.78439529353043058]], [[0.99088251766542634], [-0.31659574595744067], [0.20291003300179855], [-0.93317158312561554]], [[0.30661704155998737], [-0.28424044567258289], [0.43044442116994164], [0.66070998037314554]], [[0.48128266591906499], [-0.84733227262063826], [-0.82545689639717557], [0.73424841671935748]], [[-0.6460791580943841], [0.73514202477088841], [0.024726009145092043], [0.2852884592020164]], [[0.43875789306609536], [-0.29749249171195702], [-0.98753718074741026], [-0.62477847198094705]]]])
        yy=numpy.array([[[-0.99490901487558503], [0.89693721233184798], [-0.3276534994992808], [-0.85488629863968901]], [[-0.98894285588902586], [-0.42042897802347001], [-0.26692252178856313], [0.54724830895970888]], [[-0.39021081074768893], [0.74289148438007491], [0.29947738992220407], [-0.90011140460241412]]])
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=2)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank4_and_3_offset3(self):
        sh0=(6, 2, 3, 3)
        sh1=(2, 3, 3)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=3)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[[-0.12606730500396424, 0.77876491456174612, -0.23650484393373672], [-0.24169607078896416, -0.45558575504574206, 0.99410012547852089], [0.43825179055435615, -0.43773855389829563, 0.25391437721125709]], [[0.40783078116740179, -0.75177654174188757, 0.76648131975845302], [0.26949400580905647, 0.11098302839741603, -0.96542219642334004], [0.81656059895762279, 0.50180105448997603, 0.16563709091772094]]], [[[0.55152494547634268, 0.69137069102838811, 0.37846017033967061], [-0.24921690304370014, 0.90303780754702578, 0.31885838443621672], [-0.29717344388690003, -0.82627961156502816, 0.16572832577803465]], [[-0.93824934240185298, -0.88485458996812816, -0.17116965522255123], [-0.21692299430523398, 0.84899597476858357, -0.86084218890947795], [-0.69273971376718246, 0.36189296751563593, 0.79263866723795018]]], [[[0.77817398424358153, 0.94826871905189347, 0.061992358028324146], [-0.71822564959200519, -0.65459205977835566, -0.073247445724137883], [0.82872222236796533, -0.57100954400041815, -0.93206757965859599]], [[0.54055602755418941, -0.12514060397594262, -0.77689379524745217], [0.21063940335677467, 0.56835625771911813, -0.95341124110962538], [-0.66888368634184769, -0.21484292919604187, -0.41383053314999274]]], [[[0.52121605460612352, -0.26851381872811175, 0.12677766479991193], [-0.30316450895230873, 0.59965977452786468, 0.3804929056994899], [-0.1996809979934413, -0.27592376969075683, -0.58001360717415573]], [[-0.062873930886663487, 0.73475263958744708, -0.86050296134039672], [0.80519964524155263, 0.51594648984495994, 0.0011036419226111427], [0.74778945847187916, -0.11065548926088176, 0.12586565165267349]]], [[[0.99345258234614198, 0.49400474793832583, 0.35291882913094175], [0.38303403525099178, -0.88893504926197497, 0.23427023939658076], [0.0001674189921427871, -0.29630301870619369, -0.10210853820845434]], [[0.65227767822838612, -0.68220035550750469, -0.059145923409670287], [-0.75669896116691704, -0.040713711749549075, 0.72454009238372441], [0.57067641924105339, 0.97685495211778006, 0.90763837776028988]]], [[[-0.43486911015416418, 0.073851202565372587, 0.68940608787599733], [0.64558406050138561, -0.13899302049527607, -0.76466723991009156], [-0.63956018381126478, -0.87663787894278289, 0.41244680121881161]], [[-0.83896712508587235, -0.33057059400578059, 0.37656441925115169], [0.17065416861647797, 0.73777155625189272, 0.14747131632275035], [0.52503882907200405, 0.36166617753256958, 0.38612903057004622]]]])
        yy=numpy.array([[[-0.44200922009661969, 0.84314192002936905, 0.64340991432141248], [-0.012303718364672811, -0.761857915350165, -0.16800694090985901], [-0.38104587474429397, -0.90909958647264966, 0.13595322408388166]], [[-0.25037524967100655, 0.60027362137044604, 0.32517608422292965], [0.022407223323593239, -0.22827774406816959, 0.55305895095897695], [0.53290355185575433, 0.061802031261185997, -0.57315210062721755]]])
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=3)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank4_and_4_offset2(self):
        sh0=(6, 2, 3, 2)
        sh1=(2, 6, 3, 2)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=2)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.4770031999654063, -0.18849053968977381], [-0.077747830052542044, 0.73336040434049554], [-0.68238673010428497, -0.76601063236214695]], [[-0.94137593803634312, 0.059770682253633467], [-0.47942334938451414, -0.95097191880294552], [0.052347684609469258, 0.53667932360648152]]], [[[-0.96647049685189113, 0.29986219983501239], [-0.21909850681201992, -0.82398453740636612], [0.59756339139805759, -0.13818808411457706]], [[-0.50115959033901181, 0.49082116692669353], [-0.85115218563499928, 0.84922148849677925], [-0.18156612621370538, 0.42929126665419215]]], [[[0.80516636489492144, 0.11220663547655163], [0.20318617197922917, -0.94640204526918903], [-0.25498641316381332, 0.014797453002322936]], [[0.51070400200005106, 0.26581581676895283], [-0.72586858809652699, 0.44281335620401019], [0.76020018220232322, 0.55246202482471651]]], [[[0.81800810081737541, -0.33065335411580477], [-0.82817129741903694, -0.18052586468884435], [0.39829617133604245, 0.26328248178871605]], [[0.95187372515450708, -0.49879549073351814], [-0.31334545627218979, -0.10598308621800623], [0.45225553014154407, -0.72204333662322129]]], [[[0.35579962907297547, 0.36704644800821806], [-0.079518605068258585, 0.63831528655792824], [0.55481984852122923, -0.69681549055736536]], [[0.28742814456940713, 0.5751159693111807], [-0.93273399452649142, -0.37189315489475949], [0.032999464390809807, -0.62385756102986289]]], [[[0.52965372212353246, -0.15665116261881562], [0.42756896156215629, -0.36168607606420689], [-0.59536502914297262, 0.83431218616621128]], [[-0.24844768621565172, -0.9354173182761949], [-0.97970331529108057, 0.77833229861661679], [0.95654550707726549, 0.30952631265029784]]]])
        yy=numpy.array([[[[-0.84877662610898019, -0.23121658520062183], [0.45520729292495044, -0.74754540486397358], [-0.39192609328381312, 0.60086593314030279]], [[-0.41956854022623391, 0.95917604959449254], [-0.92467781342150746, 0.43254558958420009], [-0.3530838655410824, 0.72189425399515583]], [[0.13177373108485946, -0.81972263680695212], [-0.72006665012092896, 0.88345289481929834], [0.49033110214335007, 0.42767325833053471]], [[0.15685330415221266, 0.95830304608084327], [-0.86829235796426452, -0.41175104790413908], [0.072389112720678606, 0.37821512536674917]], [[0.022088957623424887, 0.6822947628581415], [-0.84035839031850945, -0.61575260208153448], [-0.92419582770907982, 0.084766129825214698]], [[0.19508188313043173, 0.65522098803376139], [0.59428118726540258, 0.78889688964191462], [-0.52059639583932493, -0.068036415999946476]]], [[[-0.57136591463167008, -0.49642521219214064], [-0.22603253453286176, -0.97065087813412898], [0.17221321526434252, 0.49125866914041838]], [[-0.70892679771235056, 0.4881610176093869], [-0.60123481616568508, -0.13755631522195255], [-0.72147449045785539, 0.28277293328120967]], [[0.26264572125182384, 0.89100862378120005], [-0.17691869199363452, -0.70840761931177765], [0.31720727113979041, 0.99560600766206031]], [[0.47303672537812869, -0.064740768566179607], [0.28217398092124601, 0.15728214851212718], [-0.5378355119555267, -0.067799392566470384]], [[-0.071499330438406172, -0.82175352779174649], [0.56514594247193695, -0.96234267808832397], [0.59915674721777767, 0.83120670683710629]], [[-0.25924234532601664, -0.24664332868598215], [0.72208155548678143, -0.93108576947238686], [-0.74056630477372631, 0.76074304704694939]]]])
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=2)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank4_and_4_offset3(self):
        sh0=(5, 4, 6, 2)
        sh1=(5, 4, 6, 2)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=3)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.83570501180863066, -0.86661387887925789], [0.27986174295181532, 0.30319466216413637], [0.84982067503733094, 0.37018612903659442], [-0.79997502318629787, -0.51377077232562751], [-0.034575165002596497, -0.48578365451955796], [0.59894163939094547, 0.22921010203760916]], [[0.83130622638073004, 0.7344384753997264], [-0.099781642898696399, -0.1410707525307664], [0.50523095862439638, -0.5146459279470208], [-0.95123570131302504, 0.69393798622395142], [0.60665568150395321, 0.43055787867089101], [-0.45238426386386332, -0.62358229016233357]], [[0.011075827953331174, 0.57965357330729272], [-0.33922281023414058, -0.6998636370401663], [0.44975968515317155, -0.71713828819928227], [-0.5366145129727502, -0.75793637447195983], [-0.81266413330797094, -0.40528070194998089], [0.52135538339669063, -0.31032061377900644]], [[-0.31616765866993268, -0.69145978098830096], [-0.45740760375251188, 0.068331467025751769], [-0.86015782230661531, 0.43957957374976364], [-0.45168766448854325, 0.87291623692193432], [0.14007975294053132, 0.74422858851376428], [-0.83544631708428319, -0.76299045453449521]]], [[[0.096706958252036568, 0.85469048137819281], [0.36097763872025568, 0.89991108985511636], [0.4299222510752998, 0.10227766370078939], [-0.71842423424705482, 0.069649378231917192], [0.48562601487918533, -0.4560031835954772], [-0.7525513204167793, -0.60044925612928735]], [[0.68629215536195431, -0.99783460870102614], [0.46814322342856296, 0.88803491874060958], [-0.97510486728419221, -0.89136565174457494], [-0.38771774930252501, -0.17893362760143638], [-0.75695288161005303, 0.56619687446197298], [0.0072598462913568973, -0.94076796467883539]], [[-0.77038586726717928, -0.035785813420389223], [-0.11694803413458077, -0.15715658625548379], [-0.82002614654447381, 0.47990992716400083], [-0.52522203977817972, 0.21458900160884786], [0.4105264123000818, -0.5636078409156271], [0.53034761356260973, -0.69849065388748288]], [[-0.30725682620888128, 0.65415069480157384], [-0.27250164545678968, -0.46082367299650984], [-0.26866466483312368, 0.065964333526098429], [-0.72434112022052144, 0.92879441812231267], [-0.04327238091221397, 0.25688925160731713], [0.58787160375579206, 0.013999292086802839]]], [[[0.95906683013037886, 0.88240932969335772], [0.045885448746129986, -0.99865827262094742], [0.42728688190073671, -0.90624445656910391], [-0.95477892934021713, -0.77373991611756221], [0.19741078870715967, 0.15066857726103944], [-0.40700704219143491, -0.88762414904708997]], [[0.8621039238271937, 0.83653399529617456], [-0.22629568331976291, 0.30495246948044952], [0.80234853171067133, 0.69839591098084197], [-0.12486739118883561, -0.65624727348710632], [-0.99977456548219612, 0.066542404988195969], [0.85087737506067995, -0.19607904893319072]], [[0.28192014326818415, -0.64983799044505375], [-0.0059173712057793981, 0.40482643293171017], [0.67652651397019548, -0.38740366110412627], [-0.43143516906322987, 0.60389980116242747], [-0.15843931901539854, 0.91386068915505803], [0.63202652544781834, 0.57419591304652573]], [[-0.2752532443189708, 0.13079650096927664], [-0.35619272924641132, 0.89130978072321043], [0.40796642532689864, -0.70660216786523766], [0.27398566201571439, -0.71209317589783638], [-0.55499379245489489, 0.062109238513587961], [0.85235717440827563, 0.857232250152832]]], [[[-0.38176191623165634, 0.40795296288955529], [0.61970144484254996, 0.33816072303095956], [0.93071273376783181, 0.55507602044959414], [-0.18539999715523692, 0.73335424814246308], [-0.95207047289499425, -0.9287729902954005], [0.96249026722288633, 0.94568654568891697]], [[0.60392998840558287, -0.50084250276648157], [0.31916281101477439, -0.7095493581540131], [-0.0022072712079379553, 0.52238122172445722], [0.69210491137669816, -0.16196878650642499], [0.90718941514636819, -0.0026261248981331864], [0.063885708041202971, -0.048641218152642107]], [[0.075771182030406559, -0.047687692903329859], [-0.60947845230013642, -0.86789379773200914], [-0.53258816210953763, -0.24783885102950554], [-0.69109994807554553, 0.26754538806807004], [0.28752430883636815, -0.83744598435945394], [0.61768190825202218, 0.17993168228305323]], [[-0.99081607889316037, -0.83691722983975758], [0.13233872751892695, -0.77135326516993663], [0.70815945477496478, 0.64443203850791053], [0.98170549845656363, 0.14784702270638372], [-0.92988951659036045, 0.68170896225585853], [0.8547453551997195, -0.33057785528407457]]], [[[0.49557258495794243, -0.16247304186105493], [0.67201018294146508, -0.92842639779662961], [0.65212488685288372, -0.71837883688412552], [-0.22188212158270404, -0.27504695933182255], [-0.38626685880039946, 0.46223917081824406], [0.31840311388300724, 0.62260858090313009]], [[0.63685041774345463, 0.37704046265280544], [0.21671659599686133, -0.96025279925807094], [0.057802716778356578, 0.83140960361456373], [-0.19014779790370984, 0.91748029262603814], [0.99058939289420778, 0.23087773909637455], [-0.11336994289343494, -0.92664883915619134]], [[-0.96557373392847068, 0.04267281288659408], [-0.84391087679836918, 0.95486352905994942], [-0.376833261172975, -0.08648467616105604], [-0.50032206439658666, 0.20994303101166567], [-0.45073595555426804, 0.86474451523558393], [-0.78021458846792302, -0.1614359440159383]], [[-0.54003276522770527, -0.9527610825601347], [0.96248432520972482, 0.80805480850793376], [0.45372575253556047, -0.34485967471191148], [0.060674463812115054, -0.55862381239755687], [-0.043047921452471938, -0.28153951179299663], [0.64029314808710702, 0.95189943660798626]]]])
        yy=numpy.array([[[[-0.2480189383793483, 0.54826445531466783], [-0.61211055847649742, 0.38239110163673296], [-0.69879141841864056, -0.89507274304533402], [0.15269301505953914, -0.86215532727453037], [0.5130440504696272, -0.93676216042930416], [0.23752160820019741, 0.1986671362441994]], [[-0.77799849228811802, 0.074429998907645123], [0.39366737907669402, -0.26017117129150624], [0.29941868789272852, 0.19841117560213672], [-0.90013369994973691, 0.90195312766790647], [-0.88637775109655403, -0.32850932547332468], [-0.77271829746467868, -0.54398112705727542]], [[0.44837405365479888, -0.86089131479578929], [-0.36485742757385164, -0.56328229198164803], [0.90414121793946811, -0.19225881499298336], [0.77600010830783273, -0.30679475884815677], [0.88242927111383551, 0.19348461583590404], [0.80580714406050213, 0.2912856289373269]], [[0.8777732850659421, 0.013214475985268814], [-0.60174329882400723, -0.6027332559428733], [-0.44283561818899231, 0.0057077020786358013], [0.20396638842834114, -0.84869981416838436], [-0.74885558710169819, -0.42723009471935747], [0.069033364733561253, -0.083219142807073432]]], [[[0.048389781274554178, -0.44819424965844723], [0.90651732103252169, 0.3468007736149501], [-0.79856449160784782, 0.29775707960946751], [-0.4984045965332573, -0.014349012019261975], [-0.10074175694128007, 0.31504960021445005], [-0.86210222513285473, -0.18354881329617978]], [[-0.21160960093201142, 0.2220883895075676], [-0.54824721537111554, -0.0052235081439542252], [0.98647948119391637, -0.70914058705437699], [-0.7260840599919105, 0.98349261157043499], [-0.16519330654241515, 0.14751720012352076], [-0.1321894843457263, 0.52947820772189358]], [[0.59365767930473279, -0.8731078258037217], [0.10004590659152823, -0.44690304523518298], [0.57617360923813776, -0.85435993496302909], [0.98553536790499074, 0.0028623485026868511], [0.68129703784414697, 0.30071193573773392], [-0.85216697763511307, -0.46821925655964325]], [[-0.19839171219692453, -0.1858404604273507], [0.64292381826356126, -0.34555482914302749], [0.11940998185452245, 0.54466615240941452], [-0.099269250648945206, 0.39415937456867933], [-0.50018968091590699, 0.64888228117072533], [0.060392832678651809, -0.88812769080100051]]], [[[-0.32364233657284425, 0.11277921143624003], [0.52861210337593767, -0.6755396053104854], [0.8670913358462542, -0.90770762022968787], [-0.69883305692304987, -0.9723901896208591], [0.86632286894670196, 0.013656764041812153], [-0.26903719879055576, 0.25574367611903259]], [[0.30020002554161507, -0.7450124255810946], [-0.8872379449728065, -0.68369053380858102], [0.20415465708812719, -0.19610966621954207], [-0.76122683609990682, 0.8075759917577392], [0.90737806472808136, 0.55808225699580349], [-0.30908677430575571, -0.79212492438198234]], [[0.33624749801407106, 0.88758496842933621], [-0.87278144990188511, -0.10471635885214692], [0.97686684138291935, 0.043445334328083618], [-0.94639275120031985, -0.48028601290486916], [-0.74413907382082223, -0.95587440640852983], [0.51700363915763137, 0.9503508486080896]], [[-0.71793156371229694, -0.90038754906520757], [0.32986380538801474, 0.4544035326973932], [0.092138993432114846, -0.46139316014702603], [-0.78042795728186398, 0.27096134344165623], [-0.15086520925189362, -0.12389904201361657], [-0.4627775484013934, -0.89359220383712601]]], [[[0.34074028795527922, -0.25198793727745028], [-0.0034492288626610801, -0.92734364723913276], [0.1187020270196002, -0.89251637985113974], [0.79593182189809242, -0.17283131418367081], [-0.31698908553105465, 0.10147050006030867], [-0.024422608242973043, -0.63530602294128458]], [[0.5559530201283347, 0.0112811107963946], [0.33260440342155428, 0.87331661548709927], [-0.64585967311039161, 0.52258082494356684], [0.33715071799892482, -0.3183514428722316], [-0.065848148824827035, -0.50858114279029065], [0.01290878779978577, -0.54520737842797784]], [[-0.088333670523309982, 0.65426473469663371], [-0.53280122313619294, 0.52536291043259808], [0.98809969913827556, 0.47243255433954334], [0.39471017974195921, -0.97670263421668535], [-0.31485053118667983, 0.7445382892487884], [-0.32802208594322613, -0.92393040138036531]], [[0.61004745395630278, -0.4269982790957545], [0.5626767178650991, 0.61007698041564007], [-0.73603915115590524, -0.78642185681811916], [0.47924260054757428, -0.075767352503269159], [-0.17917295447250714, -0.36757434730575445], [-0.26997699720022839, -0.11229900037054552]]], [[[-0.72817153701798731, 0.027178913386125991], [-0.23838778811048389, -0.75262264421761427], [0.92693606858730426, 0.93297010591009855], [-0.77227982761914249, -0.34805546713681523], [-0.5999150486239293, 0.95785888034766486], [0.18275299543370704, 0.040272483245602286]], [[-0.63175585136991552, -0.89622588989663821], [0.58863683614701512, -0.11503829512214825], [-0.85214919779895815, 0.76630908287830524], [-0.98315935148239175, 0.63464948495937978], [-0.043496337178813294, -0.89020382264048914], [0.58505012252094812, 0.89608759103250546]], [[0.99999260069596696, -0.50611074666654088], [-0.91248566731798397, -0.43869547765609473], [0.32102024785913286, 0.46185785271439928], [-0.95256437830518692, 0.86127603024258037], [-0.6775838038145825, -0.85005626975443827], [0.57530061867271698, 0.26187132752329689]], [[-0.63596829542165234, 0.40357532123462803], [0.59292741580043296, 0.087710277307517792], [-0.44791877248816148, -0.87898681760371766], [0.73178050071431544, 0.15534333350394691], [-0.27286692180361682, 0.33906838791669669], [-0.36703084626925953, 0.84263236780045725]]]])
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=3)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")
    #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    def test_generalTensorTransposedProduct_Symbol_rank4_and_4_offset4(self):
        sh0=(3, 2, 4, 1)
        sh1=(3, 2, 4, 1)
        x=Symbol('x', sh0)
        y=Symbol('y', sh1)
        z=generalTensorTransposedProduct(x,y,axis_offset=4)
        self.assertTrue(isinstance(z, Symbol), "wrong type of result")
        xx=numpy.array([[[[0.41799276490034565], [-0.34192490007026621], [0.039457508795087692], [0.20074358153369043]], [[-0.24063454802950224], [-0.15715771683702928], [-0.9837880181114429], [-0.89315909042411223]]], [[[0.015510209083094306], [-0.14376449973901573], [-0.02057100029958181], [0.85668661405872948]], [[-0.27101280069315203], [-0.29953963181511689], [-0.56187814609618458], [0.53486816342596799]]], [[[-0.80913561012102342], [0.73219242915238247], [0.63531732948961728], [0.74415303171350544]], [[0.53652427150818194], [-0.35375866939027123], [0.90804525175372475], [0.15635704244001292]]]])
        yy=numpy.array([[[[-0.58923196144751389], [0.31568598525476066], [0.40786884040070737], [-0.20455002827357527]], [[0.9370390497934622], [-0.82673566804754173], [-0.20600033820818187], [0.49910842215466045]]], [[[-0.16568750087689366], [0.39550300129256066], [-0.29385272837155729], [0.031387113256844401]], [[-0.041319585062149278], [0.69698368122070198], [0.37929097538467538], [-0.98136495915747979]]], [[[-0.21383433251709105], [0.64454262889250025], [0.13162172849445986], [0.50163399945549392]], [[-0.73929923129507658], [-0.10845811860685428], [-0.67127427687348695], [0.26847738120011555]]]])
        ref=generalTensorTransposedProduct(xx,yy,axis_offset=4)
        res=Evaluator(z)(x=xx,y=yy)
        self.assertAlmostEqual(Lsup(res-ref), 0.0, self.TOL_DIGITS, "wrong result")


if __name__ == "__main__":
    import sys
    suite = unittest.TestSuite()
    suite.addTest(unittest.makeSuite(SymbolicTestCase))
    s=unittest.TextTestRunner(verbosity=2).run(suite)
    if not s.wasSuccessful(): sys.exit(1)

