import os
Import('*')

local_env=env_mpi.Copy()
py_wrapper_local_env=env_mpi.Copy()

# Remove the sharedlibrary prefix on all platform - we don't want 'lib' mucking with our python modules
del py_wrapper_local_env['SHLIBPREFIX']

sources = """
	AbstractContinuousDomain.cpp
	AbstractDomain.cpp
	AbstractSystemMatrix.cpp
	AbstractTransportProblem.cpp
	Data.cpp
	DataAbstract.cpp
	DataArrayView.cpp
	DataBlocks2D.cpp
	DataC.cpp
	DataConstant.cpp
	DataEmpty.cpp
	DataException.cpp
	DataExpanded.cpp
	DataFactory.cpp
	DataTagged.cpp
	DataVector.cpp
	DomainException.cpp
	FunctionSpace.cpp
	FunctionSpaceException.cpp
	FunctionSpaceFactory.cpp
	NullDomain.cpp
	SystemMatrixException.cpp
	Taipan.cpp
	TransportProblemException.cpp
	Utils.cpp
	blocktimer.c
""".split()
headers = """
	AbstractContinuousDomain.h
	AbstractDomain.h
	AbstractSystemMatrix.h
	AbstractTransportProblem.h
	BinaryOp.h
	Data.h
	DataAbstract.h
	DataAlgorithm.h
	DataArrayView.h
	DataBlocks2D.h
	DataC.h
	DataConstant.h
	DataEmpty.h
	DataException.h
	DataExpanded.h
	DataFactory.h
	DataTagged.h
	DataVector.h
	DomainException.h
	FunctionSpace.h
	FunctionSpaceException.h
	FunctionSpaceFactory.h
	LocalOps.h
	NullDomain.h
	SystemMatrixException.h
	Taipan.h
	TransportProblemException.h
	UnaryFuncs.h
	UnaryOp.h
	UtilC.h
	Utils.h
	blocktimer.h
	esysmpi.h
	system_dep.h
""".split()

local_env.Append(LIBS = [ 'esysUtils'] + sys_libs )
py_wrapper_local_env.Append(LIBS = [ 'escript', 'esysUtils'] + sys_libs)

if local_env['papi_instrument_solver']:
   local_env.Append(CPPDEFINES=['PAPI',])
if local_env['papi_libs']:
   local_env.Append(LIBS = local_env['papi_libs'])
   local_env.Append(CPPDEFINES=['BLOCKPAPI',])

local_env.Append(CPPDEFINES = [ 'ESCRIPT_EXPORTS'] )

lib = local_env.SharedLibrary('escript', sources)
env.Alias('target_escript_so', lib)

py_wrapper_lib = py_wrapper_local_env.SharedLibrary('escriptcpp', 'escriptcpp.cpp')
env.Alias('target_escriptcpp_so', py_wrapper_lib)

include_path = Dir('escript', incinstall)

tmp1 = local_env.Install(include_path, headers )
env.Alias('target_install_escript_headers', [tmp1])

tmp3 = local_env.Install(libinstall, lib)
env.Alias('target_install_escript_so', tmp3)

tmp4 = py_wrapper_local_env.Install(pyinstall+'/escript', py_wrapper_lib)
env.Alias('target_install_escriptcpp_so', tmp4)

#windows specific mod
if os.name == 'nt':
   py_wrapper_local_env.InstallAs(target = [ pyinstall+'/escript/escriptcpp.pyd', \
                                             pyinstall+'/escript/escriptcpp.lib', \
                                             pyinstall+'/escript/escriptcpp.exp' ], \
					     source = py_wrapper_lib)

# export the lib target since tests will depend on it
# the lib target is a list of file nodes (why? win32 produces more than one output file: .lib, .dll, .pdb)
# FIXME: This list handling produces the desired result but can this be done directly with scons File nodes?
dep_lib = [libinstall+'/'+str(x) for x in lib]
Export('dep_lib')

# Call the python sconscript
env.SConscript(dirs = ['#/escript/py_src'], build_dir='py', duplicate=0)

# Call the unit tests SConscript
local_env.SConscript(dirs = ['#/escript/test'], build_dir='#/build/$PLATFORM/escript/test', duplicate=0)

