# For a generic symmetric scalar problem, these are the recommended settings for MueLu.
muelu:
  # general
  'verbosity': low
  'coarse: max size': 1000
  'coarse: type': Klu2
  'cycle type': V
  'multigrid algorithm': sa

  # reduce setup cost for symmetric problems
  'transpose: use implicit': true

  # start of default values for general options (can be omitted)
  'max levels': 10
  'number of equations': 1
  'sa: use filtered matrix': true

  ##############################
  # AGGREGATION
  'aggregation: type': uncoupled
  'aggregation: drop scheme': classical
  # Uncomment the next line to enable dropping of weak connections, which
  # can help AMG convergence for anisotropic problems.  The exact value is
  # problem dependent.
  # 'aggregation: drop tol': 0.02

  # Aggregates visualization using paraview
  # 'aggregation: export visualization data': true
  # 'aggregation: output filename': "aggs.proc=%PROCID.level=%LEVELID.vtk"
  # 'aggregation: output file: agg style': Convex Hulls

  ##############################
  # SMOOTHING

  'smoother: type': RELAXATION
  'smoother: params':
    'relaxation: type': Jacobi
    'relaxation: sweeps': 1
    'relaxation: damping factor': 0.8

  # Use the following instead for Gauss-Seidel smoothing
  # 'smoother: pre type': RELAXATION
  # 'smoother: pre params':
  #   'relaxation: type': Gauss-Seidel
  #   'relaxation: sweeps': 1
  #   'relaxation: damping factor': 1.0
  #   'relaxation: backward mode': false
  # 'smoother: post type': RELAXATION
  # 'smoother: post params':
  #   'relaxation: type': Gauss-Seidel
  #   'relaxation: sweeps': 1
  #   'relaxation: damping factor': 1.0
  #   'relaxation: backward mode': true

  # Use the following instead for Chebyshev smoothing
  # 'smoother: type': CHEBYSHEV
  # 'smoother: params':
  #   'chebyshev: degree': 2
  #   'chebyshev: ratio eigenvalue': 7.0
  #   'chebyshev: min eigenvalue': 1.0
  #   'chebyshev: zero starting solution': true

  ##############################
  # REPARTITIONING
  # 'repartition: enable': true
  # 'repartition: partitioner': zoltan2
  # 'repartition: start level': 2
  # 'repartition: min rows per proc': 800
  # 'repartition: max imbalance': 1.1
  # 'repartition: remap parts': true
  # 'repartition: rebalance P and R': false
  # 'repartition: params':
  #   'algorithm': multijagged

  # for runs on with OpenMP or Cuda backend, enable
  # 'use kokkos refactor': true
