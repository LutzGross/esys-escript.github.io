/*!  \page gl_FiniteElements The Finite Element Module

<P>This file gives an overview of the finite element module of Galeri.

<P>
An alternative way to produce example matrices is to define a finite element
problem. The Galeri package contains (in the Galeri::FiniteElement namespace)
a set of classes that can be used to discretize scalar,
second-order, symmetric and non-symmetric PDEs of type

\f{eqnarray*}
 - \epsilon \Delta u + b \cdot \nabla u + \sigma u & = & f  \mbox{ on }
   \Omega\\
  & u = & g \mbox{ on } \partial \Omega
\f}
Neumann boundary conditions can be imposed with
minimal changes to the code.
The computational domain \f$\Omega\f$ must be a 2D or a 3D 
domain, discretized using triangles, quadrilaterals, tetrahedra or
hexahedra. The code can be quite easily extended to tackle vector
problems, using the same finite element space for all unknowns. Functions are
provided to compute norms and to visualize the results.

The Galeri finite element code is based on a set of abstract classes:
- Galeri::FiniteElements::AbstractGrid defines the query methods that each grid class must
  implement. AbstractGrid is based on the getrow() concept: instead
  of prescribing a given format, the user must define a set of methods,
  that will be used by the code to query for the vertices in a local
  elements, the coordinates of each vertex, the boundary faces, and so on. 
  The actual data storage becomes inessential.
- Galeri::FiniteElements::AbstractQuadrature defines the finite element
  basis functions, the test functions, and the strategy to numerically
  evaluate the integrals.
- Galeri::FiniteElements::AbstractVariational defines a set of abstract interfaces for the
  variational form. An implementation of this class constructs the
  elemental finite element matrix and the right-hand side. 
- Galeri::FiniteElements::AbstractProblem takes an AbstractGrid, an AbstractVariational,
  and an AbstractQuadrature in input,
  then builds the global finite element matrix, and imposes the
  boundary conditions as specified by the user. It can also compute
  the norm of the numerical solution, exact solution, and error, using
  H1, semi-H1 or L2 norms. 

The solution can be visualized using MEDIT (see web page
http://www.ann.jussieu.fr/~frey/logiciels/medit.html for details and
download). 

<P>
Probably, the easiest way to understand the finite element module is to browse
the examples; see \ref gl_fe_lapl and \ref gl_fe_adv. File \ref gl_fe_grid
shows how to use the AbstractGrid class.

<P>Examples of solutions are reported below.

- \c AdvDiffSquare: Creates a matrix corresponding to the finite element
  discretization of the advection-diffusion problem 
  \f[
  \begin{tabular}{ r l c}
  $- \epsilon \Delta u + \mathbf{b} \cdot \nabla u = 0$ & in $\Omega = (0, 1)$ \\
  $u = g$ & on $\partial \Omega$
  \end{tabular}
  \f]
  where \f$\epsilon = 1\f$, \f$\mathbf{b} = (b_x, b_y) = (5000, -5000)\f$, 
  and \f$g(x,y) = 0.0\f$ if \f$y = 0\f$ and \f$(y = 1, x < 0.2)\f$.
  The unstructured grid is obtained with MATLAB, and it is composed by
  triangles. The grid is composed by 5248 triangles,
  2705 nodes, and 160 boundary faces, and can be found in file \c 
  "galeri/data/Square.grid".  The solution looks like:

  \image html AdvDiffSquare.png

- \c LaplaceCircle: Creates a matrix corresponding to the finite element
  discretization of the Laplace problem 
  \f[
  \begin{tabular}{ r l c}
  $-\Delta u = f$ & in $\Omega = \forall (x, y) \; |  \;\sqrt{(x-1)^2 + (y-1)^2)} < 1$ \\
  $u = 0$ & on $\partial \Omega$
  \end{tabular}
  \f]
  The unstructured grid is obtained with MATLAB, and it is composed by
  triangles. The grid is composed by 4128 triangles,
  2129 nodes, and can be found in file \c 
  "galeri/data/Circle.grid".  The solution looks like:

  \image html LaplaceCircle.png

- \c LaplaceSquare: Creates a matrix corresponding to the finite element
  discretization of the Laplace problem 
  \f[
  \begin{tabular}{ r l c}
  $-\Delta u = f$ & in $\Omega = (0, 1)$ \\
  $u = 0$ & on $\partial \Omega$
  \end{tabular}
  \f]
  The unstructured grid is obtained with MATLAB, and it is composed by
  triangles. The grid is composed by 5248 triangles,
  2705 nodes, and 160 boundary faces, and can be found in file \c 
  "galeri/data/Square.grid".  The solution looks like:

  \image html LaplaceSquare.png

- \c LaplaceSquareInSquare: Creates a matrix corresponding to the finite element
  discretization of the Laplace problem 
  \f[
  \begin{tabular}{ r l c}
  $-\Delta u = 1$ & in $\Omega = (0, 3) \times (0, 3) \backslash (1,2) \times
  (1,2)$ \\
  $u = g$ & on $\partial \Omega$
  \end{tabular}
  \f]
  and \f$g(x, y) = 0\f$ on the exterior square, and \f$g(x,y) = 1\f$ on the interior
  square. The unstructured grid is obtained with MATLAB, and it is composed by
  triangles. The tag of the external boundary is \c 0, while the one of the
  internal boundary is \c 1. The grid is composed by 4800 triangles,
  2516 nodes, and 232 boundary faces, and can be found in file \c 
  "galeri/data/SquareInSquare.grid".  The solution looks like:

  \image html LaplaceSquareInSquare.png

*/

/*! \page gl_fe_grid How to deal with AbstractGrid Classes

File galeri/example/Grid.cpp:

\include Grid.cpp

*/

/*! \page gl_fe_lapl 3D Laplacian

File galeri/example/Laplacian3D.cpp:

\include Laplacian3D.cpp

*/

/*! \page gl_fe_adv 2D Advection-diffusion

File galeri/example/AdvDiff2D.cpp:

\include AdvDiff2D.cpp

*/


