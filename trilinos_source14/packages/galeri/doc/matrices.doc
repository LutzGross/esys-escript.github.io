/*!  \page gl_GalleryCrsMatrix Creating an Epetra_CrsMatrix

<P>This file first gives an example of how to create an Epetra_CrsMatrix object,
then it details the supported matrices and gives a list of required
parameters.

<P>Given an already created Epetra_Map, Galeri can construct an Epetra_CrsMatrix
object that has this Map as RowMatrixRowMap(). A simple example is as follows.
Let \c Map be an already created \c Epetra_Map* object; then, a diagonal matrix with 
\f$a = 2.0\f$ on
the diagonal can be created using the instructions

\verbatim
#include "Galeri_CrsMatrices.h"
using namespace Galeri;
...
string MatrixType = "Diag";
List.set("a", 2.0);
Epetra_CrsMatrix* Matrix = CreateCrsMatrix(MatrixType, Map, List);
\endverbatim

More interesting matrices can be easily created. For example, a 2D biharmonic
operator can be created like this:

\verbatim
List.set("nx", 10);
List.set("ny", 10);
Epetra_CrsMatrix* Matrix = Galeri.Create("Biharmonic2D", Map, List);
\endverbatim

For matrices arising from 2D discretizations on Cartesian grids, it is
possible to visualize the computational stencil at a given grid point by using
function PrintStencil2D, defined in the Galeri namespace:

\verbatim
#include "Galeri_Utils.h"
using namespace Galeri;
...
// Matrix is an already created Epetra_CrsMatrix* object
// and nx and ny the number of nodes along the X-axis and Y-axis, 
// respectively.
PrintStencil2D(Matrix, nx, ny);
\endverbatim

The output is:

\verbatim
2D computational stencil at GID 12 (grid is 5 x 5)

        0          0          1          0          0
        0          2         -8          2          0
        1         -8         20         -8          1
        0          2         -8          2          0
        0          0          1          0          0
\endverbatim

To present the list of supported matrices we adopt the following symbols:
- MATLAB: please refer to the MATLAB documentation for more details on the
  properties of this matrix;
- DENSE: the matrix is dense (but still stored as Epetra_CrsMatrix);
- MAP: the number of elements and its distribution are determined from the
  input map;
- MAP2D: the input map has been created by CreateMap(), using MapType = \c
  Cartesian2D. The values of \c nx and \c ny are still available in the input
  list;
- MAP3D: the input map has been created by CreateMap(), using MapType = \c
  Cartesian3D. The values of \c nx, \c ny and \c nz are still available in the
  input list;
- SER: the matrix can be obtained in serial environments only;
- PAR: the matrix can be obtained in parallel (and serial) environments.
- The symbol \f$A_{i,j}\f$ indicates the \f$(i,j)\f$ matrix of the element in
  MATLAB notation (that is, starting from 1).

<P>
The list of supported matrices is now reported in alphabetical order. 

- \c BentPipe2D (MAP2D, PAR): Returns a matrix corresponding to the
finite-difference discretization of the problem
\f[
- \epsilon \Delta u + (v_x,v_y) \cdot \nabla u = f
\f]
on the unit square, with homogeneous Dirichlet boundary conditions. A
standard 5-pt stencil is used to discretize the diffusive term, and a
simple upwind stencil is used for the convective term. Here,
  \f[
  v_x = 2 conv x (x/2 - 1) (1 - 2y), \quad \quad \quad 
  v_y =-4 conv y (y - 1) (1 - x)
  \f]
  The value of \f$\epsilon\f$ can be specified using \c diff, and that of
  \f$V\f$ using \c conv. The default values are \c diff=1e-5, \c conv=1.

- \c BigCross2D (MAP2D, PAR): Creates a matrix corresponding to the following 
  stencil:
  \f[
  \left[
  \begin{tabular}{ccccc}
    &     & ee  &     &   \\
    &     &  e  &     &   \\
 bb &  b  &  a  &  c  & cc \\
    &     &  d  &     &   \\
    &     & dd  &     &   \\
  \end{tabular}
  \right] .
  \f]
  The default values are those given by \c Laplace2DFourthOrder. A
  non-default value must be set in the input parameter list before
  creating the matrix. For example, to specify the value of \f$ee\f$, one
  should do
  \verbatim
  List.set("ee", 12.0);
  Matrix = Galeri.Create("BigCross2D", Map, List);
  \endverbatim

- \c BigStar2D (MAP2D, PAR): Creates a matrix corresponding to the stencil
  \f[
  \left[
  \begin{tabular}{ccccc}
    &     & ee  &     &   \\
    & z3  &  e  & z4  &   \\
 bb &  b  &  a  &  c  & cc \\
    & z1  &  d  & z2  &   \\
    &     & dd  &     &   \\
  \end{tabular}
  \right] .
  \f]
  The default values are those given by \c Biharmonic2D.

- \c Biharmonic2D (MAP2D, PAR): Creates a matrix corresponding to the
  discrete biharmonic operator,
  \f[
  \frac{1}{h^4} \;
  \left[
  \begin{tabular}{ccccc}
    &     &  1  &     &   \\
    &  2  & -8  &  2  &   \\
  1 & -8  & 20  & -8  & 1  \\
    &  2  & -8  &  2  &   \\
    &     &  1  &     &   \\
  \end{tabular}
  \right] .
  \f]
  The formula does not include the \f$\frac{1}{h^4}\f$ scaling.

- \c Cauchy (MAP, MATLAB, DENSE, PAR): Creates a particular instance of a Cauchy matrix
  with elements \f$A_{i,j} = 1/(i+j)\f$. Explicit formulas are known for the
  inverse and determinant of a Cauchy matrix. For this particular Cauchy
  matrix, the determinant is nonzero and the matrix is totally
  positive. 

- \c Cross2D (MAP2D, PAR): Creates a matrix with the same stencil of
  \c Laplace2D}, but with arbitrary values. The computational stencil is
  \f[
  \left[
  \begin{tabular}{ccc}
  & e &  \\
  b & a & c \\
  & d &   \\
  \end{tabular}
  \right] .
  \f]
  The default values are 
  \verbatim 
  List.set("a", 4.0);
  List.set("b", -1.0);
  List.set("c", -1.0);
  List.set("d", -1.0);
  List.set("e", -1.0);
  \endverbatim

  For example, to approximate the 2D Helmhotlz equation
  \f[
  - \nabla u - \sigma u = f \quad \quad (\sigma \geq 0)
  \f]
  with the standard 5-pt discretization stencil
  \f[
  \frac{1}{h^2} \;
  \left[
  \begin{tabular}{ccc}
  & -1 &  \\
  -1 & $4 -\sigma h^2$ & -1 \\
  & -1 &   \\
  \end{tabular}
  \right] 
  \f]
  and \f$\sigma = 0.1, h = 1/nx\f$, one can set 
  \verbatim
  List.set("a", 4 - 0.1 * h * h);
  List.set("b", -1.0);
  List.set("c", -1.0);
  List.set("d", -1.0);
  List.set("e", -1.0);
  \endverbatim
  The factor \f$\frac{1}{h^2}\f$ can be considered by
  scaling the input parameters.

- \c Cross3D (MAP3D, PAR): Similar to the Cross2D case. The matrix
  stencil correspond to that of a 3D Laplace operator on a structured 3D
    grid. On a given x-y plane, the stencil is as in \c Laplace2D. The
    value on the plane below is set using \c f, the value on the
    plane above with \c g.

- \c Diag (MAP, PAR): Creates \f$ a I\f$, where \f$I\f$ is the identity matrix of
  size \c n. The default value is 
  \verbatim
  List.set("a", 1.0);
  \endverbatim

- \c Fiedler (MAP, MATLAB, DENSE, PAR): Creates a matrix whose element are \f$A_{i,j} = | i - j |\f$.
  The matrix is symmetric, and has a dominant positive
  eigenvalue, and all the other eigenvalues are negative.

- \c Hanowa (MAP, MATLAB, PAR): Creates a matrix whose eigenvalues lie on a
vertical line in the complex plane. The matrix has the 2x2 block
structure (in MATLAB's notation)
\f[
A = \left[
\begin{tabular}{cc} a * eye(n/2) & -diag(1:m) \\
  diag(1:m) &     a * eye(n/2) \\
  \end{tabular}
  \right].
\f]
The complex eigenvalues are of the form a \f$k \sqrt{-1}\f$ and 
\f$-k \sqrt{-1}\f$, for \f$1 \leq k \leq n/2\f$.  The default value is
\verbatim
List.set("a", -1.0);
\endverbatim

- \c Hilbert (MAP, MATLAB, DENSE, PAR): This is a famous example of a badly conditioned
  matrix. The elements are defined in MATLAB notation as \f$A_{i,j} = 1/(i+j)\f$.

- \c JordanBlock (MAP, MATLAB, PAR): Creates a Jordan block with eigenvalue \c
  lambda.   The default value is \c lambda=0.1;

- \c KMS (MAP, MATLAB, DENSE, PAR): Create the \f$n \times n\f$ Kac-Murdock-Szego
  Toepliz matrix such that \f$A_{i,j} = \rho^{|i-j|}\f$ 
  (for real \f$\rho\f$ only).  Default value
  is \f$\rho= 0.5\f$, or can be using \c rho. 
  The inverse of this matrix is tridiagonal, and
  the matrix is positive definite if and only if \f$0 < |\rho| < 1\f$. The
  default value is \c rho=-0.5;

- \c Laplace1D (MAP, PAR): Creates the classical tridiagonal matrix
  with stencil \f$ [-1, 2, -1] \f$. 

- \c Laplace1DNeumann (MAP, PAR): As for \c Laplace1D, but with Neumann boundary
  conditioners. The matrix is singular.

- \c Laplace2D (MAP2D, PAR): Creates a matrix corresponding to the
  stencil of a 2D Laplacian operator on a structured Cartesian grid. The
  matrix stencil is:
  \f[
  \frac{1}{h^2} \;
  \left[
  \begin{tabular}{ccc}
  & -1 &  \\
  -1 & 4 & -1 \\
  & -1 &   \\
  \end{tabular}
  \right] .
  \f]
  The formula does not include the \f$\frac{1}{h^2}\f$ scaling.

- \c Laplace2DFourthOrder (MAP2D, PAR): Creates a matrix corresponding to the
  stencil of a 2D Laplacian operator on a structured Cartesian grid. The
  matrix stencil is:
  \f[
  \frac{1}{12 h^2} \;
  \left[
  \begin{tabular}{ccccc}
    &     &   1 &     &   \\
    &     & -16 &     &   \\
  1 & -16 &  60 & -16 & 1  \\
    &     & -16 &     &   \\
    &     &   1 &     &   \\
  \end{tabular}
  \right] .
  \f]
  The formula does not include the \f$\frac{1}{12h^2}\f$ scaling.

- \c Laplace3D (MAP3D, PAR): Creates a matrix corresponding to the
  stencil of a 3D Laplacian operator on a structured Cartesian grid. 

- \c Lehmer (MAP, MATLAB, DENSE, PAR): Returns a symmetric positive definite matrix, such
  that
  \f[
  A_{i,j} = 
  \left\{
  \begin{array}{ll}
  \frac{i}{j} & \mbox{ if } j \ge i \\
  \frac{j}{i} & \mbox{ otherwise } \\
  \end{array}
  \right. .
  \f]
  This matrix has three properties: is totally nonnegative, the inverse
  is tridiagonal and explicitly known, The condition number is bounded
  as \f$ n \le cond(A) \le 4*n.\f$ 

- \c Minij (MAP, MATLAB, DENSE, PAR): Returns the symmetric positive definite matrix
  defined as \f$A_{i,j} = \min(i,j)\f$. 

- \c Ones (MAP, PAR): Returns a matrix with \f$A_{i,j} = a\f$. The default value
  is \c a=1;

- \c Parter (MAP, MATLAB, DENSE, PAR): Creates a matrix \f$A_{i,j} = 1/(i-j+0.5)\f$.  This
  matrix is a Cauchy and a Toepliz matrix. Most of the singular values
  of A are very close to \f$\pi\f$. 

- \c Pei (MAP, MATLAB, DENSE, PAR): Creates the matrix
\f[
A_{i,j} = \left\{ \begin{array}{cc}
\alpha + 1 & \mbox{ if } i \neq j \\
  1  & \mbox{ if } i = j.
  \end{array}
  \right. .
\f]
This matrix is singular for \f$\alpha = 0\f$ or \f$-n\f$.
The default value for \f$\alpha\f$ is 1.0.

- \c Recirc2D (MAP2D, PAR): Returns a matrix corresponding to the
finite-difference discretization of the problem
\f[
- \epsilon \Delta u + (v_x,v_y) \cdot \nabla u = f
\f]
on the unit square, with homogeneous Dirichlet boundary conditions. A
standard 5-pt stencil is used to discretize the diffusive term, and a
simple upwind stencil is used for the convective term. Here,
  \f[
  v_x = conv \cdot 4 x (x - 1) (1 - 2y), \quad \quad \quad 
  v_y = -conv \cdot 4 y (y - 1) (1 - 2x)
  \f]
  The value of \f$\epsilon\f$ can be specified using \c diff, and that of
  \f$V\f$ using \c conv. The default values are \c diff=1e-5, \c conv=1.

- \c Ris (MAP, MATLAB, PAR): Returns a symmetric Hankel matrix with elements
    \f$A_{i,j} = 0.5/(n-i-j+1.5)\f$, where \f$n\f$ is problem size. The
    eigenvalues of A cluster around \f$-\pi/2\f$ and \f$\pi/2\f$.

- \c Star2D (MAP2D, PAR): Creates a matrix with the 9-point stencil:
  \f[
   \left[
  \begin{tabular}{ccc}
  z3 & e & z4 \\
  b & a & c \\
  z1 & d & z2  \\
  \end{tabular}
  \right] .
  \f]
  The default values are 
  \verbatim
  List.set("a", 8.0);
  List.set("b", -1.0);
  List.set("c", -1.0);
  List.set("d", -1.0);
  List.set("e", -1.0);
  List.set("z1", -1.0);
  List.set("z2", -1.0);
  List.set("z3", -1.0);
  List.set("z4", -1.0);
  \endverbatim

- \c Stretched2D (MAP2D, PAR): Creates a matrix corresponding to the following
  stencil:
  \f[
  \left[
  \begin{tabular}{ccc}
  -1.0           & $-4.0 + \epsilon$ & -1.0 \\
  $2.0 - \epsilon$ & 8.0            & $2.0 - \epsilon$ \\
  -1.0           & $-4.0 + \epsilon$ & -1.0 \\
  \end{tabular}
  \right] .
  \f]
  This matrix corresponds to a 2D discretization of a Laplace operator using
  bilinear elements on a stretched grid. The default value is \c epsilon=0.1;

- \c Tridiag (MAP, PAR): Creates a tridiagonal matrix with stencil 
  \f[
  \left[
  \begin{tabular}{ccc}
  b & a & c \\ 
  \end{tabular}
  \right] .
  \f]
  The default values are 
  \verbatim
  List.set("a", 2.0);
  List.set("b", -1.0);
  List.set("c", -1.0);
  \endverbatim

- \c UniFlow2D (MAP2D, PAR): Returns a matrix corresponding to the
  finite-difference discretization of the problem
    \f[
    - \epsilon \Delta u + (v_x,v_y) \cdot \nabla u = f
    \f]
    on the unit square, with homogeneous Dirichlet boundary conditions. A
    standard 5-pt stencil is used to discretize the diffusive term, and a
    simple upwind stencil is used for the convective term. Here,
    \f[
    v_x = cos(\alpha) V, \quad \quad \quad v_y =  sin(\alpha) V 
    \f]
    that corresponds to an unidirectional 2D flow. The default values are
    \verbatim
    List.set("alpha", .0);
    List.set("diff", 1e-5);
    List.set("conv", 1.0);
    \endverbatim
    
*/

/*! \page gl_matrices_ex Example of Usage of CreateCrsMatrix()

File galeri/example/Matrix.cpp contains an example of usage.

\include Matrix.cpp

*/
