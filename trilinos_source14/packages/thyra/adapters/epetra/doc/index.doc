/*! \mainpage Epetra to Thyra Operator/Vector Adapters

This doxygen collection documents a small amount of code that wraps Epetra
objects to create adapter objects which implement the <a
href="../../../../thyra/src/interfaces/operator_vector/ana/fundamental/doc/html/index.html">Fundamental Thyra ANA
Operator/Vector Interfaces</a>.

These wrappers use a minimal amount of code by making heavy use of the
standard implementations <tt>Thyra::DefaultMPIVectorSpace</tt>,
<tt>Thyra::DefaultMPIVector</tt>, and <tt>Thyra::DefaultMPIMultiVector</tt>.

Click on the links below to browse adapter code and examples:

<ul>

<li> \ref Epetra_Thyra_Op_Vec_adapters_grp : Documents the basic wrapper code
for turning Epetra objects into %Thyra objects.

<li> \ref Epetra_Thyra_Op_Vec_examples_grp : Gives some examples of the use of
the Epetra to Thyra adapter code.

</ul>

\section EpetraThyra_links_sec Links to other software

<ul>

<li><a
href="../../../../src/interfaces/operator_vector/ana/fundamental/doc/html/index.html">Fundamental Thyra ANA
Operator/Vector Interfaces</a>

<li><a
href="../../../../../epetra/doc/html/index.html">Main Epetra Documentation</a>

</ul>

*/

/** \defgroup Epetra_Thyra_Op_Vec_adapters_grp Epetra to Thyra Operator/Vector Adapter Code

The following functions and classes are used to create %Thyra objects which
wrap (or adapt) Epetra objects:

<ul>

<li><tt>Thyra::create_VectorSpace()</tt> accepts an <tt>Epetra_Map</tt> object
and returns a <tt>Thyra::VectorSpaceBase</tt> object.

<li><tt>Thyra::create_Vector()</tt> accepts an <tt>Epetra_Vector</tt> object
and returns a <tt>Thyra::VectorBase</tt> object.

<li><tt>Thyra::create_MultiVector()</tt> accepts an
<tt>Epetra_MultiVector</tt> object and returns a
<tt>Thyra::MultiVectorBase</tt> object.

<li><tt>Thyra::epetraLinearOp()</tt> adapts an <tt>Epetra_Operator</tt> object
to form a <tt>Thyra::EpetraLinearOp</tt> object.

</ul>

The above adapter code is based directly from the general \ref \ref
Thyra_Op_Vec_adapters_MPI_support_grp.  Therefore these Epetra adapted objects
are automatically compatible with any other such MPI-based SPMD adapter
subclasses.

There is, however, one issue that requires a little care and that is using
arbitrary <tt>Thyra::VectorBase</tt> and <tt>Thyra::MultiVectorBase</tt>
objects with the vector and multi-vector versions of
<tt>Thyra::EpetraLinearOp::apply()</tt>.  The issue is that the underlying
<tt>Epetra_Operator::Apply()</tt> function can only accept
<tt>Epetra_MultiVector</tt> objects.  The utility functions
<tt>Thyra::get_Epetra_MultiVector()</tt> return an <tt>Epetra_MultiVector</tt>
view of any <tt>Thyra::MultiVectorBase</tt> object with a compatible range
space.  Studying the implementations of these utility functions will show you
how simple it is to provide for this type of interoperabiity.  This type of
interoperabiity machinary should also be used for other types of concrete
adapter subclasses.

Other types of code will need to extract an <tt>Epetra_Vector</tt> view of a
<tt>Thyra::VectorBase</tt> object.  For this purpose the
<tt>Thyra::get_Epetra_Vector()</tt> functions are provided.

The utility functions <tt>Thyra::get_Epetra_Operator()</tt> are also provided
that encapsulate the extraction of an "adapted" <tt>Epetra_Operator</tt>
object out of a <tt>Thyra::EpetraLinearOp</tt> object through its
<tt>Thyra::LinearOpBase</tt> base interface.  This is a common type of
activity in object-oriented programming.

\section Epetra_Thyra_Op_Vec_examples_sec Examples

<ul>
<li> \ref Epetra_Thyra_Op_Vec_examples_grp
</ul>

*/

/** \defgroup Epetra_Thyra_Op_Vec_examples_grp Assorted Epetra to Thyra Operator/Vector Adapter Example Code

\brief Below are links to example code that demonstrate various use cases for
the %Epetra to %Thyra operator/vector adapters:

<ol>

<li>\ref Epetra_Thyra_Op_Vec_examples_power_method_grp

<li>\ref Epetra_Thyra_Op_Vec_examples_cg_grp

<li>\ref Epetra_Thyra_epetra_adapters_testing_prg_grp

</ol>

*/

/** \example createTridiagEpetraLinearOp.hpp

Click \ref Epetra_Thyra_Op_Vec_examples_power_method_grp "here" and \ref
Epetra_Thyra_Op_Vec_examples_cg_grp "here" for example programs that call
the function.

*/

/** \example createTridiagEpetraLinearOp.cpp

Click \ref Epetra_Thyra_Op_Vec_examples_power_method_grp "here" and \ref
Epetra_Thyra_Op_Vec_examples_cg_grp "here" for example programs that call
the function.

*/

/** \example sillyPowerMethod_epetra.cpp

Click \ref Epetra_Thyra_Op_Vec_examples_power_method_grp "here" for a more
detailed discussion of this example function.

*/
 
/** \example sillyCgSolve_epetra.cpp

Click \ref Epetra_Thyra_Op_Vec_examples_cg_grp "here" for a more
detailed discussion of this example program.

*/

/** \defgroup Epetra_Thyra_Op_Vec_examples_power_method_grp Epetra Implemenation of the Power Method

\ingroup Epetra_Thyra_Op_Vec_examples_grp

\brief Here is an example program that shows the use of the \ref
Epetra_Thyra_Op_Vec_adapters_Epetra_grp "Epetra adapter subclasses" with the
example linear ANA implementation <tt>sillyPowerMethod()</tt>.

This example program is contained in the source file

\verbatim ./thyra/example/sillyPowerMethod_epetra.cpp \endverbatim

where <tt>./</tt> is the base source directory for %epetra
(i.e. <tt>???/Trilinos/packages/epetra</tt>).

This example program is broken down into a few pieces in an attempt to
be more understandable.

\dontinclude createTridiagEpetraLinearOp.cpp

The first piece of example code we show is the function
<tt>Thyra::createTridiagEpetraLinearOp()</tt>.  This function creates
an <tt>Epetra_CrsMatrix</tt> object that represents the well-known
tridiagonal matrix

\f[

A=
\left[\begin{array}{rrrrrrrrrr}
2      & -1 \\
-1     &  2      & -1 \\
       & \ddots  & \ddots  & \ddots \\
       &         & -1      & 2       & -1 \\
       &         &         &  -1     & 2
\end{array}\right].
\f]

After the <tt>%Epetra_CrsMatrix</tt> object is created, it is used to
create a <tt>Thyra::EpetraLinearOp</tt> object that adapts it into a
<tt>Thyra::LinearOp</tt> object.

The implementation of the function
<tt>Thyra::createTridiagEpetraLinearOp()</tt> is shown below:

\skip Teuchos::RCP<Thyra::LinearOp<double> >
\until end createTridiagEpetraLinearOp

\dontinclude sillyPowerMethod_epetra.cpp

The above matrix-building function
<tt>%Thyra::%createTridiagEpetraLinearOp()</tt> is then called
in the following MPI-enabled <tt>main()</tt> driver program:

\skip int main
\until end main

The above driver program should be very strightforward to follow and
generates the exact same numerical results as in the <tt>double</tt>
case in the
\ref Thyra_Op_Vec_examples_power_method_serial_grp "tempalted serial version".

\dontinclude sillyPowerMethod_epetra.cpp

Notice however that the above driver program calls a helper function
called <tt>scaleFirstDiagElement()</tt> which hides the details of
scaling the first diagonal entry of the tridiagonal matrix operator.
This helper function is not too tricking and takes the form:

\skip void scaleFirstDiagElement
\until end scaleFirstDiagElement

One important thing to notice about the above helper function is how
the underlying <tt>Epetra_CrsMatrix</tt> object is accessed given the
<tt>Thyra::LinearOp</tt> interface to the
<tt>Thyra::EpetraLinearOp</tt> object that was created by
<tt>Thyra::createTridiagEpetraLinearOp()</tt>.  Actually, most of the C++
magic is performed in the helper function
<tt>Thyra::get_Epetra_Operator()</tt> which is then followed by a
simple dynamic cast.

The above example program is built as part of the <tt>epetra</tt> package
(unless examples where disabled at configure time) and the executable can be
found at:

\verbatim ./thyra/example/sillyPowerMethod_epetra.exe \endverbatim

where <tt>./</tt> is the base build directory for <tt>epetra</tt>
(e.g. <tt>???/Trilinos/$BUILD_DIR/packages/epetra</tt>).

This example program should run successfully with no arguments and produces
the following output:

\verbinclude sillyPowerMethod_epetra.default.out

This example program also takes a number of command-line options.  To see what
the command-line options are, use the <tt>--help</tt> option.  The
command-line options returned from <tt>./sillyPowerMethod_epetra.exe
--echo-command-line --help</tt> are:

\verbinclude sillyPowerMethod_epetra.help.out

To see the full listing of this example program click: <a
href="sillyPowerMethod__epetra_8cpp-example.html">
sillyPowerMethod_epetra.cpp </a>

*/

/** \defgroup Epetra_Thyra_Op_Vec_examples_cg_grp Epetra Implemenation of the CG Method

\ingroup Epetra_Thyra_Op_Vec_examples_grp

\brief Here is an example program that shows the use of the \ref
Epetra_Thyra_Op_Vec_adapters_Epetra_grp "Epetra adapter subclasses" with the
example linear ANA implementation <tt>sillyCgSolve()</tt>.

This example program is contained in the source file

\verbatim ./thyra/example/sillyCgSolve_epetra.cpp \endverbatim

where <tt>./</tt> is the base source directory for <tt>epetra</tt>
(i.e. <tt>???/Trilinos/packages/epetra</tt>).

This example program is broken down into a few pieces in an attempt to
be more understandable.

\dontinclude createTridiagEpetraLinearOp.cpp

The first piece of example code we show is the function
<tt>Thyra::createTridiagEpetraLinearOp()</tt>.  This function creates
an <tt>Epetra_CrsMatrix</tt> object that represents the well-known
tridiagonal matrix

\f[

A=
\left[\begin{array}{rrrrrrrrrr}
2 a    & -1 \\
-1     &  2 a    & -1 \\
       & \ddots  & \ddots  & \ddots \\
       &         & -1      & 2 a     & -1 \\
       &         &         &  -1     & 2 a
\end{array}\right]
\f]

where \f$a\f$ is an adjustable diagonal scale factor that makes the
matrix \f$A\f$ more or less well conditioned.

The implementation of the function
<tt>Thyra::createTridiagEpetraLinearOp()</tt> is shown below:

\skip Teuchos::RCP<Thyra::LinearOp<double> >
\until end createTridiagEpetraLinearOp

\dontinclude sillyCgSolve_epetra.cpp

The above matrix-building function
<tt>%Thyra::%createTridiagEpetraLinearOp()</tt> is then called along with
the <tt>sillyCgSolve()</tt> function in the following MPI-enabled
<tt>main()</tt> driver program:

\skip int main
\until end main

The above driver program should be very strightforward to follow and
generates the exact same numerical results as in the <tt>double</tt>
case in the
\ref Thyra_Op_Vec_examples_cg_serial_grp "tempalted serial version".

The above example program is built as part of the <tt>epetra</tt> package
(unless examples where disabled at configure time) and the executable
can be found at:

\verbatim ./thyra/example/sillyCgSolve_epetra.exe \endverbatim

where <tt>./</tt> is the base build directory for <tt>epetra</tt>
(e.g. <tt>???/Trilinos/$BUILD_DIR/packages/epetra</tt>).

This example program should run successfully with no arguments and produces
the following output:

\verbinclude sillyCgSolve_epetra.default.out

This example program also takes a number of command-line options.  To see what
the command-line options are, use the <tt>--help</tt> option.  The
command-line options returned from <tt>./sillyCgSolve_epetra.exe
--echo-command-line --help</tt> are:

\verbinclude sillyCgSolve_epetra.help.out

To see the full listing of this example program click: <a
href="sillyCgSolve__epetra_8cpp-example.html">
sillyCgSolve_epetra.cpp </a>

*/

/** \defgroup Epetra_Thyra_epetra_adapters_testing_prg_grp Testing Program for Thyra/Epetra Adapters

\ingroup Epetra_Thyra_Op_Vec_examples_grp

\brief Here we show the testing program that is used to perform
regression tests on the \ref Epetra_Thyra_adapters_Epetra_grp "Epetra adapter subclasses"
and tests a number of other classes as well.

This testing program is contained in the source file

\verbatim ./thyra/test/test_epetra_adapters.cpp \endverbatim

where <tt>./</tt> is the base source directory for <tt>epetra</tt>.

\dontinclude test_epetra_adapters.cpp

This testing program will be shown in its entirety below but first we
will point out some of the more significant parts of the program and
highlight some interesting functionality.

First, the testing program reads in a number of options as shown below:

\skip local_dim
\until return parse_return

Next, some MPI functions are called to get the context of the parallel
program (if built with MPI support and <tt>RTOp_USE_MPI</tt> is
defined):

\skip RTOp_USE_MPI
\until endif

This program then creates two different (parallel or serial) vector
spaces where one is of type <tt>Thyra::EpetraVectorSpace</tt> and
the other is some non-Epetra vector space:

\skip RCP
\until end create

Given these vector spaces a couple %Epetra and non-Epetra vectors
and multi-vectors are created:

\skip RCP
\until neV2

Most of the operations performed in this testing program are fairly
mundane and we show a few of these simpler examples before going onto
some more interesting ones.

These vectors and multi-vectors are then initialized using the
<tt>Thyra::assign()</tt> wrapper functions:

\skip assign
\until neV2

The one norms of these vectors and multi-vectors are are then computed
using various overloads of <tt>Thyra::norm_1()</tt> as:

\skip Scalar
\until neV2_nrm

The first set of more interesting operations are mixing objects of
different concrete type in vector transformation operations.  The
following code shows assigning vectors and multi-vectors of various
types

\skip Thyra::assign
\until Thyra::assign
\skip Thyra::assign
\until Thyra::assign
\skip Thyra::assign
\until Thyra::assign
\skip Thyra::assign
\until Thyra::assign
\skip Thyra::assign
\until Thyra::assign
\skip Thyra::assign
\until Thyra::assign
\skip Thyra::assign
\until Thyra::assign

What is significant about some of the above function calls is that
they mix and match objects with different concrete types.  For
example, a non-Epetra vector is assigned to an %Epetra in the line:

\verbatim
Thyra::assign( &*ev1, *nev2 );
\endverbatim

and an %Epetra vector is assigned to a non-Epetra in the line:

\verbatim
Thyra::assign( &*nev1, *ev2 );
\endverbatim

Similarly, non-Epetra and %Epetra multi-vectors are assigned to and
from in the calls:

\verbatim
Thyra::assign( &*eV1, *neV2 );
Thyra::assign( &*neV1, *eV2 );
\endverbatim

Developer's that really want to understand how this type of interoperability
between different concrete types works are cautiously encouraged to look at
the implementations of the functions
<tt>Thyra::SerialVectorBase::applyOp()</tt> and
<tt>Thyra::SerialMultiVectorBase::applyOp()</tt> in a serial build and
<tt>Thyra::MPIVectorBase::applyOp()</tt> and
<tt>Thyra::MPIMultiVectorBase::applyOp()</tt>.

The <tt>Thyra::LinearOpBase</tt> interface that all vectors and
multi-vectors support is tested by the testing class
<tt>Thyra::LinearOpTester</tt> which is created in the line:

\skip LinearOpTester
\until LinearOpTester

This testing class is then called for all of the vector and
multi-vector objects is the following lines:

\skipline linearOpTester
\skipline linearOpTester
\skipline linearOpTester
\skipline linearOpTester

Now we show how an <tt>Epetra_Operator</tt> object is wrapped by a
<tt>Thyra::EpetraLinearOp</tt> object to give the %Epetra object a
%Thyra skin.

First we create a simple diagonal %Epetra operator in the following
lines of code:

\skip epetra_op
\until end epetra_op

We then wrap this %Epetra operator object as:

\skip LinearOp
\until EpetraLinearOp

This object is then tested in the line:

\skipline linearOpTester

Before the next set of tests we create some %Epetra and non-Epetra
working vectors and mulit-vectors in the lines:

\skip RCP
\until neY

In the next set of lines of code shows how different %Epetra and
non-Epetra vectors and multi-vectors can be mixed and matched with
with this <tt>Thyra::EpetraLinearOp</tt> object:

\skipline NOTRANS
\skipline NOTRANS
\skipline NOTRANS
\skipline NOTRANS
\skipline NOTRANS
\skipline NOTRANS
\skipline NOTRANS
\skipline NOTRANS
\skipline NOTRANS

Note that many of the above function calls involve using non-Epetra
vector and multi-vector objects with the underlying
<tt>Epetra_Operator</tt> object.  This magic happens through the use
of the utility function <tt>Thyra::get_Epetra_MultiVector()</tt> by
the overridden function <tt>Thyra::EpetraLinearOp::euclideanApply()</tt>.

ToDo: Finish this discussion.

To see the full listing of this click: <a
href="test__epetra__adapters_8cpp-example.html">
test_epetra_adpaters.cpp </a>.

*/

/** \example test_epetra_adapters.cpp

Click \ref Epetra_Thyra_epetra_adapters_testing_prg_grp "here" for a more
detailed discusion of this example/test program.

*/

