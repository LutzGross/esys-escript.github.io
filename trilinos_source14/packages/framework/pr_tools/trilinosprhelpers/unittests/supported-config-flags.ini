# supported-config-flags.ini
#
#------------------------------------------------------------------------------
#
# This is a configuration file for the `GenConfig` tool, used to specify what
# keywords are allowable in the build name to differentiate how the code will
# be configured.  The file has only a single section, and its contents follow
# this pattern:
#
#   [configure-flags]
#   flag-1:
#       option-1 # the first option for a flag is the default
#       option-2
#   flag-2:      # flag names must be unique
#       option-3 # option names must also all be unique
#       option-4
#       option-5 # flags can support more than just two options
#
# All flag names and options must be unique within the file.  All flag and
# option names are simply strings, so it's up to the team using the `GenConfig`
# tool to decide if they want to adopt any particular naming conventions.
#
# Note:  All string matching is case-insensitive.
#
#------------------------------------------------------------------------------
#
# Adding a New Flag/Option Set
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# If you need to extend the `GenConfig` tool to parse a new set of keywords out
# of the build name, you'll need to add a new flag/options block to the DEFAULT
# section below.  To do so:
#
#   1. Determine the name for the new flag.
#   2. Determine the names for the different options pertaining to it.
#   3. Add the new flag/options block (see above for syntax).
#   4. Ensure all the flag and option names in the file are unique.
#   5. Update `config-specs.ini` accordingly (see there for details).
#
#------------------------------------------------------------------------------
#
# Adding a New Option to a Flag
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# If you need to add a new option to an existing flag---for instance, you want
# to add a new user to the `package-enables` flag such that you can specify a
# different set of packages to turn on---all you need to do is:
#
#   1. Find the flag you want to add the option to.
#   2. Insert the new option in the list.
#   3. Ensure the option name is unique within the file.
#   4. Update `config-specs.ini` accordingly (see there for details).
#
#------------------------------------------------------------------------------
#
# Removing an Option from a Flag
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# If you need to remove an option that is no longer supported:
#
#   1. Find the option you want to remove.
#   2. Delete that one line.
#   3. Update `config-specs.ini` accordingly (see there for details).
#
# Note:  You may wish to deprecate an option for a time before removing it.  To
#        do so, your team may wish to adopt a convention of prepending `dep-`
#        to flag/option names to indicate their deprecation.
#
#------------------------------------------------------------------------------
#
# Removing a Flag/Option Set
# ~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# If you need to remove an entire flag/option set---for instance, if you used
# to give your users flexibility in a certain way, but are now taking that away
# to consolidate what is officially supported---simply:
#
#   1. Find the flag/option set you need to remove.
#   2. Remove all the lines pertaining to it (the flag and all its options).
#   3. Update `config-specs.ini` accordingly (see there for details).
#
# Note:  You may wish to deprecate a flag/option set for a time before removing
#        it.  To do so, your team may wish to adopt a convention of prepending
#        `dep-` to flag/option names to indicate their deprecation.
#
#------------------------------------------------------------------------------
#
# Modifying an Existing Flag/Option Set
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# If you wish to simply alter a flag/option set, for instance, by renaming
# things, simply use a combination of the instructions above.  Ensure you make
# corresponding changes to `config-specs.ini`.
#
#------------------------------------------------------------------------------

[configure-flags]

# What kind of build (debug or optimized) to produce.
build-type:  SELECT_ONE
    debug
    release

    # The following option means a release build with debug checking turned on.
    release-debug

# What kind of libraries to build.
lib-type:  SELECT_ONE
    static
    shared

# The architecture name recognized by the CMake `KOKKOS_ARCH` configure option
# for Trilinos and Kokkos.  See
# https://trilinos.org/docs/files/TrilinosBuildReference.html#configuring-with-kokkos-and-advanced-back-ends
# for details.  This list comes from
# https://github.com/kokkos/kokkos/blob/master/Makefile.kokkos.
kokkos-arch:  SELECT_MANY
    no-kokkos-arch

    # Intel
    KNC
    KNL
    SNB
    HSW
    BDW
    SKX

    # NVIDIA
    Kepler
    Kepler30
    Kepler32
    Kepler35
    Kepler37
    Maxwell
    Maxwell50
    Maxwell52
    Maxwell53
    Pascal60
    Pascal61
    Volta70
    Volta72
    Turing75
    Ampere80
    Ampere86

    # ARM
    ARMv80
    ARMv81
    ARMv8-ThunderX
    ARMv8-TX2
    A64FX

    # IBM
    BGQ
    Power7
    Power8
    Power9

    # AMD-GPUS
    Vega900
    Vega906
    Vega908

    # AMD-CPUS
    AMDAVX
    Zen
    Zen2

# Whether or not to turn on the Clang address sanitizer.
use-asan:  SELECT_ONE
    asan
    no-asan

# Whether or not support for the `complex<double>` scalar type is built into
# the code.
use-complex:  SELECT_ONE
    no-complex
    complex

# Whether or not to turn on position independent code.
use-fpic:  SELECT_ONE
    fpic
    no-fpic

# Whether or not MPI is enabled.
use-mpi:  SELECT_ONE
    mpi
    no-mpi

# Whether or not to enable all Primary Tested packages.
use-pt:  SELECT_ONE
    no-pt
    pt

# Whether or not to turn on relocatable device code in CUDA builds.
use-rdc:  SELECT_ONE
    no-rdc
    rdc

# Which set of package enables should be used.
package-enables:  SELECT_MANY
    no-package-enables # By default, don't turn anything on.

    # Application-specific
    empire
    sparc
    sparc-mini-trilinos
    trilinos-pr

    # Package-specific
    muelu

    # User-specific
    jmgate
