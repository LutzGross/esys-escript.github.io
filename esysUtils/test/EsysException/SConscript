# Scons configuration file for esysUtils unit tests
esysroot=str(Dir('./../../../..').abspath)
execfile(str(File(esysroot+"/scons/esys_options.py")))

cxx_flags=cxx_flags_debug
cc_flags=cc_flags_debug

#
# print out build configuration for this module

print "Build configuration for module: EsysException unit tests"
print "             cxx: ", cxx
print "       cxx_flags: ", cxx_flags

#
# do the actual build

esysexception_test_path = str(esysroot) + '/esysUtils/test/EsysException'
esysUtils_path = str(esysroot) + '/esysUtils/inc'
CppUnitTest_path = str(esysroot) + '/tools/CppUnitTest/inc'

esysUtils_lib_path = str(esysroot) + '/esysUtils/lib'
CppUnitTest_lib_path = str(esysroot) + '/tools/CppUnitTest/lib'

esysUtils_lib = str(esysUtils_lib_path) + '/libesysUtils.a'

install_dir = str(esysroot) + '/esysUtils/test'

cpp_path = [esysexception_test_path,
            esysUtils_path,
            CppUnitTest_path]

lib_path = [esysUtils_lib_path,
            CppUnitTest_lib_path]

libs = ['esysUtils',
        'CppUnitTest']

libs.extend(sys_libs)

sources = ['EsysExceptionTestCase.cpp',
           'EsysExceptionTest.cpp']

target = 'EsysExceptionTest.exe'

import os
esysexception_env = Environment(ENV = os.environ)

esysexception_env.Replace(CXX = cxx)
esysexception_env.Replace(CXXFLAGS = cxx_flags)
esysexception_env.Replace(CPPPATH = cpp_path)
esysexception_env.Replace(LIBPATH = lib_path)
esysexception_env.Replace(LIBS = libs)

esysexception_test_exe = esysexception_env.Program(target, sources)

Depends(esysexception_test_exe, esysUtils_lib)

Alias("build_tests", esysexception_env.Install(install_dir, esysexception_test_exe))

import scons_extensions
runUnitTest_builder = Builder(action = scons_extensions.runUnitTest, suffix = '.passed', single_source=True)
esysexception_env.Append(BUILDERS = {'RunUnitTest' : runUnitTest_builder});

Alias("run_tests", esysexception_env.RunUnitTest(target))
