Import('*')
local_env=env.Copy()
src_dir = local_env.Dir('.').srcnode().abspath
import os
filenames = os.listdir(src_dir)
#
# files defining tests but are not running by itself:
#
testfiles = [x for x in filenames if x.startswith('test_') and os.path.splitext(x)[1] in ['.py'] ]
# 
# directories defining test data
# 
testdata_dir = [x for x in filenames if x.startswith('data_') ]
# 
#  files defining test runs (passing in a release)
# 
testruns = [x for x in filenames if x.startswith('run_') and os.path.splitext(x)[1] in ['.py'] ]
#
# files defining tests run locally (not as part of a release)
#
localtestruns = [x for x in filenames if not x.startswith('run_') and os.path.splitext(x)[1] in ['.py']]
#
# all test 
#
alltestruns = testruns + localtestruns
#
# test files are just compiled:
#
test_pyc = env.PyCompile(testfiles)
env.Alias('build_py_tests', test_pyc)

#Add Unit Test to target alias
local_env.PrependENVPath('PYTHONPATH',str(env.Dir('#/build/$PLATFORM/escript/test/python')))
local_env['ENV']['ESCRIPT_TEST_DATA_ROOT']=env.Dir('#/escript/test/python').srcnode().abspath
local_env['ENV']['ESCRIPT_WORKDIR']=env.Dir('#/build/$PLATFORM/escript/test/python').srcnode().abspath
env.Alias('local_py_tests',[os.path.splitext(x)[0]+'.passed' for x in alltestruns])
env.Alias('py_tests', [os.path.splitext(x)[0]+'.passed' for x in testruns ])

# get all the python files in the release tar file
release_pyfiles = [ env.File("SConscript"), ]
release_datafiles=[]  # FIXIT: is there a better way?
for d in testdata_dir:
   release_datafiles+=[ d+"/"+x for x in os.listdir(local_env.Dir(d).srcnode().abspath) if not x.startswith('.')]
release_testfiles = [ env.File(x) for x in testfiles + testruns ] + [ env.File(x) for x in release_datafiles ]
env.Zip(src_zipfile, release_pyfiles)
env.Tar(src_tarfile, release_pyfiles)
env.Zip(test_zipfile, release_testfiles)
env.Tar(test_tarfile, release_testfiles)

#
# run all tests:
#
program = local_env.RunPyUnitTest(alltestruns)

Depends(program, pyinstall)
Depends(program, dep_lib) 
Depends(program, 'build_py_tests') 
