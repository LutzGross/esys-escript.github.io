#
# $Id$
#
#######################################################
#
#           Copyright 2003-2007 by ACceSS MNRF
#       Copyright 2007 by University of Queensland
#
#                http://esscc.uq.edu.au
#        Primary Business: Queensland, Australia
#  Licensed under the Open Software License version 3.0
#     http://www.opensource.org/licenses/osl-3.0.php
#
#######################################################
#

import os
Import('*')

try:
  local_env = env.Clone()	# scons-98.03
except AttributeError:
  local_env = env.Copy()	# scons-96.92

py_wrapper_local_env=env.Copy()
# Remove the sharedlibrary prefix on all platform - we don't want 'lib' mucking with our python modules
del py_wrapper_local_env['SHLIBPREFIX']

lib_name = 'bruce'
py_wrapper_name = lib_name+'cpp'
py_wrapper_source = py_wrapper_name+'.cpp'
py_wrapper_lib_name = py_wrapper_name

# get the relevant file names:
src_dir = local_env.Dir('.').srcnode().abspath
filenames = [ x for x in os.listdir(src_dir) if os.path.splitext(x)[1] in [".h", ".c", ".cpp"] ]

sources = [x for x in filenames if os.path.splitext(x)[1] in ['.cpp', '.c']]
headers = [x for x in filenames if os.path.splitext(x)[1] in ['.h']]
# Filter out sources that should not be in the list automatically
sources.remove(py_wrapper_source) # FIXME: should probably refactor the source tree so the python wrapper isn't colocated with c++ sources

local_env.Append(LIBS = ['escript', 'esysUtils'])
py_wrapper_local_env.Append(LIBS = [lib_name, 'escript', 'esysUtils'])

local_env.Append(CPPDEFINES = 'BRUCE_EXPORTS')

lib = local_env.SharedLibrary(lib_name, sources)
py_wrapper_lib = py_wrapper_local_env.SharedLibrary( py_wrapper_lib_name, py_wrapper_source)

include_path = Dir(lib_name, local_env['incinstall'])

local_env.Install(include_path, headers )
local_env.Install(local_env['libinstall'], lib)
py_wrapper_local_env.Install(local_env['pyinstall']+'/bruce', py_wrapper_lib)

# export the lib target since tests will depend on it
# the lib target is a list of file nodes (why? win32 produces more than one output file: .lib, .dll, .pdb)
# FIXME: This list handling produces the desired result but can this be done directly with scons File nodes?
dep_lib = [local_env['libinstall']+'/'+str(x) for x in lib]
Export('dep_lib')

# Call the python sconscript
env.SConscript(dirs = ['#/bruce/py_src'], build_dir='py', duplicate=0)

# Call the unit tests SConscript
local_env.SConscript(dirs = ['#/bruce/test'], build_dir='#/build/$PLATFORM/bruce/test', duplicate=0) 
