#!/bin/bash

#This script produced with the aid of "The Debian System concepts and techniques" By Martin F. Krafft
# Its purpose is to produce a .deb for escript


#A ~ in front of the version number indicates a pre-release and will sort earlier than versions without ~
SRCDIR=`pwd`
WRAPPERNAME=run-escript
#ALTWRAPPERNAME=finleypython
OUTPUTROOT=$SRCDIR/build/package/debuntu/escript
LIBOUT=$OUTPUTROOT/usr/lib/escript
BINOUT=$OUTPUTROOT/usr/bin
PKGFILES=$SRCDIR/packaging/debuntu

# check to be sure we are running from the project root and that we look like the root user

if [ `whoami` != 'root' ]
then
	echo "Please execute this script under fakeroot."
	echo "fakeroot $0"
	exit 1
fi

if [ ! -d escript/src ]
then
  echo "Please execute this script from the root of the project"
  exit 3
fi

if [ $# -lt 1 ]
then
  echo "Usage: builddeb distro"
  exit 4
fi

distro=$1

# case "$distro" in
#   "lenny" ) ;;
#   "jaunty" ) needpy26=yes;;
#   "karmic" ) needalt=yes;;
#   "lucid" ) needalt=yes;;
#   "maverick" ) needalt=yes;;
#   *) echo "Unknown distro $distro"; exit 4;;
# esac

if [ -d $OUTPUTROOT ]
then
  rm -rf $OUTPUTROOT || (echo "Error could not clean build area";exit 2)
fi

ARCHV=`uname -m`


case "$ARCHV" in 
   "i686" ) ARCH="i386";;
   "x86_64" ) ARCH="amd64";;
   *) echo "Unknown architecture $ARCHV. Unable to build package";exit 3;;
esac

#Check to ensure people are only building from clean checkouts
#(Or at least a single consistent version).
SVNREV=`svnversion` || (echo "Error - can't determine svn version"; exit 5)
SVNERR=`echo $SVNREV | grep '[^[:digit:]]'`

if [ -n "$SVNERR" ]
then
   echo "Please build packages using a clean checkout."
   echo "Your version string shows $SVNREV"
   exit 6
fi

#Now try to identify versions we are using
PYPKG=`dpkg --get-selections 'python?*' | grep install | grep -v '-' | cut -f1`
if [ `echo $PYPKG | wc -w ` != "1" ]
then
    echo "Can't determine the version of python"
    exit 8
fi

echo "Python package is $PYPKG."

BOOSTPKG=`dpkg --get-selections 'libboost-python?????*' | grep -v 'de' | grep 'install' | cut -f1`
if [ `echo $BOOSTPKG | wc -w` != "1" ]
then
    echo "Can't determine the version of boost"
    exit 9
fi

echo "Boost package is $BOOSTPKG"

echo "Reading package version from  $PKGFILES/escript/DEBIAN/control"
#Now get the package version
VERSION=`grep "Version:" $PKGFILES/escript/DEBIAN/control | cut -f2 -d\ `

read -p "Build package with version $VERSION?(Y/N)" DOBUILD

if [ "$DOBUILD" != 'Y' ]
then
   echo "Aborting"
   exit 7
fi

mkdir -p $OUTPUTROOT

#First copy debian skeleton 
cp -r $PKGFILES/escript/* $OUTPUTROOT
find $OUTPUTROOT -name ".svn" | xargs rm -rf 

pkgname=escript

mkdir -p $OUTPUTROOT/usr/share/man/man1

#copy the man page
cp $SRCDIR/doc/manpage/man1/$WRAPPERNAME.1 $OUTPUTROOT/usr/share/man/man1

gzip $OUTPUTROOT/usr/share/man/man1/$WRAPPERNAME.1
#if [ -z "$needalt" ]			#We are not building the alt package
#then
#	pushd $OUTPUTROOT/usr/share/man/man1 > /dev/null || (echo "A directory has disappeared" ; exit 8)
#	ln -s $WRAPPERNAME.1.gz escript.1.gz
#	popd > /dev/null
#fi



#copy the documentation
cp $SRCDIR/release/doc/escript_examples.tar.gz $OUTPUTROOT/usr/share/doc/escript/
cp $SRCDIR/release/doc/install/install.pdf $OUTPUTROOT/usr/share/doc/escript
cp $SRCDIR/release/doc/user/guide.pdf $OUTPUTROOT/usr/share/doc/escript
cp $SRCDIR/release/doc/cookbook/cookbook.pdf $OUTPUTROOT/usr/share/doc/escript
cp -r $SRCDIR/release/doc/epydoc $OUTPUTROOT/usr/share/doc/escript/python_html

mkdir -p $LIBOUT/lib
mkdir -p $BINOUT
#Should be using install here?
cp $SRCDIR/lib/* $LIBOUT/lib
cp -r $SRCDIR/esys $LIBOUT

# We should be using the standard python
export ESCRIPT_ROOT=/usr/lib/escript

sed -e "s%STDLOCATION=0%STDLOCATION=1%" < $SRCDIR/bin/$WRAPPERNAME > $BINOUT/$WRAPPERNAME

sed -i -e "s%PYPKG%$PYPKG%" $OUTPUTROOT/DEBIAN/control
sed -i -e "s%BOOSTPKG%$BOOSTPKG%" $OUTPUTROOT/DEBIAN/control


# if [ -z "$needalt" ]
# then
# 	pushd $BINOUT > /dev/null || (echo "A directory has disappeared" ; exit 8)
# 	ln -s $WRAPPERNAME escript
# 	popd > /dev/null
# fi

#end content from finley_wrapper_writer.sh

cd $BINOUT
cd $SRCDIR

#Nuke any svn stuff that made it in
find $OUTPUTROOT -name ".svn" | xargs rm -rf 


#Say what version of the debian packaging format we are using:
#This is NOT the package version
echo 2.0 > $OUTPUTROOT/../debian-binary

#Check some permissions
chmod og=rx $BINOUT/$WRAPPERNAME
if [ -f $LIBOUT/pythonMPI ]
then
	chmod og=rx $LIBOUT/pythonMPI 
fi

cd $OUTPUTROOT 

cd usr/share/doc/escript/
gzip changelog.Debian

cd $OUTPUTROOT
#Fix directory perms
chmod -R og-w .

cd DEBIAN

#Now we need to update the architecture
sed -i -e "s%Architecture: i386%Architecture: $ARCH%" control
# if [ -n "$needpy26" ]
# then
#   echo "Replacing python2.5 dependency with python2.6 for jaunty"
#   sed -i -e "s%Depends: python2.5%Depends: python2.6%" control 
# fi

tar czf ../../control.tar.gz .
cd ..
tar czf ../data.tar.gz usr
cd ..



ar rcu $pkgname-$VERSION-$distro\_$ARCH.deb debian-binary control.tar.gz data.tar.gz

mkdir -p $SRCDIR/release/pkg
cp $pkgname-$VERSION-$distro\_$ARCH.deb $SRCDIR/release/pkg


echo "Control file is:"
cat $OUTPUTROOT/DEBIAN/control