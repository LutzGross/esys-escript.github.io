Import('*')

lib_name = 'mmio'
                                    
mmio_env=env.Copy()
src_dir = mmio_env.Dir('.').srcnode().abspath

import os
filenames = os.listdir(src_dir)
sources = [x for x in filenames if os.path.splitext(x)[1] in ['.cpp', '.c']]
headers = [x for x in filenames if os.path.splitext(x)[1] in ['.h']]


include = Dir(lib_name, esys_inc)
mmio_env.Install( include, headers )

if env['PLATFORM'] == "win32":
   mmio_env['PDB'] = lib_name+'.pdb'
elif  env['PLATFORM'] == "posix":
    pass
else:
   import os
   
   cc_flags = '-O0 -openmp -openmp_report0 -tpp2 -ansi -ansi_alias -no-gcc -w1'
   
   cpp_path = ['#inc']
   
   lib = 'mmio'
   sources = ['mmio.c']
   
   mmio_env = Environment(ENV = os.environ)
   
   mmio_env.Replace(CC = 'icc')
   mmio_env.Replace(CCFLAGS = cc_flags)
   mmio_env.Replace(CPPPATH = cpp_path)
   
   mmio_lib = mmio_env.StaticLibrary(lib, sources)
   mmio_env.Install(libdir, mmio_lib)

mmio_lib = mmio_env.StaticLibrary(lib_name, sources)
mmio_env.Install(esys_lib, mmio_lib)
