// @HEADER
// ************************************************************************
//
//               Rapid Optimization Library (ROL) Package
//                 Copyright (2014) Sandia Corporation
//
// Under terms of Contract DE-AC04-94AL85000, there is a non-exclusive
// license for use of this work by or on behalf of the U.S. Government.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// 1. Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the Corporation nor the names of the
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Questions? Contact lead developers:
//              Drew Kouri   (dpkouri@sandia.gov) and
//              Denis Ridzal (dridzal@sandia.gov)
//
// ************************************************************************
// @HEADER

#ifndef ROL_CONSTRAINTFROMOBJECTIVE_H
#define ROL_CONSTRAINTFROMOBJECTIVE_H

#include "ROL_Constraint.hpp"
#include "ROL_StdVector.hpp"

/** @ingroup func_group
    \class ROL::ConstraintFromObjective
    \brief Defines a constraint from a given objective.
*/


namespace ROL {

template <class Real>
class ConstraintFromObjective : public Constraint<Real> {
private:
  const Teuchos::RCP<Objective<Real> > obj_;
  Teuchos::RCP<Vector<Real> > dualVector_;
  bool isDualInitialized_;

public:
  ConstraintFromObjective(const Teuchos::RCP<Objective<Real> > &obj)
    : obj_(obj), dualVector_(Teuchos::null), isDualInitialized_(false) {}

  const Teuchos::RCP<Objective<Real> > getObjective(void) const {
    return obj_;
  }

  void setParameter(const std::vector<Real> &param) {
    obj_->setParameter(param);
    Constraint<Real>::setParameter(param);
  }

  void update( const Vector<Real> &x, bool flag = true, int iter = -1 ) {
    obj_->update(x,flag,iter);
  }

  void value(Vector<Real> &c, const Vector<Real> &x, Real &tol) {
    Teuchos::RCP<std::vector<Real> > cp =
      (Teuchos::dyn_cast<ROL::StdVector<Real> >(c)).getVector();
    (*cp)[0] = obj_->value(x,tol);
  }

  void applyJacobian(Vector<Real> &jv, const Vector<Real> &v,
                     const Vector<Real> &x, Real &tol) {
    if ( !isDualInitialized_ ) {
      dualVector_ = x.dual().clone();
      isDualInitialized_ = true;
    }
    Teuchos::RCP<std::vector<Real> > jvp =
      (Teuchos::dyn_cast<ROL::StdVector<Real> >(jv)).getVector();
    obj_->gradient(*dualVector_,x,tol);
    (*jvp)[0] = v.dot(dualVector_->dual());
  }

  void applyAdjointJacobian(Vector<Real> &ajv, const Vector<Real> &v,
                            const Vector<Real> &x, Real &tol) {
    Teuchos::RCP<const std::vector<Real> > vp =
      (Teuchos::dyn_cast<const ROL::StdVector<Real> >(v)).getVector();
    obj_->gradient(ajv,x,tol);
    ajv.scale((*vp)[0]);
  }

  void applyAdjointHessian(Vector<Real> &ahuv, const Vector<Real> &u,
                           const Vector<Real> &v, const Vector<Real> &x,
                           Real &tol) {
    Teuchos::RCP<const std::vector<Real> > up =
      (Teuchos::dyn_cast<const ROL::StdVector<Real> >(u)).getVector();
    obj_->hessVec(ahuv,v,x,tol);
    ahuv.scale((*up)[0]);
  }

}; // class ConstraintFromObjective

} // namespace ROL

#endif
