  Enable Delayed Solver Construction : bool = 0
   # When this option is set to true, the linear solver factory will be wrapped
   # in a delayed evaluation Decorator factory object.  This results in a delay
   # in the creation of a linear solver (and the associated preconditioner) until
   # the first solve is actually performed.  This helps in cases where it is not
   # known a-priori if a linear solve will be needed on a given linear operator and
   # therefore can significantly improve performance for some types of algorithms
   # such as NOX and LOCA.
  Linear Solver Type : string = Amesos
   # Determines the type of linear solver that will be used.
   # The parameters for each solver type are specified in the sublist "Linear Solver Types"
   #   Valid std::string values:
   #     {
   #       "Belos"
   #       "Amesos"
   #       "AztecOO"
   #     }
  Preconditioner Type : string = Ifpack
   # Determines the type of preconditioner that will be used.
   # This option is only meaningful for linear solvers that accept preconditioner factory objects!
   # The parameters for each preconditioner are specified in the sublist "Preconditioner Types"
   #   Valid std::string values:
   #     {
   #       "None"
   #       "ML"
   #       "Ifpack"
   #     }
  Linear Solver Types -> 
   # Sublists for each of the linear solver types set using the parameter
   # "Linear Solver Type".  Note that the options for each
   # linear solver type given below will only be used if linear solvers
   # of that type are created.  It is fine to list parameter sublists for
   # linear solver types that are not used.
   Amesos -> 
    Refactorization Policy : string = RepivotOnRefactorization
    Solver Type : string = Klu
    Throw on Preconditioner Input : bool = 1
    Amesos Settings -> 
     AddToDiag : double = 0
     AddZeroToDiag : bool = 0
     ComputeTrueResidual : bool = 0
     ComputeVectorNorms : bool = 0
     DebugLevel : int = 0
     MatrixProperty : string = general
     MaxProcs : int = -1
     NoDestroy : bool = 0
     OutputLevel : int = 1
     PrintTiming : bool = 0
     RcondThreshold : double = 1e-12
     Redistribute : bool = 0
     Refactorize : bool = 0
     Reindex : bool = 0
     ScaleMethod : int = 0
     TrustMe : bool = 0
     Lapack -> 
      Equilibrate : bool = 1
     Mumps -> 
      ColScaling : double* = 0
      Equilibrate : bool = 1
      RowScaling : double* = 0
     Pardiso -> 
      IPARM(1) : int = 0
      IPARM(10) : int = 0
      IPARM(11) : int = 0
      IPARM(18) : int = 0
      IPARM(19) : int = 0
      IPARM(2) : int = 0
      IPARM(21) : int = 0
      IPARM(3) : int = 0
      IPARM(4) : int = 0
      IPARM(8) : int = 0
      MSGLVL : int = 0
     Scalapack -> 
      2D distribution : bool = 1
      grid_nb : int = 32
     Superludist -> 
      ColPerm : string = NOT SET
      Equil : bool = 0
      Fact : string = SamePattern
      IterRefine : string = NOT SET
      PrintNonzeros : bool = 0
      ReplaceTinyPivot : bool = 1
      ReuseSymbolic : bool = 0
      RowPerm : string = NOT SET
      perm_c : int* = 0
      perm_r : int* = 0
    VerboseObject -> 
     Output File : string = none
      # The file to send output to.  If the value "none" is used, then
      # whatever is set in code will be used.  However, any other std::string value
      # will be used to create an std::ofstream object to a file with the given name.
      # Therefore, any valid file name is a valid std::string value for this parameter.
     Verbosity Level : string = default
      # The verbosity level to use to override whatever is set in code.
      # The value of "default" will allow the level set in code to be used.
      #   Valid std::string values:
      #     {
      #       "default"
      #          Use level set in code
      #       "none"
      #          Produce no output
      #       "low"
      #          Produce minimal output
      #       "medium"
      #          Produce a little more output
      #       "high"
      #          Produce a higher level of output
      #       "extreme"
      #          Produce the highest level of output
      #     }
   AztecOO -> 
    Output Every RHS : bool = 0
     # Determines if output is created for each individual RHS (true or 1) or if output
     # is just created for an entire set of RHSs (false or 0).
    Adjoint Solve -> 
     # The options for the adjoint solve.
     # If this sublist is missing then the parameters from the
     # "Forward Solve" sublist are used instead.
     Max Iterations : int = 400
      # The maximum number of iterations the AztecOO solver is allowed to perform.
     Tolerance : double = 1e-06
      # The tolerence used in the convergence check (see the convergence test
      # in the sublist "AztecOO Settings")
     AztecOO Settings -> 
      # Sets the parameters on the AztecOO object itself.
      Aztec Preconditioner : string = ilu
       # Type of internal preconditioner to use.
       # Note! this preconditioner will only be used if the input operator
       # supports the Epetra_RowMatrix interface and the client does not pass
       # in an external preconditioner!
       #   Valid std::string values:
       #     {
       #       "none"
       #       "ilu"
       #       "ilut"
       #       "Jacobi"
       #       "Symmetric Gauss-Seidel"
       #       "Polynomial"
       #       "Least-squares Polynomial"
       #     }
      Aztec Solver : string = GMRES
       # Type of linear solver algorithm to use.
       #   Valid std::string values:
       #     {
       #       "CG"
       #       "GMRES"
       #       "CGS"
       #       "TFQMR"
       #       "BiCGStab"
       #       "LU"
       #     }
      Convergence Test : string = r0
       # The convergence test to use for terminating the iterative solver.
       #   Valid std::string values:
       #     {
       #       "r0"
       #       "rhs"
       #       "Anorm"
       #       "no scaling"
       #       "sol"
       #     }
      Drop Tolerance : double = 0
       # The tolerance below which an entry from the factors of an internal "ilut"
       # preconditioner will be dropped.
       #  Accepted types: "int", "double", "string".
      Fill Factor : double = 1
       # The amount of fill allowed for an internal "ilut" preconditioner.
       #  Accepted types: "int", "double", "string".
      Graph Fill : int = 0
       # The amount of fill allowed for the internal "ilu" preconditioner.
       #  Accepted types: "int", "double", "string".
      Ill-Conditioning Threshold : double = 1e+11
       # The threshold tolerance above which a system is considered
       # ill conditioned.
       #  Accepted types: "int", "double", "string".
      Orthogonalization : string = Classical
       # The type of orthogonalization to use with the "GMRES" solver.
       #   Valid std::string values:
       #     {
       #       "Classical"
       #       "Modified"
       #     }
      Output Frequency : int = 0
       # The number of iterations between each output of the solver's progress.
       #  Accepted types: "int", "double", "string".
      Overlap : int = 0
       # The amount of overlap used for the internal "ilu" and "ilut" preconditioners.
       #  Accepted types: "int", "double", "string".
      Polynomial Order : int = 3
       # The order for of the polynomials used for the "Polynomial" and
       # "Least-squares Polynomial" internal preconditioners.
       #  Accepted types: "int", "double", "string".
      RCM Reordering : string = Disabled
       # Determines if RCM reordering is used with the internal
       # "ilu" or "ilut" preconditioners.
       #   Valid std::string values:
       #     {
       #       "Enabled"
       #       "Disabled"
       #     }
      Size of Krylov Subspace : int = 300
       # The maximum size of the Krylov subspace used with "GMRES" before
       # a restart is performed.
       #  Accepted types: "int", "double", "string".
      Steps : int = 3
       # Number of steps taken for the "Jacobi" or the "Symmetric Gauss-Seidel"
       # internal preconditioners for each preconditioner application.
       #  Accepted types: "int", "double", "string".
    Forward Solve -> 
     # Gives the options for the forward solve.
     Max Iterations : int = 400
      # The maximum number of iterations the AztecOO solver is allowed to perform.
     Tolerance : double = 1e-06
      # The tolerence used in the convergence check (see the convergence test
      # in the sublist "AztecOO Settings")
     AztecOO Settings -> 
      # Sets the parameters on the AztecOO object itself.
      Aztec Preconditioner : string = ilu
       # Type of internal preconditioner to use.
       # Note! this preconditioner will only be used if the input operator
       # supports the Epetra_RowMatrix interface and the client does not pass
       # in an external preconditioner!
       #   Valid std::string values:
       #     {
       #       "none"
       #       "ilu"
       #       "ilut"
       #       "Jacobi"
       #       "Symmetric Gauss-Seidel"
       #       "Polynomial"
       #       "Least-squares Polynomial"
       #     }
      Aztec Solver : string = GMRES
       # Type of linear solver algorithm to use.
       #   Valid std::string values:
       #     {
       #       "CG"
       #       "GMRES"
       #       "CGS"
       #       "TFQMR"
       #       "BiCGStab"
       #       "LU"
       #     }
      Convergence Test : string = r0
       # The convergence test to use for terminating the iterative solver.
       #   Valid std::string values:
       #     {
       #       "r0"
       #       "rhs"
       #       "Anorm"
       #       "no scaling"
       #       "sol"
       #     }
      Drop Tolerance : double = 0
       # The tolerance below which an entry from the factors of an internal "ilut"
       # preconditioner will be dropped.
       #  Accepted types: "int", "double", "string".
      Fill Factor : double = 1
       # The amount of fill allowed for an internal "ilut" preconditioner.
       #  Accepted types: "int", "double", "string".
      Graph Fill : int = 0
       # The amount of fill allowed for the internal "ilu" preconditioner.
       #  Accepted types: "int", "double", "string".
      Ill-Conditioning Threshold : double = 1e+11
       # The threshold tolerance above which a system is considered
       # ill conditioned.
       #  Accepted types: "int", "double", "string".
      Orthogonalization : string = Classical
       # The type of orthogonalization to use with the "GMRES" solver.
       #   Valid std::string values:
       #     {
       #       "Classical"
       #       "Modified"
       #     }
      Output Frequency : int = 0
       # The number of iterations between each output of the solver's progress.
       #  Accepted types: "int", "double", "string".
      Overlap : int = 0
       # The amount of overlap used for the internal "ilu" and "ilut" preconditioners.
       #  Accepted types: "int", "double", "string".
      Polynomial Order : int = 3
       # The order for of the polynomials used for the "Polynomial" and
       # "Least-squares Polynomial" internal preconditioners.
       #  Accepted types: "int", "double", "string".
      RCM Reordering : string = Disabled
       # Determines if RCM reordering is used with the internal
       # "ilu" or "ilut" preconditioners.
       #   Valid std::string values:
       #     {
       #       "Enabled"
       #       "Disabled"
       #     }
      Size of Krylov Subspace : int = 300
       # The maximum size of the Krylov subspace used with "GMRES" before
       # a restart is performed.
       #  Accepted types: "int", "double", "string".
      Steps : int = 3
       # Number of steps taken for the "Jacobi" or the "Symmetric Gauss-Seidel"
       # internal preconditioners for each preconditioner application.
       #  Accepted types: "int", "double", "string".
    VerboseObject -> 
     Output File : string = none
      # The file to send output to.  If the value "none" is used, then
      # whatever is set in code will be used.  However, any other std::string value
      # will be used to create an std::ofstream object to a file with the given name.
      # Therefore, any valid file name is a valid std::string value for this parameter.
     Verbosity Level : string = default
      # The verbosity level to use to override whatever is set in code.
      # The value of "default" will allow the level set in code to be used.
      #   Valid std::string values:
      #     {
      #       "default"
      #          Use level set in code
      #       "none"
      #          Produce no output
      #       "low"
      #          Produce minimal output
      #       "medium"
      #          Produce a little more output
      #       "high"
      #          Produce a higher level of output
      #       "extreme"
      #          Produce the highest level of output
      #     }
   Belos -> 
    Solver Type : string = Block GMRES
     # Type of linear solver algorithm to use.
     #   Valid std::string values:
     #     {
     #       "Block GMRES"
     #          Performs block and single single-RHS GMRES as well as
     #          flexible GMRES by setting options in the "Block GMRES" sublist.
     #       "Pseudo Block GMRES"
     #          GMRES solver that performs single-RHS GMRES on multiple RHSs taking
     #          advantage of operator multi-vector multiplication and the amortization
     #          of global communication.  Individual linear systems are deflated out as
     #          they are solved.
     #       "Block CG"
     #          CG solver that performs block and single-RHS CG.
     #       "Pseudo Block CG"
     #          CG solver that performs single-RHS CG on multiple RHSs taking
     #          advantage of operator multi-vector multiplication and the amortization
     #          of global communication.  Individual linear systems are deflated out as
     #          they are solved.
     #       "GCRODR"
     #          GMRES solver that performs subspace recycling between RHS and linear systems.
     #     }
    Solver Types -> 
     Block CG -> 
      Adaptive Block Size : bool = 1
       # Whether the solver manager should adapt to the block size
       # based on the number of RHS to solve.
      Block Size : int = 1
       # The number of vectors in each block.
      Convergence Tolerance : double = 1e-08
       # The relative residual tolerance that needs to be achieved by the
       # iterative solver in order for the linear system to be declared converged.
      Maximum Iterations : int = 1000
       # The maximum number of block iterations allowed for each
       # set of RHS solved.
      Orthogonalization : string = DGKS
       # The type of orthogonalization to use: DGKS, ICGS, or IMGS.
      Orthogonalization Constant : double = -1
       # The constant used by DGKS orthogonalization to determine
       # whether another step of classical Gram-Schmidt is necessary.
      Output Frequency : int = -1
       # How often convergence information should be outputted
       # to the output stream.
      Output Style : int = 0
       # Option of General (0) or Brief (1) style of output
      Output Stream : Teuchos::RCP<std::ostream> = Teuchos::RCP<std::ostream>{ptr=0x53b820,node=0x544990,count=4}
       # A reference-counted pointer to the output stream where all
       # solver output is sent.
      Show Maximum Residual Norm Only : bool = 0
       # When convergence information is printed, only show the maximum
       # relative residual norm when the block size is greater than one.
      Timer Label : string = Belos
       # The string to use as a prefix for the timer labels.
      Verbosity : int = 0
       # What type(s) of solver information should be outputted
       # to the output stream.
     Block GMRES -> 
      Adaptive Block Size : bool = 1
       # Whether the solver manager should adapt the block size
       # based on the number of RHS to solve.
      Block Size : int = 1
       # The number of vectors in each block.  This number times the
       # number of blocks is the total Krylov subspace dimension.
      Convergence Tolerance : double = 1e-08
       # The relative residual tolerance that needs to be achieved by the
       # iterative solver in order for the linear system to be declared converged.
      Explicit Residual Scaling : string = Norm of Initial Residual
       # The type of scaling used in the explicit residual convergence test.
      Explicit Residual Test : bool = 0
       # Whether the explicitly computed residual should be used in the convergence test.
      Flexible Gmres : bool = 0
       # Whether the solver manager should use the flexible variant
       # of GMRES.
      Implicit Residual Scaling : string = Norm of Preconditioned Initial Residual
       # The type of scaling used in the implicit residual convergence test.
      Maximum Iterations : int = 1000
       # The maximum number of block iterations allowed for each
       # set of RHS solved.
      Maximum Restarts : int = 20
       # The maximum number of restarts allowed for each
       # set of RHS solved.
      Num Blocks : int = 300
       # The maximum number of blocks allowed in the Krylov subspace
       # for each set of RHS solved.
      Orthogonalization : string = DGKS
       # The type of orthogonalization to use: DGKS, ICGS, or IMGS.
      Orthogonalization Constant : double = -1
       # The constant used by DGKS orthogonalization to determine
       # whether another step of classical Gram-Schmidt is necessary.
      Output Frequency : int = -1
       # How often convergence information should be outputted
       # to the output stream.
      Output Style : int = 0
       # Option of General (0) or Brief (1) style of output
      Output Stream : Teuchos::RCP<std::ostream> = Teuchos::RCP<std::ostream>{ptr=0x53b820,node=0x544730,count=4}
       # A reference-counted pointer to the output stream where all
       # solver output is sent.
      Show Maximum Residual Norm Only : bool = 0
       # When convergence information is printed, only show the maximum
       # relative residual norm when the block size is greater than one.
      Timer Label : string = Belos
       # The string to use as a prefix for the timer labels.
      Verbosity : int = 0
       # What type(s) of solver information should be outputted
       # to the output stream.
     Pseudo Block GMRES -> 
      Adaptive Block Size : bool = 1
       # Whether the solver manager should adapt the block size
       # based on the number of RHS to solve.
      Block Size : int = 1
       # The number of RHS solved simultaneously.
      Convergence Tolerance : double = 1e-08
       # The relative residual tolerance that needs to be achieved by the
       # iterative solver in order for the linera system to be declared converged.
      Deflation Quorum : int = 1
       # The number of linear systems that need to converge before
       # they are deflated.  This number should be <= block size.
      Explicit Residual Scaling : string = Norm of Initial Residual
       # The type of scaling used in the explicit residual convergence test.
      Implicit Residual Scaling : string = Norm of Preconditioned Initial Residual
       # The type of scaling used in the implicit residual convergence test.
      Maximum Iterations : int = 1000
       # The maximum number of block iterations allowed for each
       # set of RHS solved.
      Maximum Restarts : int = 20
       # The maximum number of restarts allowed for each
       # set of RHS solved.
      Num Blocks : int = 300
       # The maximum number of vectors allowed in the Krylov subspace
       # for each set of RHS solved.
      Orthogonalization : string = DGKS
       # The type of orthogonalization to use: DGKS, ICGS, IMGS.
      Orthogonalization Constant : double = -1
       # The constant used by DGKS orthogonalization to determine
       # whether another step of classical Gram-Schmidt is necessary.
      Output Frequency : int = -1
       # How often convergence information should be outputted
       # to the output stream.
      Output Style : int = 0
       # Option of General (0) or Brief (1) style of output
      Output Stream : Teuchos::RCP<std::ostream> = Teuchos::RCP<std::ostream>{ptr=0x53b820,node=0x544860,count=4}
       # A reference-counted pointer to the output stream where all
       # solver output is sent.
      Show Maximum Residual Norm Only : bool = 0
       # When convergence information is printed, only show the maximum
       # relative residual norm when the block size is greater than one.
      Timer Label : string = Belos
       # The string to use as a prefix for the timer labels.
      Verbosity : int = 0
       # What type(s) of solver information should be outputted
       # to the output stream.
    VerboseObject -> 
     Output File : string = none
      # The file to send output to.  If the value "none" is used, then
      # whatever is set in code will be used.  However, any other std::string value
      # will be used to create an std::ofstream object to a file with the given name.
      # Therefore, any valid file name is a valid std::string value for this parameter.
     Verbosity Level : string = default
      # The verbosity level to use to override whatever is set in code.
      # The value of "default" will allow the level set in code to be used.
      #   Valid std::string values:
      #     {
      #       "default"
      #          Use level set in code
      #       "none"
      #          Produce no output
      #       "low"
      #          Produce minimal output
      #       "medium"
      #          Produce a little more output
      #       "high"
      #          Produce a higher level of output
      #       "extreme"
      #          Produce the highest level of output
      #     }
  Preconditioner Types -> 
   # Sublists for each of the preconditioner types set using the parameter
   # "Preconditioner Type".  Note that the options for each
   # preconditioner type given below will only be used if preconditioners
   # of that type are created.  It is fine to list parameter sublists for
   # preconditioner types that are not used.
   Ifpack -> 
    Overlap : int = 0
     # Number of rows/columns overlapped between subdomains in different
     # processes in the additive Schwarz-type domain-decomposition preconditioners.
    Prec Type : string = ILU
     # Type of Ifpack preconditioner to use.
     #   Valid std::string values:
     #     {
     #       "point relaxation"
     #       "point relaxation stand-alone"
     #       "block relaxation"
     #       "block relaxation stand-alone"
     #       "block relaxation stand-alone (ILU)"
     #       "block relaxation stand-alone (Amesos)"
     #       "block relaxation (Amesos)"
     #       "Amesos"
     #       "Amesos stand-alone"
     #       "IC"
     #       "IC stand-alone"
     #       "ICT"
     #       "ICT stand-alone"
     #       "ILU"
     #       "ILU stand-alone"
     #       "ILUT"
     #       "ILUT stand-alone"
     #       "Chebyshev"
     #     }
    Ifpack Settings -> 
     # Preconditioner settings that are passed onto the Ifpack preconditioners themselves.
     amesos: solver type : string = Amesos_Klu
     fact: absolute threshold : double = 0
     fact: drop tolerance : double = 0
     fact: ict level-of-fill : double = 1
     fact: ilut level-of-fill : double = 1
     fact: level-of-fill : int = 0
     fact: relative threshold : double = 1
     fact: relax value : double = 0
     fact: sparskit: alph : double = 0
     fact: sparskit: droptol : double = 0
     fact: sparskit: lfil : int = 0
     fact: sparskit: mbloc : int = -1
     fact: sparskit: permtol : double = 0.1
     fact: sparskit: tol : double = 0
     fact: sparskit: type : string = ILUT
     partitioner: local parts : int = 1
     partitioner: overlap : int = 0
     partitioner: print level : int = 0
     partitioner: type : string = greedy
     partitioner: use symmetric graph : bool = 1
     relaxation: damping factor : double = 1
     relaxation: min diagonal value : double = 1
     relaxation: sweeps : int = 1
     relaxation: type : string = Jacobi
     relaxation: zero starting solution : bool = 1
     schwarz: combine mode : string = Zero
     schwarz: compute condest : bool = 1
     schwarz: filter singletons : bool = 0
     schwarz: reordering type : string = none
    VerboseObject -> 
     Output File : string = none
      # The file to send output to.  If the value "none" is used, then
      # whatever is set in code will be used.  However, any other std::string value
      # will be used to create an std::ofstream object to a file with the given name.
      # Therefore, any valid file name is a valid std::string value for this parameter.
     Verbosity Level : string = default
      # The verbosity level to use to override whatever is set in code.
      # The value of "default" will allow the level set in code to be used.
      #   Valid std::string values:
      #     {
      #       "default"
      #          Use level set in code
      #       "none"
      #          Produce no output
      #       "low"
      #          Produce minimal output
      #       "medium"
      #          Produce a little more output
      #       "high"
      #          Produce a higher level of output
      #       "extreme"
      #          Produce the highest level of output
      #     }
   ML -> 
    Base Method Defaults : string = DD
     # Select the default method type which also sets parameter defaults
     # in the sublist "ML Settings"!
     #   Valid std::string values:
     #     {
     #       "none"
     #          Do not set any default parameters
     #       "SA"
     #          Set default parameters for a smoothed aggregation method
     #       "DD"
     #          Set default parameters for a domain decomposition method
     #       "DD-ML"
     #          Set default parameters for a domain decomposition method special to ML
     #       "maxwell"
     #          Set default parameters for a Maxwell-type of linear operator
     #     }
    ML Settings -> 
     # Sampling of the parameters directly accepted by ML
     # This list of parameters is generated by combining all of
     # the parameters set for all of the default problem types supported
     # by ML.  Therefore, do not assume these parameters are at values that
     # are reasonable to ML.  This list is just to give a sense of some of
     # the parameters that ML accepts.  Consult ML documentation on how to
     # set these parameters.  Also, you can print the parameter list after
     # it is used and see what defaults where set for each default problem
     # type.  Warning! the parameters in this sublist are currently *not*
     # being validated by ML!
     aggregation: damping factor : double = 1.333
     aggregation: edge prolongator drop threshold : double = 0
     aggregation: local aggregates : int = 1
     aggregation: next-level aggregates per process : int = 128
     aggregation: nodes per aggregate : int = 512
     aggregation: type : string = Uncoupled-MIS
     coarse: max size : int = 128
     coarse: pre or post : string = post
     coarse: sweeps : int = 1
     coarse: type : string = Amesos-KLU
     default values : string = maxwell
     eigen-analysis: iterations : int = 10
     eigen-analysis: type : string = cg
     increasing or decreasing : string = decreasing
     max levels : int = 10
     prec type : string = MGV
     smoother: Aztec as solver : bool = 0
     smoother: Aztec options : Teuchos::RCP<__gnu_debug_def::vector<int, std::allocator<int> > > = Teuchos::RCP<__gnu_debug_def::vector<int, std::allocator<int> > >{ptr=0x55de40,node=0x55df40,count=2}
     smoother: Aztec params : Teuchos::RCP<__gnu_debug_def::vector<double, std::allocator<double> > > = Teuchos::RCP<__gnu_debug_def::vector<double, std::allocator<double> > >{ptr=0x55e140,node=0x55e920,count=2}
     smoother: Hiptmair efficient symmetric : bool = 1
     smoother: damping factor : double = 1
     smoother: pre or post : string = both
     smoother: sweeps : int = 1
     smoother: type : string = Hiptmair
     subsmoother: Chebyshev alpha : double = 20
     subsmoother: edge sweeps : int = 4
     subsmoother: node sweeps : int = 4
     subsmoother: type : string = Chebyshev
